/* tslint:disable */
/* eslint-disable */
/**
 * Pregenerated Reports
 * The Pregenerated Reports API allows you to obtain any pregenerated report that you need, including: item, item performance, buy box, CAP, promotions, reconciliation, return item override, shipping program and shipping configuration.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
	/**
	 * All available report dates are returned
	 * @type {Array<string>}
	 * @memberof InlineResponse200
	 */
	availableApReportDates?: Array<string>;
}
/**
 *
 * @export
 * @interface ReconReportDateResponse
 */
export interface ReconReportDateResponse {
	/**
	 * All available report dates are returned
	 * @type {Array<string>}
	 * @memberof ReconReportDateResponse
	 */
	availableApReportDates?: Array<string>;
}

/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
	return {
		/**
		 * This API will list all the available Marketplace reconciliation report dates for the Seller.
		 * @summary Available recon report dates
		 * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
		 * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
		 * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
		 * @param {string} wMSVCNAME Walmart Service Name
		 * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAvailableReconReportDates: async (
			authorization: string,
			wMSECACCESSTOKEN: string,
			wMQOSCORRELATIONID: string,
			wMSVCNAME: string,
			wMCONSUMERCHANNELTYPE?: string,
			options: any = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'authorization' is not null or undefined
			assertParamExists('getAvailableReconReportDates', 'authorization', authorization);
			// verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
			assertParamExists('getAvailableReconReportDates', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN);
			// verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
			assertParamExists('getAvailableReconReportDates', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID);
			// verify required parameter 'wMSVCNAME' is not null or undefined
			assertParamExists('getAvailableReconReportDates', 'wMSVCNAME', wMSVCNAME);
			const localVarPath = `/v3/report/reconreport/availableReconFiles`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication basicScheme required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			if (authorization !== undefined && authorization !== null) {
				localVarHeaderParameter['Authorization'] = String(authorization);
			}

			if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
				localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
			}

			if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
				localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
			}

			if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
				localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
			}

			if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
				localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Returns all the information associated with Seller\'s items that are set up on Walmart’s platform.
		 * @summary Multiple Reports
		 * @param {'item' | 'buybox' | 'cpa' | 'shippingProgram' | 'shippingConfiguration' | 'itemPerformance' | 'returnOverrides' | 'promo'} type Type of report to be requested
		 * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
		 * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
		 * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
		 * @param {string} wMSVCNAME Walmart Service Name
		 * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getItemReport: async (
			type:
				| 'item'
				| 'buybox'
				| 'cpa'
				| 'shippingProgram'
				| 'shippingConfiguration'
				| 'itemPerformance'
				| 'returnOverrides'
				| 'promo',
			authorization: string,
			wMSECACCESSTOKEN: string,
			wMQOSCORRELATIONID: string,
			wMSVCNAME: string,
			wMCONSUMERCHANNELTYPE?: string,
			options: any = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'type' is not null or undefined
			assertParamExists('getItemReport', 'type', type);
			// verify required parameter 'authorization' is not null or undefined
			assertParamExists('getItemReport', 'authorization', authorization);
			// verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
			assertParamExists('getItemReport', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN);
			// verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
			assertParamExists('getItemReport', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID);
			// verify required parameter 'wMSVCNAME' is not null or undefined
			assertParamExists('getItemReport', 'wMSVCNAME', wMSVCNAME);
			const localVarPath = `/v3/getReport`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication basicScheme required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			if (type !== undefined) {
				localVarQueryParameter['type'] = type;
			}

			if (authorization !== undefined && authorization !== null) {
				localVarHeaderParameter['Authorization'] = String(authorization);
			}

			if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
				localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
			}

			if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
				localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
			}

			if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
				localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
			}

			if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
				localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Seller can download the reconciliation report for a specific date using this API. Dates available to be downloaded can be found by using the Get available reconciliation report dates API.
		 * @summary Recon report
		 * @param {string} reportDate The date for which the reconcilation file is available
		 * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
		 * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
		 * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
		 * @param {string} wMSVCNAME Walmart Service Name
		 * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getReconReport: async (
			reportDate: string,
			authorization: string,
			wMSECACCESSTOKEN: string,
			wMQOSCORRELATIONID: string,
			wMSVCNAME: string,
			wMCONSUMERCHANNELTYPE?: string,
			options: any = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'reportDate' is not null or undefined
			assertParamExists('getReconReport', 'reportDate', reportDate);
			// verify required parameter 'authorization' is not null or undefined
			assertParamExists('getReconReport', 'authorization', authorization);
			// verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
			assertParamExists('getReconReport', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN);
			// verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
			assertParamExists('getReconReport', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID);
			// verify required parameter 'wMSVCNAME' is not null or undefined
			assertParamExists('getReconReport', 'wMSVCNAME', wMSVCNAME);
			const localVarPath = `/v3/report/reconreport/reconFile`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication basicScheme required
			// http basic authentication required
			setBasicAuthToObject(localVarRequestOptions, configuration);

			if (reportDate !== undefined) {
				localVarQueryParameter['reportDate'] = reportDate;
			}

			if (authorization !== undefined && authorization !== null) {
				localVarHeaderParameter['Authorization'] = String(authorization);
			}

			if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
				localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
			}

			if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
				localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
			}

			if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
				localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
			}

			if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
				localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers,
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration);
	return {
		/**
		 * This API will list all the available Marketplace reconciliation report dates for the Seller.
		 * @summary Available recon report dates
		 * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
		 * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
		 * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
		 * @param {string} wMSVCNAME Walmart Service Name
		 * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAvailableReconReportDates(
			authorization: string,
			wMSECACCESSTOKEN: string,
			wMQOSCORRELATIONID: string,
			wMSVCNAME: string,
			wMCONSUMERCHANNELTYPE?: string,
			options?: any
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableReconReportDates(
				authorization,
				wMSECACCESSTOKEN,
				wMQOSCORRELATIONID,
				wMSVCNAME,
				wMCONSUMERCHANNELTYPE,
				options
			);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Returns all the information associated with Seller\'s items that are set up on Walmart’s platform.
		 * @summary Multiple Reports
		 * @param {'item' | 'buybox' | 'cpa' | 'shippingProgram' | 'shippingConfiguration' | 'itemPerformance' | 'returnOverrides' | 'promo'} type Type of report to be requested
		 * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
		 * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
		 * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
		 * @param {string} wMSVCNAME Walmart Service Name
		 * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getItemReport(
			type:
				| 'item'
				| 'buybox'
				| 'cpa'
				| 'shippingProgram'
				| 'shippingConfiguration'
				| 'itemPerformance'
				| 'returnOverrides'
				| 'promo',
			authorization: string,
			wMSECACCESSTOKEN: string,
			wMQOSCORRELATIONID: string,
			wMSVCNAME: string,
			wMCONSUMERCHANNELTYPE?: string,
			options?: any
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getItemReport(
				type,
				authorization,
				wMSECACCESSTOKEN,
				wMQOSCORRELATIONID,
				wMSVCNAME,
				wMCONSUMERCHANNELTYPE,
				options
			);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Seller can download the reconciliation report for a specific date using this API. Dates available to be downloaded can be found by using the Get available reconciliation report dates API.
		 * @summary Recon report
		 * @param {string} reportDate The date for which the reconcilation file is available
		 * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
		 * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
		 * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
		 * @param {string} wMSVCNAME Walmart Service Name
		 * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getReconReport(
			reportDate: string,
			authorization: string,
			wMSECACCESSTOKEN: string,
			wMQOSCORRELATIONID: string,
			wMSVCNAME: string,
			wMCONSUMERCHANNELTYPE?: string,
			options?: any
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getReconReport(
				reportDate,
				authorization,
				wMSECACCESSTOKEN,
				wMQOSCORRELATIONID,
				wMSVCNAME,
				wMCONSUMERCHANNELTYPE,
				options
			);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = ReportsApiFp(configuration);
	return {
		/**
		 * This API will list all the available Marketplace reconciliation report dates for the Seller.
		 * @summary Available recon report dates
		 * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
		 * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
		 * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
		 * @param {string} wMSVCNAME Walmart Service Name
		 * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAvailableReconReportDates(
			authorization: string,
			wMSECACCESSTOKEN: string,
			wMQOSCORRELATIONID: string,
			wMSVCNAME: string,
			wMCONSUMERCHANNELTYPE?: string,
			options?: any
		): AxiosPromise<InlineResponse200> {
			return localVarFp
				.getAvailableReconReportDates(
					authorization,
					wMSECACCESSTOKEN,
					wMQOSCORRELATIONID,
					wMSVCNAME,
					wMCONSUMERCHANNELTYPE,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Returns all the information associated with Seller\'s items that are set up on Walmart’s platform.
		 * @summary Multiple Reports
		 * @param {'item' | 'buybox' | 'cpa' | 'shippingProgram' | 'shippingConfiguration' | 'itemPerformance' | 'returnOverrides' | 'promo'} type Type of report to be requested
		 * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
		 * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
		 * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
		 * @param {string} wMSVCNAME Walmart Service Name
		 * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getItemReport(
			type:
				| 'item'
				| 'buybox'
				| 'cpa'
				| 'shippingProgram'
				| 'shippingConfiguration'
				| 'itemPerformance'
				| 'returnOverrides'
				| 'promo',
			authorization: string,
			wMSECACCESSTOKEN: string,
			wMQOSCORRELATIONID: string,
			wMSVCNAME: string,
			wMCONSUMERCHANNELTYPE?: string,
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.getItemReport(
					type,
					authorization,
					wMSECACCESSTOKEN,
					wMQOSCORRELATIONID,
					wMSVCNAME,
					wMCONSUMERCHANNELTYPE,
					options
				)
				.then((request) => request(axios, basePath));
		},
		/**
		 * Seller can download the reconciliation report for a specific date using this API. Dates available to be downloaded can be found by using the Get available reconciliation report dates API.
		 * @summary Recon report
		 * @param {string} reportDate The date for which the reconcilation file is available
		 * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
		 * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
		 * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
		 * @param {string} wMSVCNAME Walmart Service Name
		 * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getReconReport(
			reportDate: string,
			authorization: string,
			wMSECACCESSTOKEN: string,
			wMQOSCORRELATIONID: string,
			wMSVCNAME: string,
			wMCONSUMERCHANNELTYPE?: string,
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.getReconReport(
					reportDate,
					authorization,
					wMSECACCESSTOKEN,
					wMQOSCORRELATIONID,
					wMSVCNAME,
					wMCONSUMERCHANNELTYPE,
					options
				)
				.then((request) => request(axios, basePath));
		},
	};
};

/**
 * Request parameters for getAvailableReconReportDates operation in ReportsApi.
 * @export
 * @interface ReportsApiGetAvailableReconReportDatesRequest
 */
export interface ReportsApiGetAvailableReconReportDatesRequest {
	/**
	 * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
	 * @type {string}
	 * @memberof ReportsApiGetAvailableReconReportDates
	 */
	readonly authorization: string;

	/**
	 * The access token retrieved in the Token API call
	 * @type {string}
	 * @memberof ReportsApiGetAvailableReconReportDates
	 */
	readonly wMSECACCESSTOKEN: string;

	/**
	 * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	 * @type {string}
	 * @memberof ReportsApiGetAvailableReconReportDates
	 */
	readonly wMQOSCORRELATIONID: string;

	/**
	 * Walmart Service Name
	 * @type {string}
	 * @memberof ReportsApiGetAvailableReconReportDates
	 */
	readonly wMSVCNAME: string;

	/**
	 * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	 * @type {string}
	 * @memberof ReportsApiGetAvailableReconReportDates
	 */
	readonly wMCONSUMERCHANNELTYPE?: string;
}

/**
 * Request parameters for getItemReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetItemReportRequest
 */
export interface ReportsApiGetItemReportRequest {
	/**
	 * Type of report to be requested
	 * @type {'item' | 'buybox' | 'cpa' | 'shippingProgram' | 'shippingConfiguration' | 'itemPerformance' | 'returnOverrides' | 'promo'}
	 * @memberof ReportsApiGetItemReport
	 */
	readonly type:
		| 'item'
		| 'buybox'
		| 'cpa'
		| 'shippingProgram'
		| 'shippingConfiguration'
		| 'itemPerformance'
		| 'returnOverrides'
		| 'promo';

	/**
	 * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
	 * @type {string}
	 * @memberof ReportsApiGetItemReport
	 */
	readonly authorization: string;

	/**
	 * The access token retrieved in the Token API call
	 * @type {string}
	 * @memberof ReportsApiGetItemReport
	 */
	readonly wMSECACCESSTOKEN: string;

	/**
	 * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	 * @type {string}
	 * @memberof ReportsApiGetItemReport
	 */
	readonly wMQOSCORRELATIONID: string;

	/**
	 * Walmart Service Name
	 * @type {string}
	 * @memberof ReportsApiGetItemReport
	 */
	readonly wMSVCNAME: string;

	/**
	 * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	 * @type {string}
	 * @memberof ReportsApiGetItemReport
	 */
	readonly wMCONSUMERCHANNELTYPE?: string;
}

/**
 * Request parameters for getReconReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetReconReportRequest
 */
export interface ReportsApiGetReconReportRequest {
	/**
	 * The date for which the reconcilation file is available
	 * @type {string}
	 * @memberof ReportsApiGetReconReport
	 */
	readonly reportDate: string;

	/**
	 * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
	 * @type {string}
	 * @memberof ReportsApiGetReconReport
	 */
	readonly authorization: string;

	/**
	 * The access token retrieved in the Token API call
	 * @type {string}
	 * @memberof ReportsApiGetReconReport
	 */
	readonly wMSECACCESSTOKEN: string;

	/**
	 * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
	 * @type {string}
	 * @memberof ReportsApiGetReconReport
	 */
	readonly wMQOSCORRELATIONID: string;

	/**
	 * Walmart Service Name
	 * @type {string}
	 * @memberof ReportsApiGetReconReport
	 */
	readonly wMSVCNAME: string;

	/**
	 * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
	 * @type {string}
	 * @memberof ReportsApiGetReconReport
	 */
	readonly wMCONSUMERCHANNELTYPE?: string;
}

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
	/**
	 * This API will list all the available Marketplace reconciliation report dates for the Seller.
	 * @summary Available recon report dates
	 * @param {ReportsApiGetAvailableReconReportDatesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReportsApi
	 */
	public getAvailableReconReportDates(
		requestParameters: ReportsApiGetAvailableReconReportDatesRequest,
		options?: any
	) {
		return ReportsApiFp(this.configuration)
			.getAvailableReconReportDates(
				requestParameters.authorization,
				requestParameters.wMSECACCESSTOKEN,
				requestParameters.wMQOSCORRELATIONID,
				requestParameters.wMSVCNAME,
				requestParameters.wMCONSUMERCHANNELTYPE,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Returns all the information associated with Seller\'s items that are set up on Walmart’s platform.
	 * @summary Multiple Reports
	 * @param {ReportsApiGetItemReportRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReportsApi
	 */
	public getItemReport(requestParameters: ReportsApiGetItemReportRequest, options?: any) {
		return ReportsApiFp(this.configuration)
			.getItemReport(
				requestParameters.type,
				requestParameters.authorization,
				requestParameters.wMSECACCESSTOKEN,
				requestParameters.wMQOSCORRELATIONID,
				requestParameters.wMSVCNAME,
				requestParameters.wMCONSUMERCHANNELTYPE,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Seller can download the reconciliation report for a specific date using this API. Dates available to be downloaded can be found by using the Get available reconciliation report dates API.
	 * @summary Recon report
	 * @param {ReportsApiGetReconReportRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReportsApi
	 */
	public getReconReport(requestParameters: ReportsApiGetReconReportRequest, options?: any) {
		return ReportsApiFp(this.configuration)
			.getReconReport(
				requestParameters.reportDate,
				requestParameters.authorization,
				requestParameters.wMSECACCESSTOKEN,
				requestParameters.wMQOSCORRELATIONID,
				requestParameters.wMSVCNAME,
				requestParameters.wMCONSUMERCHANNELTYPE,
				options
			)
			.then((request) => request(this.axios, this.basePath));
	}
}
