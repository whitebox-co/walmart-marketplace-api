/* tslint:disable */
/* eslint-disable */
/**
 * Order Management
 * The Walmart Order Management APIs help Sellers to manage customerâ€™s Sales Orders and to stay up-to-date on orders fulfillment, which orders to fulfill, and when to fulfill them.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AsnType
 */
export interface AsnType {
    /**
     * 
     * @type {string}
     * @memberof AsnType
     */
    packageASN: string;
    /**
     * 
     * @type {string}
     * @memberof AsnType
     */
    palletASN?: string;
}
/**
 * List of details about the cancellation status update
 * @export
 * @interface CancelLineStatusType
 */
export interface CancelLineStatusType {
    /**
     * Use \'Cancelled\'
     * @type {string}
     * @memberof CancelLineStatusType
     */
    status: CancelLineStatusTypeStatusEnum;
    /**
     * Reason for cancellation. Example: \'CUSTOMER_REQUESTED_SELLER_TO_CANCEL\'
     * @type {string}
     * @memberof CancelLineStatusType
     */
    cancellationReason: CancelLineStatusTypeCancellationReasonEnum;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineQuantity}
     * @memberof CancelLineStatusType
     */
    statusQuantity: InlineResponse200ListElementsOrderLinesOrderLineQuantity;
}

/**
    * @export
    * @enum {string}
    */
export enum CancelLineStatusTypeStatusEnum {
    Created = 'Created',
    Acknowledged = 'Acknowledged',
    Shipped = 'Shipped',
    Delivered = 'Delivered',
    Cancelled = 'Cancelled',
    Refund = 'Refund'
}
/**
    * @export
    * @enum {string}
    */
export enum CancelLineStatusTypeCancellationReasonEnum {
    CustomerRequestedSellerToCancel = 'CUSTOMER_REQUESTED_SELLER_TO_CANCEL',
    SellerCancelPricingError = 'SELLER_CANCEL_PRICING_ERROR',
    SellerCancelOutOfStock = 'SELLER_CANCEL_OUT_OF_STOCK',
    SellerCancelFraudStopShipment = 'SELLER_CANCEL_FRAUD_STOP_SHIPMENT',
    SellerCancelAddressNotServiceable = 'SELLER_CANCEL_ADDRESS_NOT_SERVICEABLE'
}

/**
 * A list of statuses which should contain the new cancellation status
 * @export
 * @interface CancelLineStatusesType
 */
export interface CancelLineStatusesType {
    /**
     * List of details about the cancellation status update
     * @type {Array<V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatus>}
     * @memberof CancelLineStatusesType
     */
    orderLineStatus: Array<V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatus>;
}
/**
 * Information to update the orderLine with cancellation details
 * @export
 * @interface CancelLineType
 */
export interface CancelLineType {
    /**
     * 
     * @type {string}
     * @memberof CancelLineType
     */
    lineNumber: string;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatuses}
     * @memberof CancelLineType
     */
    orderLineStatuses: V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatuses;
}
/**
 * A list of orderLines to be cancelled
 * @export
 * @interface CancelLinesType
 */
export interface CancelLinesType {
    /**
     * Information to update the orderLine with cancellation details
     * @type {Array<V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLine>}
     * @memberof CancelLinesType
     */
    orderLine: Array<V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLine>;
}
/**
 * Information about the package carrier(s)
 * @export
 * @interface CarrierNameType
 */
export interface CarrierNameType {
    /**
     * Other carrier name, When otherCarrier is used, trackingUrl must also be provided
     * @type {string}
     * @memberof CarrierNameType
     */
    otherCarrier?: string;
    /**
     * The package shipment carrier. Valid entries are: UPS, USPS, FedEx, Airborne, OnTrac, DHL, LS (LaserShip), UDS (United Delivery Service), UPSMI (UPS Mail Innovations), FDX, PILOT, ESTES, SAIA, FDS Express, Seko Worldwide, HIT Delivery, FEDEXSP (FedEx SmartPost).
     * @type {string}
     * @memberof CarrierNameType
     */
    carrier?: CarrierNameTypeCarrierEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CarrierNameTypeCarrierEnum {
    Ups = 'UPS',
    Usps = 'USPS',
    FedEx = 'FedEx',
    Airborne = 'Airborne',
    OnTrac = 'OnTrac',
    Dhl = 'DHL',
    Ng = 'NG',
    Ls = 'LS',
    Uds = 'UDS',
    Upsmi = 'UPSMI',
    Fdx = 'FDX',
    Pilot = 'PILOT',
    Estes = 'ESTES',
    Saia = 'SAIA',
    FdsExpress = 'FDS Express',
    SekoWorldwide = 'Seko Worldwide',
    HitDelivery = 'HIT Delivery',
    Fedexsp = 'FEDEXSP'
}

/**
 * 
 * @export
 * @interface Cause
 */
export interface Cause {
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    description?: string;
}
/**
 * List of elements that make up a charge
 * @export
 * @interface ChargeType
 */
export interface ChargeType {
    /**
     * The charge type for line items can be one of the following: PRODUCT or SHIPPING For details, refer to \'Charge Types\'
     * @type {string}
     * @memberof ChargeType
     */
    chargeType: string;
    /**
     * If chargeType is PRODUCT, chargeName is Item Price. If chargeType is SHIPPING, chargeName is Shipping
     * @type {string}
     * @memberof ChargeType
     */
    chargeName: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesChargesChargeAmount}
     * @memberof ChargeType
     */
    chargeAmount: InlineResponse200ListElementsOrderLinesChargesChargeAmount;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesChargesTax}
     * @memberof ChargeType
     */
    tax?: InlineResponse200ListElementsOrderLinesChargesTax;
}
/**
 * Information relating to the charge for the orderLine
 * @export
 * @interface ChargesType
 */
export interface ChargesType {
    /**
     * Information relating to the charge for the orderLine
     * @type {Array<InlineResponse200ListElementsOrderLinesChargesCharge>}
     * @memberof ChargesType
     */
    charge?: Array<InlineResponse200ListElementsOrderLinesChargesCharge>;
}
/**
 * Information about the purchase order
 * @export
 * @interface ElementsType
 */
export interface ElementsType {
    /**
     * Purchase Order List
     * @type {Array<InlineResponse200ListElementsOrder>}
     * @memberof ElementsType
     */
    order?: Array<InlineResponse200ListElementsOrder>;
}
/**
 * fulfillment information
 * @export
 * @interface FulfillmentType
 */
export interface FulfillmentType {
    /**
     * Example : S2H, S2S, etc.
     * @type {string}
     * @memberof FulfillmentType
     */
    fulfillmentOption?: string;
    /**
     * Example : Value, Expedited, Standard, Rush, etc.
     * @type {string}
     * @memberof FulfillmentType
     */
    shipMethod?: string;
    /**
     * Store Id
     * @type {string}
     * @memberof FulfillmentType
     */
    storeId?: string;
    /**
     * Gives pick up datetime information
     * @type {number}
     * @memberof FulfillmentType
     */
    pickUpDateTime?: number;
    /**
     * Gives pick up by information
     * @type {string}
     * @memberof FulfillmentType
     */
    pickUpBy?: string;
    /**
     * Gives shipping program information. Examples TWO_DAY, THREE_DAY
     * @type {string}
     * @memberof FulfillmentType
     */
    shippingProgramType?: string;
}
/**
 * 
 * @export
 * @interface GatewayError
 */
export interface GatewayError {
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    info?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    severity?: GatewayErrorSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    category?: GatewayErrorCategoryEnum;
    /**
     * 
     * @type {Array<InlineResponse200ListCauses>}
     * @memberof GatewayError
     */
    causes?: Array<InlineResponse200ListCauses>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof GatewayError
     */
    errorIdentifiers?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    component?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    serviceName?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    gatewayErrorCategory?: GatewayErrorGatewayErrorCategoryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum GatewayErrorSeverityEnum {
    Info = 'INFO',
    Warn = 'WARN',
    Error = 'ERROR'
}
/**
    * @export
    * @enum {string}
    */
export enum GatewayErrorCategoryEnum {
    Application = 'APPLICATION',
    System = 'SYSTEM',
    Request = 'REQUEST',
    Data = 'DATA'
}
/**
    * @export
    * @enum {string}
    */
export enum GatewayErrorGatewayErrorCategoryEnum {
    InternalDataError = 'INTERNAL_DATA_ERROR',
    ExternalDataError = 'EXTERNAL_DATA_ERROR',
    SystemError = 'SYSTEM_ERROR'
}

/**
 * 
 * @export
 * @interface GetOrderResponse
 */
export interface GetOrderResponse {
    /**
     * 
     * @type {InlineResponse200ListElementsOrder}
     * @memberof GetOrderResponse
     */
    order?: InlineResponse200ListElementsOrder;
}
/**
 * Information about the purchase order
 * @export
 * @interface GetOrderResponseRecord
 */
export interface GetOrderResponseRecord {
    /**
     * A unique ID associated with the seller\'s purchase order
     * @type {string}
     * @memberof GetOrderResponseRecord
     */
    purchaseOrderId: string;
    /**
     * A unique ID associated with the sales order for specified customer
     * @type {string}
     * @memberof GetOrderResponseRecord
     */
    customerOrderId: string;
    /**
     * The email address of the customer for the sales order
     * @type {string}
     * @memberof GetOrderResponseRecord
     */
    customerEmailId: string;
    /**
     * Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true.
     * @type {string}
     * @memberof GetOrderResponseRecord
     */
    orderType?: string;
    /**
     * customer order ID of the original customer order on which the replacement is created. 
     * @type {string}
     * @memberof GetOrderResponseRecord
     */
    originalCustomerOrderID?: string;
    /**
     * The date the customer submitted the sales order
     * @type {number}
     * @memberof GetOrderResponseRecord
     */
    orderDate: number;
    /**
     * Unique ID associated with the specified buyer
     * @type {string}
     * @memberof GetOrderResponseRecord
     */
    buyerId?: string;
    /**
     * Mart information
     * @type {string}
     * @memberof GetOrderResponseRecord
     */
    mart?: string;
    /**
     * Indicates a guest customer
     * @type {boolean}
     * @memberof GetOrderResponseRecord
     */
    isGuest?: boolean;
    /**
     * 
     * @type {InlineResponse200ListElementsShippingInfo}
     * @memberof GetOrderResponseRecord
     */
    shippingInfo: InlineResponse200ListElementsShippingInfo;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLines}
     * @memberof GetOrderResponseRecord
     */
    orderLines: InlineResponse200ListElementsOrderLines;
    /**
     * Payment Types
     * @type {Array<string>}
     * @memberof GetOrderResponseRecord
     */
    paymentTypes?: Array<string>;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderSummary}
     * @memberof GetOrderResponseRecord
     */
    orderSummary?: InlineResponse200ListElementsOrderSummary;
    /**
     * List of pickup persons
     * @type {Array<InlineResponse200ListElementsPickupPersons>}
     * @memberof GetOrderResponseRecord
     */
    pickupPersons?: Array<InlineResponse200ListElementsPickupPersons>;
    /**
     * 
     * @type {InlineResponse200ListElementsShipNode}
     * @memberof GetOrderResponseRecord
     */
    shipNode?: InlineResponse200ListElementsShipNode;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdCancelOrderCancellation}
     * @memberof InlineObject
     */
    orderCancellation?: V3OrdersPurchaseOrderIdCancelOrderCancellation;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    purchaseOrderId: string;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdRefundOrderLines}
     * @memberof InlineObject1
     */
    orderLines: V3OrdersPurchaseOrderIdRefundOrderLines;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdShippingOrderShipment}
     * @memberof InlineObject2
     */
    orderShipment?: V3OrdersPurchaseOrderIdShippingOrderShipment;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {InlineResponse200List}
     * @memberof InlineResponse200
     */
    list?: InlineResponse200List;
}
/**
 * Information about the purchase order
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * A unique ID associated with the seller\'s purchase order
     * @type {string}
     * @memberof InlineResponse2001
     */
    purchaseOrderId: string;
    /**
     * A unique ID associated with the sales order for specified customer
     * @type {string}
     * @memberof InlineResponse2001
     */
    customerOrderId: string;
    /**
     * The email address of the customer for the sales order
     * @type {string}
     * @memberof InlineResponse2001
     */
    customerEmailId: string;
    /**
     * The date the customer submitted the sales order
     * @type {string}
     * @memberof InlineResponse2001
     */
    orderDate: string;
    /**
     * Unique ID associated with the specified buyer
     * @type {string}
     * @memberof InlineResponse2001
     */
    buyerId?: string;
    /**
     * Mart information
     * @type {string}
     * @memberof InlineResponse2001
     */
    mart?: string;
    /**
     * Indicates a guest customer
     * @type {boolean}
     * @memberof InlineResponse2001
     */
    isGuest?: boolean;
    /**
     * 
     * @type {InlineResponse200ListElementsShippingInfo}
     * @memberof InlineResponse2001
     */
    shippingInfo: InlineResponse200ListElementsShippingInfo;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLines}
     * @memberof InlineResponse2001
     */
    orderLines: InlineResponse200ListElementsOrderLines;
    /**
     * Payment Types
     * @type {Array<string>}
     * @memberof InlineResponse2001
     */
    paymentTypes?: Array<string>;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderSummary}
     * @memberof InlineResponse2001
     */
    orderSummary?: InlineResponse200ListElementsOrderSummary;
    /**
     * List of pickup persons
     * @type {Array<InlineResponse200ListElementsPickupPersons>}
     * @memberof InlineResponse2001
     */
    pickupPersons?: Array<InlineResponse200ListElementsPickupPersons>;
    /**
     * 
     * @type {InlineResponse200ListElementsShipNode}
     * @memberof InlineResponse2001
     */
    shipNode?: InlineResponse200ListElementsShipNode;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {InlineResponse200ListElementsOrder}
     * @memberof InlineResponse2002
     */
    order?: InlineResponse200ListElementsOrder;
}
/**
 * List of purchase orders in created state
 * @export
 * @interface InlineResponse200List
 */
export interface InlineResponse200List {
    /**
     * 
     * @type {Array<InlineResponse200ListErrors>}
     * @memberof InlineResponse200List
     */
    errors?: Array<InlineResponse200ListErrors>;
    /**
     * 
     * @type {InlineResponse200ListMeta}
     * @memberof InlineResponse200List
     */
    meta: InlineResponse200ListMeta;
    /**
     * 
     * @type {InlineResponse200ListElements}
     * @memberof InlineResponse200List
     */
    elements: InlineResponse200ListElements;
}
/**
 * 
 * @export
 * @interface InlineResponse200ListCauses
 */
export interface InlineResponse200ListCauses {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListCauses
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListCauses
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListCauses
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListCauses
     */
    description?: string;
}
/**
 * Information about the purchase order
 * @export
 * @interface InlineResponse200ListElements
 */
export interface InlineResponse200ListElements {
    /**
     * Purchase Order List
     * @type {Array<InlineResponse200ListElementsOrder>}
     * @memberof InlineResponse200ListElements
     */
    order?: Array<InlineResponse200ListElementsOrder>;
}
/**
 * 
 * @export
 * @interface InlineResponse200ListElementsName
 */
export interface InlineResponse200ListElementsName {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsName
     */
    completeName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsName
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsName
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsName
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsName
     */
    generalSuffix?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsName
     */
    maturitySuffix?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsName
     */
    titleOfRespect?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200ListElementsName
     */
    empty?: boolean;
}
/**
 * Information about the purchase order
 * @export
 * @interface InlineResponse200ListElementsOrder
 */
export interface InlineResponse200ListElementsOrder {
    /**
     * A unique ID associated with the seller\'s purchase order
     * @type {string}
     * @memberof InlineResponse200ListElementsOrder
     */
    purchaseOrderId: string;
    /**
     * A unique ID associated with the sales order for specified customer
     * @type {string}
     * @memberof InlineResponse200ListElementsOrder
     */
    customerOrderId: string;
    /**
     * The email address of the customer for the sales order
     * @type {string}
     * @memberof InlineResponse200ListElementsOrder
     */
    customerEmailId: string;
    /**
     * Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo=true.
     * @type {string}
     * @memberof InlineResponse200ListElementsOrder
     */
    orderType?: string;
    /**
     * customer order ID of the original customer order on which the replacement is created. 
     * @type {string}
     * @memberof InlineResponse200ListElementsOrder
     */
    originalCustomerOrderID?: string;
    /**
     * The date the customer submitted the sales order
     * @type {number}
     * @memberof InlineResponse200ListElementsOrder
     */
    orderDate: number;
    /**
     * Unique ID associated with the specified buyer
     * @type {string}
     * @memberof InlineResponse200ListElementsOrder
     */
    buyerId?: string;
    /**
     * Mart information
     * @type {string}
     * @memberof InlineResponse200ListElementsOrder
     */
    mart?: string;
    /**
     * Indicates a guest customer
     * @type {boolean}
     * @memberof InlineResponse200ListElementsOrder
     */
    isGuest?: boolean;
    /**
     * 
     * @type {InlineResponse200ListElementsShippingInfo}
     * @memberof InlineResponse200ListElementsOrder
     */
    shippingInfo: InlineResponse200ListElementsShippingInfo;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLines}
     * @memberof InlineResponse200ListElementsOrder
     */
    orderLines: InlineResponse200ListElementsOrderLines;
    /**
     * Payment Types
     * @type {Array<string>}
     * @memberof InlineResponse200ListElementsOrder
     */
    paymentTypes?: Array<string>;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderSummary}
     * @memberof InlineResponse200ListElementsOrder
     */
    orderSummary?: InlineResponse200ListElementsOrderSummary;
    /**
     * List of pickup persons
     * @type {Array<InlineResponse200ListElementsPickupPersons>}
     * @memberof InlineResponse200ListElementsOrder
     */
    pickupPersons?: Array<InlineResponse200ListElementsPickupPersons>;
    /**
     * 
     * @type {InlineResponse200ListElementsShipNode}
     * @memberof InlineResponse200ListElementsOrder
     */
    shipNode?: InlineResponse200ListElementsShipNode;
}
/**
 * A list of order lines in the order
 * @export
 * @interface InlineResponse200ListElementsOrderLines
 */
export interface InlineResponse200ListElementsOrderLines {
    /**
     * A list of order lines in the order
     * @type {Array<InlineResponse200ListElementsOrderLinesOrderLine>}
     * @memberof InlineResponse200ListElementsOrderLines
     */
    orderLine?: Array<InlineResponse200ListElementsOrderLinesOrderLine>;
}
/**
 * Information relating to the charge for the orderLine
 * @export
 * @interface InlineResponse200ListElementsOrderLinesCharges
 */
export interface InlineResponse200ListElementsOrderLinesCharges {
    /**
     * Information relating to the charge for the orderLine
     * @type {Array<InlineResponse200ListElementsOrderLinesChargesCharge>}
     * @memberof InlineResponse200ListElementsOrderLinesCharges
     */
    charge?: Array<InlineResponse200ListElementsOrderLinesChargesCharge>;
}
/**
 * List of elements that make up a charge
 * @export
 * @interface InlineResponse200ListElementsOrderLinesChargesCharge
 */
export interface InlineResponse200ListElementsOrderLinesChargesCharge {
    /**
     * The charge type for line items can be one of the following: PRODUCT or SHIPPING For details, refer to \'Charge Types\'
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesChargesCharge
     */
    chargeType: string;
    /**
     * If chargeType is PRODUCT, chargeName is Item Price. If chargeType is SHIPPING, chargeName is Shipping
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesChargesCharge
     */
    chargeName: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesChargesChargeAmount}
     * @memberof InlineResponse200ListElementsOrderLinesChargesCharge
     */
    chargeAmount: InlineResponse200ListElementsOrderLinesChargesChargeAmount;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesChargesTax}
     * @memberof InlineResponse200ListElementsOrderLinesChargesCharge
     */
    tax?: InlineResponse200ListElementsOrderLinesChargesTax;
}
/**
 * The details for the amount of the tax charge
 * @export
 * @interface InlineResponse200ListElementsOrderLinesChargesChargeAmount
 */
export interface InlineResponse200ListElementsOrderLinesChargesChargeAmount {
    /**
     * The type of currency for the charge. Example: USD for US Dollars
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesChargesChargeAmount
     */
    currency: InlineResponse200ListElementsOrderLinesChargesChargeAmountCurrencyEnum;
    /**
     * The numerical amount for that charge. Example: 9.99
     * @type {number}
     * @memberof InlineResponse200ListElementsOrderLinesChargesChargeAmount
     */
    amount: number;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListElementsOrderLinesChargesChargeAmountCurrencyEnum {
    Aed = 'AED',
    Afn = 'AFN',
    All = 'ALL',
    Amd = 'AMD',
    Ang = 'ANG',
    Aoa = 'AOA',
    Ars = 'ARS',
    Aud = 'AUD',
    Awg = 'AWG',
    Azn = 'AZN',
    Bam = 'BAM',
    Bbd = 'BBD',
    Bdt = 'BDT',
    Bgn = 'BGN',
    Bhd = 'BHD',
    Bif = 'BIF',
    Bmd = 'BMD',
    Bnd = 'BND',
    Bob = 'BOB',
    Brl = 'BRL',
    Bsd = 'BSD',
    Btn = 'BTN',
    Bwp = 'BWP',
    Byr = 'BYR',
    Bzd = 'BZD',
    Cad = 'CAD',
    Cdf = 'CDF',
    Chf = 'CHF',
    Clp = 'CLP',
    Cny = 'CNY',
    Cop = 'COP',
    Crc = 'CRC',
    Cup = 'CUP',
    Cve = 'CVE',
    Czk = 'CZK',
    Djf = 'DJF',
    Dkk = 'DKK',
    Dop = 'DOP',
    Dzd = 'DZD',
    Egp = 'EGP',
    Ern = 'ERN',
    Etb = 'ETB',
    Eur = 'EUR',
    Fjd = 'FJD',
    Fkp = 'FKP',
    Gbp = 'GBP',
    Gel = 'GEL',
    Ghs = 'GHS',
    Gip = 'GIP',
    Gmd = 'GMD',
    Gnf = 'GNF',
    Gtq = 'GTQ',
    Gyd = 'GYD',
    Hkd = 'HKD',
    Hnl = 'HNL',
    Hrk = 'HRK',
    Htg = 'HTG',
    Huf = 'HUF',
    Idr = 'IDR',
    Ils = 'ILS',
    Inr = 'INR',
    Iqd = 'IQD',
    Irr = 'IRR',
    Isk = 'ISK',
    Jmd = 'JMD',
    Jod = 'JOD',
    Jpy = 'JPY',
    Kes = 'KES',
    Kgs = 'KGS',
    Khr = 'KHR',
    Kmf = 'KMF',
    Kpw = 'KPW',
    Krw = 'KRW',
    Kwd = 'KWD',
    Kyd = 'KYD',
    Kzt = 'KZT',
    Lak = 'LAK',
    Lbp = 'LBP',
    Lkr = 'LKR',
    Lrd = 'LRD',
    Lsl = 'LSL',
    Ltl = 'LTL',
    Lvl = 'LVL',
    Lyd = 'LYD',
    Mad = 'MAD',
    Mdl = 'MDL',
    Mga = 'MGA',
    Mkd = 'MKD',
    Mmk = 'MMK',
    Mnt = 'MNT',
    Mop = 'MOP',
    Mro = 'MRO',
    Mur = 'MUR',
    Mvr = 'MVR',
    Mwk = 'MWK',
    Mxn = 'MXN',
    Myr = 'MYR',
    Mzn = 'MZN',
    Nad = 'NAD',
    Ngn = 'NGN',
    Nio = 'NIO',
    Nok = 'NOK',
    Npr = 'NPR',
    Nzd = 'NZD',
    Omr = 'OMR',
    Pab = 'PAB',
    Pen = 'PEN',
    Pgk = 'PGK',
    Php = 'PHP',
    Pkr = 'PKR',
    Pln = 'PLN',
    Pyg = 'PYG',
    Qar = 'QAR',
    Ron = 'RON',
    Rsd = 'RSD',
    Rub = 'RUB',
    Rur = 'RUR',
    Rwf = 'RWF',
    Sar = 'SAR',
    Sbd = 'SBD',
    Scr = 'SCR',
    Sdg = 'SDG',
    Sek = 'SEK',
    Sgd = 'SGD',
    Shp = 'SHP',
    Sll = 'SLL',
    Sos = 'SOS',
    Srd = 'SRD',
    Std = 'STD',
    Syp = 'SYP',
    Szl = 'SZL',
    Thb = 'THB',
    Tjs = 'TJS',
    Tmt = 'TMT',
    Tnd = 'TND',
    Top = 'TOP',
    Try = 'TRY',
    Ttd = 'TTD',
    Twd = 'TWD',
    Tzs = 'TZS',
    Uah = 'UAH',
    Ugx = 'UGX',
    Usd = 'USD',
    Uyu = 'UYU',
    Uzs = 'UZS',
    Vef = 'VEF',
    Vnd = 'VND',
    Vuv = 'VUV',
    Wst = 'WST',
    Xaf = 'XAF',
    Xag = 'XAG',
    Xau = 'XAU',
    Xba = 'XBA',
    Xbb = 'XBB',
    Xbc = 'XBC',
    Xbd = 'XBD',
    Xcd = 'XCD',
    Xdr = 'XDR',
    Xfu = 'XFU',
    Xof = 'XOF',
    Xpd = 'XPD',
    Xpf = 'XPF',
    Xpt = 'XPT',
    Xts = 'XTS',
    Xxx = 'XXX',
    Yer = 'YER',
    Zar = 'ZAR',
    Zmk = 'ZMK',
    Zwl = 'ZWL'
}

/**
 * Tax information for the charge, including taxName and taxAmount
 * @export
 * @interface InlineResponse200ListElementsOrderLinesChargesTax
 */
export interface InlineResponse200ListElementsOrderLinesChargesTax {
    /**
     * The name associated with the tax. Example: \'Sales Tax\'
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesChargesTax
     */
    taxName: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesChargesChargeAmount}
     * @memberof InlineResponse200ListElementsOrderLinesChargesTax
     */
    taxAmount: InlineResponse200ListElementsOrderLinesChargesChargeAmount;
}
/**
 * fulfillment information
 * @export
 * @interface InlineResponse200ListElementsOrderLinesFulfillment
 */
export interface InlineResponse200ListElementsOrderLinesFulfillment {
    /**
     * Example : S2H, S2S, etc.
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesFulfillment
     */
    fulfillmentOption?: string;
    /**
     * Example : Value, Expedited, Standard, Rush, etc.
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesFulfillment
     */
    shipMethod?: string;
    /**
     * Store Id
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesFulfillment
     */
    storeId?: string;
    /**
     * Gives pick up datetime information
     * @type {number}
     * @memberof InlineResponse200ListElementsOrderLinesFulfillment
     */
    pickUpDateTime?: number;
    /**
     * Gives pick up by information
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesFulfillment
     */
    pickUpBy?: string;
    /**
     * Gives shipping program information. Examples TWO_DAY, THREE_DAY
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesFulfillment
     */
    shippingProgramType?: string;
}
/**
 * The information for the item on the orderLine
 * @export
 * @interface InlineResponse200ListElementsOrderLinesItem
 */
export interface InlineResponse200ListElementsOrderLinesItem {
    /**
     * The name of the product associated with the line item. Example: \'Kenmore CF1\' or \'2086883 Canister Secondary Filter Generic 2 Pack\'
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesItem
     */
    productName: string;
    /**
     * An arbitrary alphanumeric unique ID, assigned to each item in the item file
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesItem
     */
    sku: string;
    /**
     * Optional. Web URL for the image of the item.
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesItem
     */
    imageUrl?: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesItemWeight}
     * @memberof InlineResponse200ListElementsOrderLinesItem
     */
    weight?: InlineResponse200ListElementsOrderLinesItemWeight;
}
/**
 * Optional. Weight information for the item.
 * @export
 * @interface InlineResponse200ListElementsOrderLinesItemWeight
 */
export interface InlineResponse200ListElementsOrderLinesItemWeight {
    /**
     * Numerical amount of weight parameter.
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesItemWeight
     */
    value: string;
    /**
     * Standard value of measurement of the item. Example: \'Pounds\'
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesItemWeight
     */
    unit: string;
}
/**
 * Purchase Order line information for each item
 * @export
 * @interface InlineResponse200ListElementsOrderLinesOrderLine
 */
export interface InlineResponse200ListElementsOrderLinesOrderLine {
    /**
     * The line number associated with the details for each individual item in the purchase order
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    lineNumber: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesItem}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    item: InlineResponse200ListElementsOrderLinesItem;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesCharges}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    charges: InlineResponse200ListElementsOrderLinesCharges;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineQuantity}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    orderLineQuantity: InlineResponse200ListElementsOrderLinesOrderLineQuantity;
    /**
     * The date shown on the recent order status
     * @type {number}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    statusDate: number;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatuses}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    orderLineStatuses: InlineResponse200ListElementsOrderLinesOrderLineStatuses;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesRefund}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    refund?: InlineResponse200ListElementsOrderLinesRefund;
    /**
     * Ship method stamped at order line level when order is placed
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    originalCarrierMethod?: string;
    /**
     * Reference line Id
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    referenceLineId?: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesFulfillment}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    fulfillment?: InlineResponse200ListElementsOrderLinesFulfillment;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    intentToCancel?: string;
    /**
     * Sets ConfigID for Personalised orders
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    configId?: string;
    /**
     * A unique ID associated with the sales order for specified Seller; gives Sellers the ability to print their own custom order ID on the return label; limit of 30 characters
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLine
     */
    sellerOrderId?: string;
}
/**
 * Details about the status update
 * @export
 * @interface InlineResponse200ListElementsOrderLinesOrderLineQuantity
 */
export interface InlineResponse200ListElementsOrderLinesOrderLineQuantity {
    /**
     * Unit of quantity
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineQuantity
     */
    unitOfMeasurement: InlineResponse200ListElementsOrderLinesOrderLineQuantityUnitOfMeasurementEnum;
    /**
     * Always use \'1\'
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineQuantity
     */
    amount: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListElementsOrderLinesOrderLineQuantityUnitOfMeasurementEnum {
    Each = 'EACH',
    Ea = 'EA'
}

/**
 * A list of statuses for the Order Line
 * @export
 * @interface InlineResponse200ListElementsOrderLinesOrderLineStatuses
 */
export interface InlineResponse200ListElementsOrderLinesOrderLineStatuses {
    /**
     * Detail List of Order Line status
     * @type {Array<InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus>}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatuses
     */
    orderLineStatus?: Array<InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus>;
}
/**
 * Detail List of Order Line status
 * @export
 * @interface InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus
 */
export interface InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus {
    /**
     * Should be \'Created\'
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus
     */
    status: InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatusStatusEnum;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineQuantity}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus
     */
    statusQuantity: InlineResponse200ListElementsOrderLinesOrderLineQuantity;
    /**
     * If order is cancelled, cancellationReason will explain the reason
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus
     */
    cancellationReason?: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus
     */
    trackingInfo?: InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus
     */
    returnCenterAddress?: InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatusStatusEnum {
    Created = 'Created',
    Acknowledged = 'Acknowledged',
    Shipped = 'Shipped',
    Delivered = 'Delivered',
    Cancelled = 'Cancelled',
    Refund = 'Refund'
}

/**
 * Gives Sellers the ability to specify the RC center address during fulfillment; any returns created for the PO will always be returned to the RC address specified
 * @export
 * @interface InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress
 */
export interface InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress {
    /**
     * The name for the person/place of return address
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress
     */
    name?: string;
    /**
     * The first line of the return address
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress
     */
    address1: string;
    /**
     * The second line of the return address
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress
     */
    address2?: string;
    /**
     * The city of the return address
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress
     */
    city: string;
    /**
     * The state of the return address
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress
     */
    state: string;
    /**
     * The zip code of the return address
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress
     */
    postalCode: string;
    /**
     * The country of the return address
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress
     */
    country: string;
    /**
     * Phone of the center where the package shipment is returned
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress
     */
    dayPhone?: string;
    /**
     * Email of the center where the package shipment is returned
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress
     */
    emailId?: string;
}
/**
 * List of information about the package shipment and tracking updates
 * @export
 * @interface InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo
 */
export interface InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo {
    /**
     * The date the package was shipped
     * @type {number}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo
     */
    shipDateTime: number;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoCarrierName}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo
     */
    carrierName: InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoCarrierName;
    /**
     * The shipping method. Can be one of the following: Standard, Express, OneDay, WhiteGlove, Value or Freight
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo
     */
    methodCode: InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoMethodCodeEnum;
    /**
     * The shipment tracking number
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo
     */
    trackingNumber: string;
    /**
     * The URL for tracking the shipment. This parameter is mandatory if the otherCarrier parameter is used
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo
     */
    trackingURL?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoMethodCodeEnum {
    Standard = 'Standard',
    Express = 'Express',
    OneDay = 'OneDay',
    Freight = 'Freight',
    WhiteGlove = 'WhiteGlove',
    Value = 'Value'
}

/**
 * Information about the package carrier(s)
 * @export
 * @interface InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoCarrierName
 */
export interface InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoCarrierName {
    /**
     * Other carrier name, When otherCarrier is used, trackingUrl must also be provided
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoCarrierName
     */
    otherCarrier?: string;
    /**
     * The package shipment carrier. Valid entries are: UPS, USPS, FedEx, Airborne, OnTrac, DHL, LS (LaserShip), UDS (United Delivery Service), UPSMI (UPS Mail Innovations), FDX, PILOT, ESTES, SAIA, FDS Express, Seko Worldwide, HIT Delivery, FEDEXSP (FedEx SmartPost).
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoCarrierName
     */
    carrier?: InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoCarrierNameCarrierEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoCarrierNameCarrierEnum {
    Ups = 'UPS',
    Usps = 'USPS',
    FedEx = 'FedEx',
    Airborne = 'Airborne',
    OnTrac = 'OnTrac',
    Dhl = 'DHL',
    Ng = 'NG',
    Ls = 'LS',
    Uds = 'UDS',
    Upsmi = 'UPSMI',
    Fdx = 'FDX',
    Pilot = 'PILOT',
    Estes = 'ESTES',
    Saia = 'SAIA',
    FdsExpress = 'FDS Express',
    SekoWorldwide = 'Seko Worldwide',
    HitDelivery = 'HIT Delivery',
    Fedexsp = 'FEDEXSP'
}

/**
 * Details about any refund on the order
 * @export
 * @interface InlineResponse200ListElementsOrderLinesRefund
 */
export interface InlineResponse200ListElementsOrderLinesRefund {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesRefund
     */
    refundId?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesRefund
     */
    refundComments?: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesRefundRefundCharges}
     * @memberof InlineResponse200ListElementsOrderLinesRefund
     */
    refundCharges: InlineResponse200ListElementsOrderLinesRefundRefundCharges;
}
/**
 * 
 * @export
 * @interface InlineResponse200ListElementsOrderLinesRefundRefundCharges
 */
export interface InlineResponse200ListElementsOrderLinesRefundRefundCharges {
    /**
     * 
     * @type {Array<InlineResponse200ListElementsOrderLinesRefundRefundChargesRefundCharge>}
     * @memberof InlineResponse200ListElementsOrderLinesRefundRefundCharges
     */
    refundCharge?: Array<InlineResponse200ListElementsOrderLinesRefundRefundChargesRefundCharge>;
}
/**
 * 
 * @export
 * @interface InlineResponse200ListElementsOrderLinesRefundRefundChargesRefundCharge
 */
export interface InlineResponse200ListElementsOrderLinesRefundRefundChargesRefundCharge {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderLinesRefundRefundChargesRefundCharge
     */
    refundReason: InlineResponse200ListElementsOrderLinesRefundRefundChargesRefundChargeRefundReasonEnum;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesChargesCharge}
     * @memberof InlineResponse200ListElementsOrderLinesRefundRefundChargesRefundCharge
     */
    charge: InlineResponse200ListElementsOrderLinesChargesCharge;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListElementsOrderLinesRefundRefundChargesRefundChargeRefundReasonEnum {
    BillingError = 'BillingError',
    TaxExemptCustomer = 'TaxExemptCustomer',
    ItemNotAsAdvertised = 'ItemNotAsAdvertised',
    IncorrectItemReceived = 'IncorrectItemReceived',
    CancelledYetShipped = 'CancelledYetShipped',
    ItemNotReceivedByCustomer = 'ItemNotReceivedByCustomer',
    IncorrectShippingPrice = 'IncorrectShippingPrice',
    DamagedItem = 'DamagedItem',
    DefectiveItem = 'DefectiveItem',
    CustomerChangedMind = 'CustomerChangedMind',
    CustomerReceivedItemLate = 'CustomerReceivedItemLate',
    MissingPartsInstructions = 'Missing Parts / Instructions',
    FinanceGoodwill = 'Finance -> Goodwill',
    FinanceRollback = 'Finance -> Rollback',
    BuyerCanceled = 'Buyer canceled',
    CustomerReturnedItem = 'Customer returned item',
    GeneralAdjustment = 'General adjustment',
    MerchandiseNotReceived = 'Merchandise not received',
    QualityMissingPartsInstructions = 'Quality -> Missing Parts / Instructions',
    ShippingDeliveryDamaged = 'Shipping & Delivery -> Damaged',
    ShippingDeliveryShippingPriceDiscrepancy = 'Shipping & Delivery -> Shipping Price Discrepancy',
    Others = 'Others'
}

/**
 * Order Summary
 * @export
 * @interface InlineResponse200ListElementsOrderSummary
 */
export interface InlineResponse200ListElementsOrderSummary {
    /**
     * 
     * @type {InlineResponse200ListElementsOrderSummaryTotalAmount}
     * @memberof InlineResponse200ListElementsOrderSummary
     */
    totalAmount?: InlineResponse200ListElementsOrderSummaryTotalAmount;
    /**
     * 
     * @type {Array<InlineResponse200ListElementsOrderSummaryOrderSubTotals>}
     * @memberof InlineResponse200ListElementsOrderSummary
     */
    orderSubTotals?: Array<InlineResponse200ListElementsOrderSummaryOrderSubTotals>;
}
/**
 * 
 * @export
 * @interface InlineResponse200ListElementsOrderSummaryOrderSubTotals
 */
export interface InlineResponse200ListElementsOrderSummaryOrderSubTotals {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderSummaryOrderSubTotals
     */
    subTotalType?: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderSummaryTotalAmount}
     * @memberof InlineResponse200ListElementsOrderSummaryOrderSubTotals
     */
    totalAmount?: InlineResponse200ListElementsOrderSummaryTotalAmount;
}
/**
 * 
 * @export
 * @interface InlineResponse200ListElementsOrderSummaryTotalAmount
 */
export interface InlineResponse200ListElementsOrderSummaryTotalAmount {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200ListElementsOrderSummaryTotalAmount
     */
    currencyAmount: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsOrderSummaryTotalAmount
     */
    currencyUnit: InlineResponse200ListElementsOrderSummaryTotalAmountCurrencyUnitEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListElementsOrderSummaryTotalAmountCurrencyUnitEnum {
    Aed = 'AED',
    Afn = 'AFN',
    All = 'ALL',
    Amd = 'AMD',
    Ang = 'ANG',
    Aoa = 'AOA',
    Ars = 'ARS',
    Aud = 'AUD',
    Awg = 'AWG',
    Azn = 'AZN',
    Bam = 'BAM',
    Bbd = 'BBD',
    Bdt = 'BDT',
    Bgn = 'BGN',
    Bhd = 'BHD',
    Bif = 'BIF',
    Bmd = 'BMD',
    Bnd = 'BND',
    Bob = 'BOB',
    Brl = 'BRL',
    Bsd = 'BSD',
    Btn = 'BTN',
    Bwp = 'BWP',
    Byr = 'BYR',
    Bzd = 'BZD',
    Cad = 'CAD',
    Cdf = 'CDF',
    Chf = 'CHF',
    Clp = 'CLP',
    Cny = 'CNY',
    Cop = 'COP',
    Crc = 'CRC',
    Cup = 'CUP',
    Cve = 'CVE',
    Czk = 'CZK',
    Djf = 'DJF',
    Dkk = 'DKK',
    Dop = 'DOP',
    Dzd = 'DZD',
    Egp = 'EGP',
    Ern = 'ERN',
    Etb = 'ETB',
    Eur = 'EUR',
    Fjd = 'FJD',
    Fkp = 'FKP',
    Gbp = 'GBP',
    Gel = 'GEL',
    Ghs = 'GHS',
    Gip = 'GIP',
    Gmd = 'GMD',
    Gnf = 'GNF',
    Gtq = 'GTQ',
    Gyd = 'GYD',
    Hkd = 'HKD',
    Hnl = 'HNL',
    Hrk = 'HRK',
    Htg = 'HTG',
    Huf = 'HUF',
    Idr = 'IDR',
    Ils = 'ILS',
    Inr = 'INR',
    Iqd = 'IQD',
    Irr = 'IRR',
    Isk = 'ISK',
    Jmd = 'JMD',
    Jod = 'JOD',
    Jpy = 'JPY',
    Kes = 'KES',
    Kgs = 'KGS',
    Khr = 'KHR',
    Kmf = 'KMF',
    Kpw = 'KPW',
    Krw = 'KRW',
    Kwd = 'KWD',
    Kyd = 'KYD',
    Kzt = 'KZT',
    Lak = 'LAK',
    Lbp = 'LBP',
    Lkr = 'LKR',
    Lrd = 'LRD',
    Lsl = 'LSL',
    Ltl = 'LTL',
    Lvl = 'LVL',
    Lyd = 'LYD',
    Mad = 'MAD',
    Mdl = 'MDL',
    Mga = 'MGA',
    Mkd = 'MKD',
    Mmk = 'MMK',
    Mnt = 'MNT',
    Mop = 'MOP',
    Mro = 'MRO',
    Mur = 'MUR',
    Mvr = 'MVR',
    Mwk = 'MWK',
    Mxn = 'MXN',
    Myr = 'MYR',
    Mzn = 'MZN',
    Nad = 'NAD',
    Ngn = 'NGN',
    Nio = 'NIO',
    Nok = 'NOK',
    Npr = 'NPR',
    Nzd = 'NZD',
    Omr = 'OMR',
    Pab = 'PAB',
    Pen = 'PEN',
    Pgk = 'PGK',
    Php = 'PHP',
    Pkr = 'PKR',
    Pln = 'PLN',
    Pyg = 'PYG',
    Qar = 'QAR',
    Ron = 'RON',
    Rsd = 'RSD',
    Rub = 'RUB',
    Rur = 'RUR',
    Rwf = 'RWF',
    Sar = 'SAR',
    Sbd = 'SBD',
    Scr = 'SCR',
    Sdg = 'SDG',
    Sek = 'SEK',
    Sgd = 'SGD',
    Shp = 'SHP',
    Sll = 'SLL',
    Sos = 'SOS',
    Srd = 'SRD',
    Std = 'STD',
    Syp = 'SYP',
    Szl = 'SZL',
    Thb = 'THB',
    Tjs = 'TJS',
    Tmt = 'TMT',
    Tnd = 'TND',
    Top = 'TOP',
    Try = 'TRY',
    Ttd = 'TTD',
    Twd = 'TWD',
    Tzs = 'TZS',
    Uah = 'UAH',
    Ugx = 'UGX',
    Usd = 'USD',
    Uyu = 'UYU',
    Uzs = 'UZS',
    Vef = 'VEF',
    Vnd = 'VND',
    Vuv = 'VUV',
    Wst = 'WST',
    Xaf = 'XAF',
    Xag = 'XAG',
    Xau = 'XAU',
    Xba = 'XBA',
    Xbb = 'XBB',
    Xbc = 'XBC',
    Xbd = 'XBD',
    Xcd = 'XCD',
    Xdr = 'XDR',
    Xfu = 'XFU',
    Xof = 'XOF',
    Xpd = 'XPD',
    Xpf = 'XPF',
    Xpt = 'XPT',
    Xts = 'XTS',
    Xxx = 'XXX',
    Yer = 'YER',
    Zar = 'ZAR',
    Zmk = 'ZMK',
    Zwl = 'ZWL'
}

/**
 * 
 * @export
 * @interface InlineResponse200ListElementsPhone
 */
export interface InlineResponse200ListElementsPhone {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsPhone
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsPhone
     */
    areaCode?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsPhone
     */
    extension?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsPhone
     */
    completeNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsPhone
     */
    type?: InlineResponse200ListElementsPhoneTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsPhone
     */
    subscriberNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsPhone
     */
    countryCode?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListElementsPhoneTypeEnum {
    Mobile = 'MOBILE',
    Home = 'HOME',
    Work = 'WORK'
}

/**
 * List of pickup persons
 * @export
 * @interface InlineResponse200ListElementsPickupPersons
 */
export interface InlineResponse200ListElementsPickupPersons {
    /**
     * 
     * @type {InlineResponse200ListElementsName}
     * @memberof InlineResponse200ListElementsPickupPersons
     */
    name?: InlineResponse200ListElementsName;
    /**
     * 
     * @type {InlineResponse200ListElementsPhone}
     * @memberof InlineResponse200ListElementsPickupPersons
     */
    phone?: InlineResponse200ListElementsPhone;
}
/**
 * Specifies the type of shipNode
 * @export
 * @interface InlineResponse200ListElementsShipNode
 */
export interface InlineResponse200ListElementsShipNode {
    /**
     * Specifies the type of shipNode. Allowed values are SellerFulfilled, WFSFulfilled and 3PLFulfilled.
     * @type {string}
     * @memberof InlineResponse200ListElementsShipNode
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsShipNode
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListElementsShipNode
     */
    id?: string;
}
/**
 * The shipping information provided by the customer to the seller
 * @export
 * @interface InlineResponse200ListElementsShippingInfo
 */
export interface InlineResponse200ListElementsShippingInfo {
    /**
     * The customer\'s phone number
     * @type {string}
     * @memberof InlineResponse200ListElementsShippingInfo
     */
    phone: string;
    /**
     * The estimated time and date for the delivery of the item. Format: yyyy-MM-ddThh:MM:ssZ Example: \'2020-06-15T06:00:00Z\'
     * @type {number}
     * @memberof InlineResponse200ListElementsShippingInfo
     */
    estimatedDeliveryDate: number;
    /**
     * The estimated time and date when the item will be shipped. Format: yyyy-MM-ddThh:MM:ssZ Example: \'2020-06-15T06:00:00Z\'
     * @type {number}
     * @memberof InlineResponse200ListElementsShippingInfo
     */
    estimatedShipDate: number;
    /**
     * The shipping method. Can be one of the following: Standard, Express, OneDay, WhiteGlove, Value or Freight
     * @type {string}
     * @memberof InlineResponse200ListElementsShippingInfo
     */
    methodCode: InlineResponse200ListElementsShippingInfoMethodCodeEnum;
    /**
     * 
     * @type {InlineResponse200ListElementsShippingInfoPostalAddress}
     * @memberof InlineResponse200ListElementsShippingInfo
     */
    postalAddress: InlineResponse200ListElementsShippingInfoPostalAddress;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListElementsShippingInfoMethodCodeEnum {
    Standard = 'Standard',
    Express = 'Express',
    OneDay = 'OneDay',
    Freight = 'Freight',
    WhiteGlove = 'WhiteGlove',
    Value = 'Value'
}

/**
 * Elements of the customer\'s postal address
 * @export
 * @interface InlineResponse200ListElementsShippingInfoPostalAddress
 */
export interface InlineResponse200ListElementsShippingInfoPostalAddress {
    /**
     * The name for the person/place of shipping address
     * @type {string}
     * @memberof InlineResponse200ListElementsShippingInfoPostalAddress
     */
    name: string;
    /**
     * The first line of the shipping address
     * @type {string}
     * @memberof InlineResponse200ListElementsShippingInfoPostalAddress
     */
    address1: string;
    /**
     * The second line of the shipping address
     * @type {string}
     * @memberof InlineResponse200ListElementsShippingInfoPostalAddress
     */
    address2?: string;
    /**
     * The city of the shipping address
     * @type {string}
     * @memberof InlineResponse200ListElementsShippingInfoPostalAddress
     */
    city: string;
    /**
     * The state of the shipping address
     * @type {string}
     * @memberof InlineResponse200ListElementsShippingInfoPostalAddress
     */
    state: string;
    /**
     * The zip code of the shipping address
     * @type {string}
     * @memberof InlineResponse200ListElementsShippingInfoPostalAddress
     */
    postalCode: string;
    /**
     * The country of the shipping address
     * @type {string}
     * @memberof InlineResponse200ListElementsShippingInfoPostalAddress
     */
    country: string;
    /**
     * The address type, example: \'RESIDENTIAL\'
     * @type {string}
     * @memberof InlineResponse200ListElementsShippingInfoPostalAddress
     */
    addressType?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200ListErrors
 */
export interface InlineResponse200ListErrors {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListErrors
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListErrors
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListErrors
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListErrors
     */
    info?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListErrors
     */
    severity?: InlineResponse200ListErrorsSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListErrors
     */
    category?: InlineResponse200ListErrorsCategoryEnum;
    /**
     * 
     * @type {Array<InlineResponse200ListCauses>}
     * @memberof InlineResponse200ListErrors
     */
    causes?: Array<InlineResponse200ListCauses>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof InlineResponse200ListErrors
     */
    errorIdentifiers?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListErrors
     */
    component?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListErrors
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListErrors
     */
    serviceName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200ListErrors
     */
    gatewayErrorCategory?: InlineResponse200ListErrorsGatewayErrorCategoryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListErrorsSeverityEnum {
    Info = 'INFO',
    Warn = 'WARN',
    Error = 'ERROR'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListErrorsCategoryEnum {
    Application = 'APPLICATION',
    System = 'SYSTEM',
    Request = 'REQUEST',
    Data = 'DATA'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ListErrorsGatewayErrorCategoryEnum {
    InternalDataError = 'INTERNAL_DATA_ERROR',
    ExternalDataError = 'EXTERNAL_DATA_ERROR',
    SystemError = 'SYSTEM_ERROR'
}

/**
 * Meta data about the list
 * @export
 * @interface InlineResponse200ListMeta
 */
export interface InlineResponse200ListMeta {
    /**
     * Total no of purchase orders.
     * @type {number}
     * @memberof InlineResponse200ListMeta
     */
    totalCount?: number;
    /**
     * Number of purchase orders in the current page.
     * @type {number}
     * @memberof InlineResponse200ListMeta
     */
    limit?: number;
    /**
     * String to be used as query parameter for getting next set of purchase orders, when more than 200 orders are retrieved.
     * @type {string}
     * @memberof InlineResponse200ListMeta
     */
    nextCursor?: string;
}
/**
 * The information for the item on the orderLine
 * @export
 * @interface ItemType
 */
export interface ItemType {
    /**
     * The name of the product associated with the line item. Example: \'Kenmore CF1\' or \'2086883 Canister Secondary Filter Generic 2 Pack\'
     * @type {string}
     * @memberof ItemType
     */
    productName: string;
    /**
     * An arbitrary alphanumeric unique ID, assigned to each item in the item file
     * @type {string}
     * @memberof ItemType
     */
    sku: string;
    /**
     * Optional. Web URL for the image of the item.
     * @type {string}
     * @memberof ItemType
     */
    imageUrl?: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesItemWeight}
     * @memberof ItemType
     */
    weight?: InlineResponse200ListElementsOrderLinesItemWeight;
}
/**
 * Meta data about the list
 * @export
 * @interface MetaType
 */
export interface MetaType {
    /**
     * Total no of purchase orders.
     * @type {number}
     * @memberof MetaType
     */
    totalCount?: number;
    /**
     * Number of purchase orders in the current page.
     * @type {number}
     * @memberof MetaType
     */
    limit?: number;
    /**
     * String to be used as query parameter for getting next set of purchase orders, when more than 200 orders are retrieved.
     * @type {string}
     * @memberof MetaType
     */
    nextCursor?: string;
}
/**
 * 
 * @export
 * @interface MoneyType
 */
export interface MoneyType {
    /**
     * 
     * @type {number}
     * @memberof MoneyType
     */
    currencyAmount: number;
    /**
     * 
     * @type {string}
     * @memberof MoneyType
     */
    currencyUnit: MoneyTypeCurrencyUnitEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MoneyTypeCurrencyUnitEnum {
    Aed = 'AED',
    Afn = 'AFN',
    All = 'ALL',
    Amd = 'AMD',
    Ang = 'ANG',
    Aoa = 'AOA',
    Ars = 'ARS',
    Aud = 'AUD',
    Awg = 'AWG',
    Azn = 'AZN',
    Bam = 'BAM',
    Bbd = 'BBD',
    Bdt = 'BDT',
    Bgn = 'BGN',
    Bhd = 'BHD',
    Bif = 'BIF',
    Bmd = 'BMD',
    Bnd = 'BND',
    Bob = 'BOB',
    Brl = 'BRL',
    Bsd = 'BSD',
    Btn = 'BTN',
    Bwp = 'BWP',
    Byr = 'BYR',
    Bzd = 'BZD',
    Cad = 'CAD',
    Cdf = 'CDF',
    Chf = 'CHF',
    Clp = 'CLP',
    Cny = 'CNY',
    Cop = 'COP',
    Crc = 'CRC',
    Cup = 'CUP',
    Cve = 'CVE',
    Czk = 'CZK',
    Djf = 'DJF',
    Dkk = 'DKK',
    Dop = 'DOP',
    Dzd = 'DZD',
    Egp = 'EGP',
    Ern = 'ERN',
    Etb = 'ETB',
    Eur = 'EUR',
    Fjd = 'FJD',
    Fkp = 'FKP',
    Gbp = 'GBP',
    Gel = 'GEL',
    Ghs = 'GHS',
    Gip = 'GIP',
    Gmd = 'GMD',
    Gnf = 'GNF',
    Gtq = 'GTQ',
    Gyd = 'GYD',
    Hkd = 'HKD',
    Hnl = 'HNL',
    Hrk = 'HRK',
    Htg = 'HTG',
    Huf = 'HUF',
    Idr = 'IDR',
    Ils = 'ILS',
    Inr = 'INR',
    Iqd = 'IQD',
    Irr = 'IRR',
    Isk = 'ISK',
    Jmd = 'JMD',
    Jod = 'JOD',
    Jpy = 'JPY',
    Kes = 'KES',
    Kgs = 'KGS',
    Khr = 'KHR',
    Kmf = 'KMF',
    Kpw = 'KPW',
    Krw = 'KRW',
    Kwd = 'KWD',
    Kyd = 'KYD',
    Kzt = 'KZT',
    Lak = 'LAK',
    Lbp = 'LBP',
    Lkr = 'LKR',
    Lrd = 'LRD',
    Lsl = 'LSL',
    Ltl = 'LTL',
    Lvl = 'LVL',
    Lyd = 'LYD',
    Mad = 'MAD',
    Mdl = 'MDL',
    Mga = 'MGA',
    Mkd = 'MKD',
    Mmk = 'MMK',
    Mnt = 'MNT',
    Mop = 'MOP',
    Mro = 'MRO',
    Mur = 'MUR',
    Mvr = 'MVR',
    Mwk = 'MWK',
    Mxn = 'MXN',
    Myr = 'MYR',
    Mzn = 'MZN',
    Nad = 'NAD',
    Ngn = 'NGN',
    Nio = 'NIO',
    Nok = 'NOK',
    Npr = 'NPR',
    Nzd = 'NZD',
    Omr = 'OMR',
    Pab = 'PAB',
    Pen = 'PEN',
    Pgk = 'PGK',
    Php = 'PHP',
    Pkr = 'PKR',
    Pln = 'PLN',
    Pyg = 'PYG',
    Qar = 'QAR',
    Ron = 'RON',
    Rsd = 'RSD',
    Rub = 'RUB',
    Rur = 'RUR',
    Rwf = 'RWF',
    Sar = 'SAR',
    Sbd = 'SBD',
    Scr = 'SCR',
    Sdg = 'SDG',
    Sek = 'SEK',
    Sgd = 'SGD',
    Shp = 'SHP',
    Sll = 'SLL',
    Sos = 'SOS',
    Srd = 'SRD',
    Std = 'STD',
    Syp = 'SYP',
    Szl = 'SZL',
    Thb = 'THB',
    Tjs = 'TJS',
    Tmt = 'TMT',
    Tnd = 'TND',
    Top = 'TOP',
    Try = 'TRY',
    Ttd = 'TTD',
    Twd = 'TWD',
    Tzs = 'TZS',
    Uah = 'UAH',
    Ugx = 'UGX',
    Usd = 'USD',
    Uyu = 'UYU',
    Uzs = 'UZS',
    Vef = 'VEF',
    Vnd = 'VND',
    Vuv = 'VUV',
    Wst = 'WST',
    Xaf = 'XAF',
    Xag = 'XAG',
    Xau = 'XAU',
    Xba = 'XBA',
    Xbb = 'XBB',
    Xbc = 'XBC',
    Xbd = 'XBD',
    Xcd = 'XCD',
    Xdr = 'XDR',
    Xfu = 'XFU',
    Xof = 'XOF',
    Xpd = 'XPD',
    Xpf = 'XPF',
    Xpt = 'XPT',
    Xts = 'XTS',
    Xxx = 'XXX',
    Yer = 'YER',
    Zar = 'ZAR',
    Zmk = 'ZMK',
    Zwl = 'ZWL'
}

/**
 * The details for the amount of the tax charge
 * @export
 * @interface MoneyTypeV2
 */
export interface MoneyTypeV2 {
    /**
     * The type of currency for the charge. Example: USD for US Dollars
     * @type {string}
     * @memberof MoneyTypeV2
     */
    currency: MoneyTypeV2CurrencyEnum;
    /**
     * The numerical amount for that charge. Example: 9.99
     * @type {number}
     * @memberof MoneyTypeV2
     */
    amount: number;
}

/**
    * @export
    * @enum {string}
    */
export enum MoneyTypeV2CurrencyEnum {
    Aed = 'AED',
    Afn = 'AFN',
    All = 'ALL',
    Amd = 'AMD',
    Ang = 'ANG',
    Aoa = 'AOA',
    Ars = 'ARS',
    Aud = 'AUD',
    Awg = 'AWG',
    Azn = 'AZN',
    Bam = 'BAM',
    Bbd = 'BBD',
    Bdt = 'BDT',
    Bgn = 'BGN',
    Bhd = 'BHD',
    Bif = 'BIF',
    Bmd = 'BMD',
    Bnd = 'BND',
    Bob = 'BOB',
    Brl = 'BRL',
    Bsd = 'BSD',
    Btn = 'BTN',
    Bwp = 'BWP',
    Byr = 'BYR',
    Bzd = 'BZD',
    Cad = 'CAD',
    Cdf = 'CDF',
    Chf = 'CHF',
    Clp = 'CLP',
    Cny = 'CNY',
    Cop = 'COP',
    Crc = 'CRC',
    Cup = 'CUP',
    Cve = 'CVE',
    Czk = 'CZK',
    Djf = 'DJF',
    Dkk = 'DKK',
    Dop = 'DOP',
    Dzd = 'DZD',
    Egp = 'EGP',
    Ern = 'ERN',
    Etb = 'ETB',
    Eur = 'EUR',
    Fjd = 'FJD',
    Fkp = 'FKP',
    Gbp = 'GBP',
    Gel = 'GEL',
    Ghs = 'GHS',
    Gip = 'GIP',
    Gmd = 'GMD',
    Gnf = 'GNF',
    Gtq = 'GTQ',
    Gyd = 'GYD',
    Hkd = 'HKD',
    Hnl = 'HNL',
    Hrk = 'HRK',
    Htg = 'HTG',
    Huf = 'HUF',
    Idr = 'IDR',
    Ils = 'ILS',
    Inr = 'INR',
    Iqd = 'IQD',
    Irr = 'IRR',
    Isk = 'ISK',
    Jmd = 'JMD',
    Jod = 'JOD',
    Jpy = 'JPY',
    Kes = 'KES',
    Kgs = 'KGS',
    Khr = 'KHR',
    Kmf = 'KMF',
    Kpw = 'KPW',
    Krw = 'KRW',
    Kwd = 'KWD',
    Kyd = 'KYD',
    Kzt = 'KZT',
    Lak = 'LAK',
    Lbp = 'LBP',
    Lkr = 'LKR',
    Lrd = 'LRD',
    Lsl = 'LSL',
    Ltl = 'LTL',
    Lvl = 'LVL',
    Lyd = 'LYD',
    Mad = 'MAD',
    Mdl = 'MDL',
    Mga = 'MGA',
    Mkd = 'MKD',
    Mmk = 'MMK',
    Mnt = 'MNT',
    Mop = 'MOP',
    Mro = 'MRO',
    Mur = 'MUR',
    Mvr = 'MVR',
    Mwk = 'MWK',
    Mxn = 'MXN',
    Myr = 'MYR',
    Mzn = 'MZN',
    Nad = 'NAD',
    Ngn = 'NGN',
    Nio = 'NIO',
    Nok = 'NOK',
    Npr = 'NPR',
    Nzd = 'NZD',
    Omr = 'OMR',
    Pab = 'PAB',
    Pen = 'PEN',
    Pgk = 'PGK',
    Php = 'PHP',
    Pkr = 'PKR',
    Pln = 'PLN',
    Pyg = 'PYG',
    Qar = 'QAR',
    Ron = 'RON',
    Rsd = 'RSD',
    Rub = 'RUB',
    Rur = 'RUR',
    Rwf = 'RWF',
    Sar = 'SAR',
    Sbd = 'SBD',
    Scr = 'SCR',
    Sdg = 'SDG',
    Sek = 'SEK',
    Sgd = 'SGD',
    Shp = 'SHP',
    Sll = 'SLL',
    Sos = 'SOS',
    Srd = 'SRD',
    Std = 'STD',
    Syp = 'SYP',
    Szl = 'SZL',
    Thb = 'THB',
    Tjs = 'TJS',
    Tmt = 'TMT',
    Tnd = 'TND',
    Top = 'TOP',
    Try = 'TRY',
    Ttd = 'TTD',
    Twd = 'TWD',
    Tzs = 'TZS',
    Uah = 'UAH',
    Ugx = 'UGX',
    Usd = 'USD',
    Uyu = 'UYU',
    Uzs = 'UZS',
    Vef = 'VEF',
    Vnd = 'VND',
    Vuv = 'VUV',
    Wst = 'WST',
    Xaf = 'XAF',
    Xag = 'XAG',
    Xau = 'XAU',
    Xba = 'XBA',
    Xbb = 'XBB',
    Xbc = 'XBC',
    Xbd = 'XBD',
    Xcd = 'XCD',
    Xdr = 'XDR',
    Xfu = 'XFU',
    Xof = 'XOF',
    Xpd = 'XPD',
    Xpf = 'XPF',
    Xpt = 'XPT',
    Xts = 'XTS',
    Xxx = 'XXX',
    Yer = 'YER',
    Zar = 'ZAR',
    Zmk = 'ZMK',
    Zwl = 'ZWL'
}

/**
 * Information about the purchase order
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * A unique ID associated with the seller\'s purchase order
     * @type {string}
     * @memberof Order
     */
    purchaseOrderId: string;
    /**
     * A unique ID associated with the sales order for specified customer
     * @type {string}
     * @memberof Order
     */
    customerOrderId: string;
    /**
     * The email address of the customer for the sales order
     * @type {string}
     * @memberof Order
     */
    customerEmailId: string;
    /**
     * The date the customer submitted the sales order
     * @type {string}
     * @memberof Order
     */
    orderDate: string;
    /**
     * Unique ID associated with the specified buyer
     * @type {string}
     * @memberof Order
     */
    buyerId?: string;
    /**
     * Mart information
     * @type {string}
     * @memberof Order
     */
    mart?: string;
    /**
     * Indicates a guest customer
     * @type {boolean}
     * @memberof Order
     */
    isGuest?: boolean;
    /**
     * 
     * @type {InlineResponse200ListElementsShippingInfo}
     * @memberof Order
     */
    shippingInfo: InlineResponse200ListElementsShippingInfo;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLines}
     * @memberof Order
     */
    orderLines: InlineResponse200ListElementsOrderLines;
    /**
     * Payment Types
     * @type {Array<string>}
     * @memberof Order
     */
    paymentTypes?: Array<string>;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderSummary}
     * @memberof Order
     */
    orderSummary?: InlineResponse200ListElementsOrderSummary;
    /**
     * List of pickup persons
     * @type {Array<InlineResponse200ListElementsPickupPersons>}
     * @memberof Order
     */
    pickupPersons?: Array<InlineResponse200ListElementsPickupPersons>;
    /**
     * 
     * @type {InlineResponse200ListElementsShipNode}
     * @memberof Order
     */
    shipNode?: InlineResponse200ListElementsShipNode;
}
/**
 * Container for the cancellation details
 * @export
 * @interface OrderCancellation
 */
export interface OrderCancellation {
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLines}
     * @memberof OrderCancellation
     */
    orderLines: V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLines;
}
/**
 * 
 * @export
 * @interface OrderCancellationResponse
 */
export interface OrderCancellationResponse {
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdCancelOrderCancellation}
     * @memberof OrderCancellationResponse
     */
    orderCancellation?: V3OrdersPurchaseOrderIdCancelOrderCancellation;
}
/**
 * Detail List of Order Line status
 * @export
 * @interface OrderLineStatusType
 */
export interface OrderLineStatusType {
    /**
     * Should be \'Created\'
     * @type {string}
     * @memberof OrderLineStatusType
     */
    status: OrderLineStatusTypeStatusEnum;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineQuantity}
     * @memberof OrderLineStatusType
     */
    statusQuantity: InlineResponse200ListElementsOrderLinesOrderLineQuantity;
    /**
     * If order is cancelled, cancellationReason will explain the reason
     * @type {string}
     * @memberof OrderLineStatusType
     */
    cancellationReason?: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo}
     * @memberof OrderLineStatusType
     */
    trackingInfo?: InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress}
     * @memberof OrderLineStatusType
     */
    returnCenterAddress?: InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderLineStatusTypeStatusEnum {
    Created = 'Created',
    Acknowledged = 'Acknowledged',
    Shipped = 'Shipped',
    Delivered = 'Delivered',
    Cancelled = 'Cancelled',
    Refund = 'Refund'
}

/**
 * A list of statuses for the Order Line
 * @export
 * @interface OrderLineStatusesType
 */
export interface OrderLineStatusesType {
    /**
     * Detail List of Order Line status
     * @type {Array<InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus>}
     * @memberof OrderLineStatusesType
     */
    orderLineStatus?: Array<InlineResponse200ListElementsOrderLinesOrderLineStatusesOrderLineStatus>;
}
/**
 * Purchase Order line information for each item
 * @export
 * @interface OrderLineType
 */
export interface OrderLineType {
    /**
     * The line number associated with the details for each individual item in the purchase order
     * @type {string}
     * @memberof OrderLineType
     */
    lineNumber: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesItem}
     * @memberof OrderLineType
     */
    item: InlineResponse200ListElementsOrderLinesItem;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesCharges}
     * @memberof OrderLineType
     */
    charges: InlineResponse200ListElementsOrderLinesCharges;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineQuantity}
     * @memberof OrderLineType
     */
    orderLineQuantity: InlineResponse200ListElementsOrderLinesOrderLineQuantity;
    /**
     * The date shown on the recent order status
     * @type {number}
     * @memberof OrderLineType
     */
    statusDate: number;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatuses}
     * @memberof OrderLineType
     */
    orderLineStatuses: InlineResponse200ListElementsOrderLinesOrderLineStatuses;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesRefund}
     * @memberof OrderLineType
     */
    refund?: InlineResponse200ListElementsOrderLinesRefund;
    /**
     * Ship method stamped at order line level when order is placed
     * @type {string}
     * @memberof OrderLineType
     */
    originalCarrierMethod?: string;
    /**
     * Reference line Id
     * @type {string}
     * @memberof OrderLineType
     */
    referenceLineId?: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesFulfillment}
     * @memberof OrderLineType
     */
    fulfillment?: InlineResponse200ListElementsOrderLinesFulfillment;
    /**
     * 
     * @type {string}
     * @memberof OrderLineType
     */
    intentToCancel?: string;
    /**
     * Sets ConfigID for Personalised orders
     * @type {string}
     * @memberof OrderLineType
     */
    configId?: string;
    /**
     * A unique ID associated with the sales order for specified Seller; gives Sellers the ability to print their own custom order ID on the return label; limit of 30 characters
     * @type {string}
     * @memberof OrderLineType
     */
    sellerOrderId?: string;
}
/**
 * A list of order lines in the order
 * @export
 * @interface OrderLinesType
 */
export interface OrderLinesType {
    /**
     * A list of order lines in the order
     * @type {Array<InlineResponse200ListElementsOrderLinesOrderLine>}
     * @memberof OrderLinesType
     */
    orderLine?: Array<InlineResponse200ListElementsOrderLinesOrderLine>;
}
/**
 * 
 * @export
 * @interface OrderRefund
 */
export interface OrderRefund {
    /**
     * 
     * @type {string}
     * @memberof OrderRefund
     */
    purchaseOrderId: string;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdRefundOrderLines}
     * @memberof OrderRefund
     */
    orderLines: V3OrdersPurchaseOrderIdRefundOrderLines;
}
/**
 * 
 * @export
 * @interface OrderRefundJson
 */
export interface OrderRefundJson {
    /**
     * 
     * @type {InlineObject1}
     * @memberof OrderRefundJson
     */
    orderRefund?: InlineObject1;
}
/**
 * 
 * @export
 * @interface OrderShipment
 */
export interface OrderShipment {
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdShippingOrderShipment}
     * @memberof OrderShipment
     */
    orderShipment?: V3OrdersPurchaseOrderIdShippingOrderShipment;
}
/**
 * Information about a shipment
 * @export
 * @interface OrderShipmentRecord
 */
export interface OrderShipmentRecord {
    /**
     * Optional. Use this parameter only to update tracking information after order is shipped. Use \'PARTIAL_UPDATE\' as value. Here PARTIAL_UPDATE will indicate that post shipment tracking information needs to be updated
     * @type {string}
     * @memberof OrderShipmentRecord
     */
    processMode?: string;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLines}
     * @memberof OrderShipmentRecord
     */
    orderLines: V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLines;
}
/**
 * 
 * @export
 * @interface OrderSubTotal
 */
export interface OrderSubTotal {
    /**
     * 
     * @type {string}
     * @memberof OrderSubTotal
     */
    subTotalType?: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderSummaryTotalAmount}
     * @memberof OrderSubTotal
     */
    totalAmount?: InlineResponse200ListElementsOrderSummaryTotalAmount;
}
/**
 * Order Summary
 * @export
 * @interface OrderSummary
 */
export interface OrderSummary {
    /**
     * 
     * @type {InlineResponse200ListElementsOrderSummaryTotalAmount}
     * @memberof OrderSummary
     */
    totalAmount?: InlineResponse200ListElementsOrderSummaryTotalAmount;
    /**
     * 
     * @type {Array<InlineResponse200ListElementsOrderSummaryOrderSubTotals>}
     * @memberof OrderSummary
     */
    orderSubTotals?: Array<InlineResponse200ListElementsOrderSummaryOrderSubTotals>;
}
/**
 * 
 * @export
 * @interface PersonName
 */
export interface PersonName {
    /**
     * 
     * @type {string}
     * @memberof PersonName
     */
    completeName?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonName
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonName
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonName
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonName
     */
    generalSuffix?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonName
     */
    maturitySuffix?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonName
     */
    titleOfRespect?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PersonName
     */
    empty?: boolean;
}
/**
 * 
 * @export
 * @interface Phone
 */
export interface Phone {
    /**
     * 
     * @type {string}
     * @memberof Phone
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Phone
     */
    areaCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Phone
     */
    extension?: string;
    /**
     * 
     * @type {string}
     * @memberof Phone
     */
    completeNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Phone
     */
    type?: PhoneTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Phone
     */
    subscriberNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Phone
     */
    countryCode?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PhoneTypeEnum {
    Mobile = 'MOBILE',
    Home = 'HOME',
    Work = 'WORK'
}

/**
 * List of pickup persons
 * @export
 * @interface PickupPerson
 */
export interface PickupPerson {
    /**
     * 
     * @type {InlineResponse200ListElementsName}
     * @memberof PickupPerson
     */
    name?: InlineResponse200ListElementsName;
    /**
     * 
     * @type {InlineResponse200ListElementsPhone}
     * @memberof PickupPerson
     */
    phone?: InlineResponse200ListElementsPhone;
}
/**
 * Elements of the customer\'s postal address
 * @export
 * @interface PostalAddressType
 */
export interface PostalAddressType {
    /**
     * The name for the person/place of shipping address
     * @type {string}
     * @memberof PostalAddressType
     */
    name: string;
    /**
     * The first line of the shipping address
     * @type {string}
     * @memberof PostalAddressType
     */
    address1: string;
    /**
     * The second line of the shipping address
     * @type {string}
     * @memberof PostalAddressType
     */
    address2?: string;
    /**
     * The city of the shipping address
     * @type {string}
     * @memberof PostalAddressType
     */
    city: string;
    /**
     * The state of the shipping address
     * @type {string}
     * @memberof PostalAddressType
     */
    state: string;
    /**
     * The zip code of the shipping address
     * @type {string}
     * @memberof PostalAddressType
     */
    postalCode: string;
    /**
     * The country of the shipping address
     * @type {string}
     * @memberof PostalAddressType
     */
    country: string;
    /**
     * The address type, example: \'RESIDENTIAL\'
     * @type {string}
     * @memberof PostalAddressType
     */
    addressType?: string;
}
/**
 * 
 * @export
 * @interface PurchaseOrderTypeV3
 */
export interface PurchaseOrderTypeV3 {
    /**
     * 
     * @type {InlineResponse200List}
     * @memberof PurchaseOrderTypeV3
     */
    list?: InlineResponse200List;
}
/**
 * List of purchase orders in created state
 * @export
 * @interface PurchaseOrderTypeV3List
 */
export interface PurchaseOrderTypeV3List {
    /**
     * 
     * @type {Array<InlineResponse200ListErrors>}
     * @memberof PurchaseOrderTypeV3List
     */
    errors?: Array<InlineResponse200ListErrors>;
    /**
     * 
     * @type {InlineResponse200ListMeta}
     * @memberof PurchaseOrderTypeV3List
     */
    meta: InlineResponse200ListMeta;
    /**
     * 
     * @type {InlineResponse200ListElements}
     * @memberof PurchaseOrderTypeV3List
     */
    elements: InlineResponse200ListElements;
}
/**
 * Details about the status update
 * @export
 * @interface QuantityType
 */
export interface QuantityType {
    /**
     * Unit of quantity
     * @type {string}
     * @memberof QuantityType
     */
    unitOfMeasurement: QuantityTypeUnitOfMeasurementEnum;
    /**
     * Always use \'1\'
     * @type {string}
     * @memberof QuantityType
     */
    amount: string;
}

/**
    * @export
    * @enum {string}
    */
export enum QuantityTypeUnitOfMeasurementEnum {
    Each = 'EACH',
    Ea = 'EA'
}

/**
 * 
 * @export
 * @interface RefundChargeType
 */
export interface RefundChargeType {
    /**
     * 
     * @type {string}
     * @memberof RefundChargeType
     */
    refundReason: RefundChargeTypeRefundReasonEnum;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesChargesCharge}
     * @memberof RefundChargeType
     */
    charge: InlineResponse200ListElementsOrderLinesChargesCharge;
}

/**
    * @export
    * @enum {string}
    */
export enum RefundChargeTypeRefundReasonEnum {
    BillingError = 'BillingError',
    TaxExemptCustomer = 'TaxExemptCustomer',
    ItemNotAsAdvertised = 'ItemNotAsAdvertised',
    IncorrectItemReceived = 'IncorrectItemReceived',
    CancelledYetShipped = 'CancelledYetShipped',
    ItemNotReceivedByCustomer = 'ItemNotReceivedByCustomer',
    IncorrectShippingPrice = 'IncorrectShippingPrice',
    DamagedItem = 'DamagedItem',
    DefectiveItem = 'DefectiveItem',
    CustomerChangedMind = 'CustomerChangedMind',
    CustomerReceivedItemLate = 'CustomerReceivedItemLate',
    MissingPartsInstructions = 'Missing Parts / Instructions',
    FinanceGoodwill = 'Finance -> Goodwill',
    FinanceRollback = 'Finance -> Rollback',
    BuyerCanceled = 'Buyer canceled',
    CustomerReturnedItem = 'Customer returned item',
    GeneralAdjustment = 'General adjustment',
    MerchandiseNotReceived = 'Merchandise not received',
    QualityMissingPartsInstructions = 'Quality -> Missing Parts / Instructions',
    ShippingDeliveryDamaged = 'Shipping & Delivery -> Damaged',
    ShippingDeliveryShippingPriceDiscrepancy = 'Shipping & Delivery -> Shipping Price Discrepancy',
    Others = 'Others'
}

/**
 * 
 * @export
 * @interface RefundChargesType
 */
export interface RefundChargesType {
    /**
     * 
     * @type {Array<InlineResponse200ListElementsOrderLinesRefundRefundChargesRefundCharge>}
     * @memberof RefundChargesType
     */
    refundCharge?: Array<InlineResponse200ListElementsOrderLinesRefundRefundChargesRefundCharge>;
}
/**
 * 
 * @export
 * @interface RefundLineType
 */
export interface RefundLineType {
    /**
     * 
     * @type {string}
     * @memberof RefundLineType
     */
    lineNumber: string;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdRefundOrderLinesRefunds}
     * @memberof RefundLineType
     */
    refunds: V3OrdersPurchaseOrderIdRefundOrderLinesRefunds;
}
/**
 * 
 * @export
 * @interface RefundLinesType
 */
export interface RefundLinesType {
    /**
     * 
     * @type {Array<V3OrdersPurchaseOrderIdRefundOrderLinesOrderLine>}
     * @memberof RefundLinesType
     */
    orderLine: Array<V3OrdersPurchaseOrderIdRefundOrderLinesOrderLine>;
}
/**
 * Details about any refund on the order
 * @export
 * @interface RefundType
 */
export interface RefundType {
    /**
     * 
     * @type {string}
     * @memberof RefundType
     */
    refundId?: string;
    /**
     * 
     * @type {string}
     * @memberof RefundType
     */
    refundComments?: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesRefundRefundCharges}
     * @memberof RefundType
     */
    refundCharges: InlineResponse200ListElementsOrderLinesRefundRefundCharges;
}
/**
 * 
 * @export
 * @interface RefundsType
 */
export interface RefundsType {
    /**
     * 
     * @type {Array<InlineResponse200ListElementsOrderLinesRefund>}
     * @memberof RefundsType
     */
    refund: Array<InlineResponse200ListElementsOrderLinesRefund>;
}
/**
 * Gives Sellers the ability to specify the RC center address during fulfillment; any returns created for the PO will always be returned to the RC address specified
 * @export
 * @interface ReturnCenterAddressType
 */
export interface ReturnCenterAddressType {
    /**
     * The name for the person/place of return address
     * @type {string}
     * @memberof ReturnCenterAddressType
     */
    name?: string;
    /**
     * The first line of the return address
     * @type {string}
     * @memberof ReturnCenterAddressType
     */
    address1: string;
    /**
     * The second line of the return address
     * @type {string}
     * @memberof ReturnCenterAddressType
     */
    address2?: string;
    /**
     * The city of the return address
     * @type {string}
     * @memberof ReturnCenterAddressType
     */
    city: string;
    /**
     * The state of the return address
     * @type {string}
     * @memberof ReturnCenterAddressType
     */
    state: string;
    /**
     * The zip code of the return address
     * @type {string}
     * @memberof ReturnCenterAddressType
     */
    postalCode: string;
    /**
     * The country of the return address
     * @type {string}
     * @memberof ReturnCenterAddressType
     */
    country: string;
    /**
     * Phone of the center where the package shipment is returned
     * @type {string}
     * @memberof ReturnCenterAddressType
     */
    dayPhone?: string;
    /**
     * Email of the center where the package shipment is returned
     * @type {string}
     * @memberof ReturnCenterAddressType
     */
    emailId?: string;
}
/**
 * Details about the Order Line status
 * @export
 * @interface ShipLineStatusType
 */
export interface ShipLineStatusType {
    /**
     * Use \'Shipped\'
     * @type {string}
     * @memberof ShipLineStatusType
     */
    status: ShipLineStatusTypeStatusEnum;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesAsn}
     * @memberof ShipLineStatusType
     */
    asn?: V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesAsn;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineQuantity}
     * @memberof ShipLineStatusType
     */
    statusQuantity: InlineResponse200ListElementsOrderLinesOrderLineQuantity;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo}
     * @memberof ShipLineStatusType
     */
    trackingInfo: InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress}
     * @memberof ShipLineStatusType
     */
    returnCenterAddress?: InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress;
}

/**
    * @export
    * @enum {string}
    */
export enum ShipLineStatusTypeStatusEnum {
    Created = 'Created',
    Acknowledged = 'Acknowledged',
    Shipped = 'Shipped',
    Delivered = 'Delivered',
    Cancelled = 'Cancelled',
    Refund = 'Refund'
}

/**
 * A list of status updates for that orderLine, including shipping status updates
 * @export
 * @interface ShipLineStatusesType
 */
export interface ShipLineStatusesType {
    /**
     * Details about the Order Line status
     * @type {Array<V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus>}
     * @memberof ShipLineStatusesType
     */
    orderLineStatus: Array<V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus>;
}
/**
 * Specifies the type of shipNode
 * @export
 * @interface ShipNodesType
 */
export interface ShipNodesType {
    /**
     * Specifies the type of shipNode. Allowed values are SellerFulfilled, WFSFulfilled and 3PLFulfilled.
     * @type {string}
     * @memberof ShipNodesType
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipNodesType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipNodesType
     */
    id?: string;
}
/**
 * The shipping information provided by the customer to the seller
 * @export
 * @interface ShippingInfoType
 */
export interface ShippingInfoType {
    /**
     * The customer\'s phone number
     * @type {string}
     * @memberof ShippingInfoType
     */
    phone: string;
    /**
     * The estimated time and date for the delivery of the item. Format: yyyy-MM-ddThh:MM:ssZ Example: \'2020-06-15T06:00:00Z\'
     * @type {number}
     * @memberof ShippingInfoType
     */
    estimatedDeliveryDate: number;
    /**
     * The estimated time and date when the item will be shipped. Format: yyyy-MM-ddThh:MM:ssZ Example: \'2020-06-15T06:00:00Z\'
     * @type {number}
     * @memberof ShippingInfoType
     */
    estimatedShipDate: number;
    /**
     * The shipping method. Can be one of the following: Standard, Express, OneDay, WhiteGlove, Value or Freight
     * @type {string}
     * @memberof ShippingInfoType
     */
    methodCode: ShippingInfoTypeMethodCodeEnum;
    /**
     * 
     * @type {InlineResponse200ListElementsShippingInfoPostalAddress}
     * @memberof ShippingInfoType
     */
    postalAddress: InlineResponse200ListElementsShippingInfoPostalAddress;
}

/**
    * @export
    * @enum {string}
    */
export enum ShippingInfoTypeMethodCodeEnum {
    Standard = 'Standard',
    Express = 'Express',
    OneDay = 'OneDay',
    Freight = 'Freight',
    WhiteGlove = 'WhiteGlove',
    Value = 'Value'
}

/**
 * Information about one order line shipment
 * @export
 * @interface ShippingLineType
 */
export interface ShippingLineType {
    /**
     * The line number associated with the details for each individual item in the purchase order
     * @type {string}
     * @memberof ShippingLineType
     */
    lineNumber: string;
    /**
     * A unique ID associated with the sales order for specified Seller; gives Sellers the ability to print their own custom order ID on the return label; limit of 30 characters
     * @type {string}
     * @memberof ShippingLineType
     */
    sellerOrderId?: string;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatuses}
     * @memberof ShippingLineType
     */
    orderLineStatuses: V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatuses;
    /**
     * 
     * @type {string}
     * @memberof ShippingLineType
     */
    sellerOrderNo?: string;
}
/**
 * List of orderLines in the shipment
 * @export
 * @interface ShippingLinesType
 */
export interface ShippingLinesType {
    /**
     * Information about one order line shipment
     * @type {Array<V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLine>}
     * @memberof ShippingLinesType
     */
    orderLine: Array<V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLine>;
}
/**
 * Tax information for the charge, including taxName and taxAmount
 * @export
 * @interface TaxType
 */
export interface TaxType {
    /**
     * The name associated with the tax. Example: \'Sales Tax\'
     * @type {string}
     * @memberof TaxType
     */
    taxName: string;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesChargesChargeAmount}
     * @memberof TaxType
     */
    taxAmount: InlineResponse200ListElementsOrderLinesChargesChargeAmount;
}
/**
 * List of information about the package shipment and tracking updates
 * @export
 * @interface TrackingInfoType
 */
export interface TrackingInfoType {
    /**
     * The date the package was shipped
     * @type {number}
     * @memberof TrackingInfoType
     */
    shipDateTime: number;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoCarrierName}
     * @memberof TrackingInfoType
     */
    carrierName: InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfoCarrierName;
    /**
     * The shipping method. Can be one of the following: Standard, Express, OneDay, WhiteGlove, Value or Freight
     * @type {string}
     * @memberof TrackingInfoType
     */
    methodCode: TrackingInfoTypeMethodCodeEnum;
    /**
     * The shipment tracking number
     * @type {string}
     * @memberof TrackingInfoType
     */
    trackingNumber: string;
    /**
     * The URL for tracking the shipment. This parameter is mandatory if the otherCarrier parameter is used
     * @type {string}
     * @memberof TrackingInfoType
     */
    trackingURL?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TrackingInfoTypeMethodCodeEnum {
    Standard = 'Standard',
    Express = 'Express',
    OneDay = 'OneDay',
    Freight = 'Freight',
    WhiteGlove = 'WhiteGlove',
    Value = 'Value'
}

/**
 * Container for the cancellation details
 * @export
 * @interface V3OrdersPurchaseOrderIdCancelOrderCancellation
 */
export interface V3OrdersPurchaseOrderIdCancelOrderCancellation {
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLines}
     * @memberof V3OrdersPurchaseOrderIdCancelOrderCancellation
     */
    orderLines: V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLines;
}
/**
 * A list of orderLines to be cancelled
 * @export
 * @interface V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLines
 */
export interface V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLines {
    /**
     * Information to update the orderLine with cancellation details
     * @type {Array<V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLine>}
     * @memberof V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLines
     */
    orderLine: Array<V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLine>;
}
/**
 * Information to update the orderLine with cancellation details
 * @export
 * @interface V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLine
 */
export interface V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLine {
    /**
     * 
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLine
     */
    lineNumber: string;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatuses}
     * @memberof V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLine
     */
    orderLineStatuses: V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatuses;
}
/**
 * A list of statuses which should contain the new cancellation status
 * @export
 * @interface V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatuses
 */
export interface V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatuses {
    /**
     * List of details about the cancellation status update
     * @type {Array<V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatus>}
     * @memberof V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatuses
     */
    orderLineStatus: Array<V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatus>;
}
/**
 * List of details about the cancellation status update
 * @export
 * @interface V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatus
 */
export interface V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatus {
    /**
     * Use \'Cancelled\'
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatus
     */
    status: V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatusStatusEnum;
    /**
     * Reason for cancellation. Example: \'CUSTOMER_REQUESTED_SELLER_TO_CANCEL\'
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatus
     */
    cancellationReason: V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatusCancellationReasonEnum;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineQuantity}
     * @memberof V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatus
     */
    statusQuantity: InlineResponse200ListElementsOrderLinesOrderLineQuantity;
}

/**
    * @export
    * @enum {string}
    */
export enum V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatusStatusEnum {
    Created = 'Created',
    Acknowledged = 'Acknowledged',
    Shipped = 'Shipped',
    Delivered = 'Delivered',
    Cancelled = 'Cancelled',
    Refund = 'Refund'
}
/**
    * @export
    * @enum {string}
    */
export enum V3OrdersPurchaseOrderIdCancelOrderCancellationOrderLinesOrderLineStatusesOrderLineStatusCancellationReasonEnum {
    CustomerRequestedSellerToCancel = 'CUSTOMER_REQUESTED_SELLER_TO_CANCEL',
    SellerCancelPricingError = 'SELLER_CANCEL_PRICING_ERROR',
    SellerCancelOutOfStock = 'SELLER_CANCEL_OUT_OF_STOCK',
    SellerCancelFraudStopShipment = 'SELLER_CANCEL_FRAUD_STOP_SHIPMENT',
    SellerCancelAddressNotServiceable = 'SELLER_CANCEL_ADDRESS_NOT_SERVICEABLE'
}

/**
 * 
 * @export
 * @interface V3OrdersPurchaseOrderIdRefundOrderLines
 */
export interface V3OrdersPurchaseOrderIdRefundOrderLines {
    /**
     * 
     * @type {Array<V3OrdersPurchaseOrderIdRefundOrderLinesOrderLine>}
     * @memberof V3OrdersPurchaseOrderIdRefundOrderLines
     */
    orderLine: Array<V3OrdersPurchaseOrderIdRefundOrderLinesOrderLine>;
}
/**
 * 
 * @export
 * @interface V3OrdersPurchaseOrderIdRefundOrderLinesOrderLine
 */
export interface V3OrdersPurchaseOrderIdRefundOrderLinesOrderLine {
    /**
     * 
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdRefundOrderLinesOrderLine
     */
    lineNumber: string;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdRefundOrderLinesRefunds}
     * @memberof V3OrdersPurchaseOrderIdRefundOrderLinesOrderLine
     */
    refunds: V3OrdersPurchaseOrderIdRefundOrderLinesRefunds;
}
/**
 * 
 * @export
 * @interface V3OrdersPurchaseOrderIdRefundOrderLinesRefunds
 */
export interface V3OrdersPurchaseOrderIdRefundOrderLinesRefunds {
    /**
     * 
     * @type {Array<InlineResponse200ListElementsOrderLinesRefund>}
     * @memberof V3OrdersPurchaseOrderIdRefundOrderLinesRefunds
     */
    refund: Array<InlineResponse200ListElementsOrderLinesRefund>;
}
/**
 * Information about a shipment
 * @export
 * @interface V3OrdersPurchaseOrderIdShippingOrderShipment
 */
export interface V3OrdersPurchaseOrderIdShippingOrderShipment {
    /**
     * Optional. Use this parameter only to update tracking information after order is shipped. Use \'PARTIAL_UPDATE\' as value. Here PARTIAL_UPDATE will indicate that post shipment tracking information needs to be updated
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipment
     */
    processMode?: string;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLines}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipment
     */
    orderLines: V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLines;
}
/**
 * List of orderLines in the shipment
 * @export
 * @interface V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLines
 */
export interface V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLines {
    /**
     * Information about one order line shipment
     * @type {Array<V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLine>}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLines
     */
    orderLine: Array<V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLine>;
}
/**
 * Information about one order line shipment
 * @export
 * @interface V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLine
 */
export interface V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLine {
    /**
     * The line number associated with the details for each individual item in the purchase order
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLine
     */
    lineNumber: string;
    /**
     * A unique ID associated with the sales order for specified Seller; gives Sellers the ability to print their own custom order ID on the return label; limit of 30 characters
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLine
     */
    sellerOrderId?: string;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatuses}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLine
     */
    orderLineStatuses: V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatuses;
    /**
     * 
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLine
     */
    sellerOrderNo?: string;
}
/**
 * A list of status updates for that orderLine, including shipping status updates
 * @export
 * @interface V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatuses
 */
export interface V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatuses {
    /**
     * Details about the Order Line status
     * @type {Array<V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus>}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatuses
     */
    orderLineStatus: Array<V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus>;
}
/**
 * 
 * @export
 * @interface V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesAsn
 */
export interface V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesAsn {
    /**
     * 
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesAsn
     */
    packageASN: string;
    /**
     * 
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesAsn
     */
    palletASN?: string;
}
/**
 * Details about the Order Line status
 * @export
 * @interface V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus
 */
export interface V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus {
    /**
     * Use \'Shipped\'
     * @type {string}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus
     */
    status: V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatusStatusEnum;
    /**
     * 
     * @type {V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesAsn}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus
     */
    asn?: V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesAsn;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineQuantity}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus
     */
    statusQuantity: InlineResponse200ListElementsOrderLinesOrderLineQuantity;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus
     */
    trackingInfo: InlineResponse200ListElementsOrderLinesOrderLineStatusesTrackingInfo;
    /**
     * 
     * @type {InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress}
     * @memberof V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatus
     */
    returnCenterAddress?: InlineResponse200ListElementsOrderLinesOrderLineStatusesReturnCenterAddress;
}

/**
    * @export
    * @enum {string}
    */
export enum V3OrdersPurchaseOrderIdShippingOrderShipmentOrderLinesOrderLineStatusesOrderLineStatusStatusEnum {
    Created = 'Created',
    Acknowledged = 'Acknowledged',
    Shipped = 'Shipped',
    Delivered = 'Delivered',
    Cancelled = 'Cancelled',
    Refund = 'Refund'
}

/**
 * Optional. Weight information for the item.
 * @export
 * @interface WeightType
 */
export interface WeightType {
    /**
     * Numerical amount of weight parameter.
     * @type {string}
     * @memberof WeightType
     */
    value: string;
    /**
     * Standard value of measurement of the item. Example: \'Pounds\'
     * @type {string}
     * @memberof WeightType
     */
    unit: string;
}

/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * You can use this API to acknowledge an entire order, including all of its order lines. The response to a successful call contains the acknowledged order.
         * @summary Acknowledge Orders
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrders: async (purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderId' is not null or undefined
            assertParamExists('acknowledgeOrders', 'purchaseOrderId', purchaseOrderId)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('acknowledgeOrders', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('acknowledgeOrders', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('acknowledgeOrders', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('acknowledgeOrders', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/orders/{purchaseOrderId}/acknowledge`
                .replace(`{${"purchaseOrderId"}}`, encodeURIComponent(String(purchaseOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You can cancel one or more order lines. You must include a purchaseOrderId when cancelling an order line. The response to a successful call contains the order with the cancelled line items
         * @summary Cancel Order Lines
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject} inlineObject 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderLines: async (purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject: InlineObject, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderId' is not null or undefined
            assertParamExists('cancelOrderLines', 'purchaseOrderId', purchaseOrderId)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('cancelOrderLines', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('cancelOrderLines', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('cancelOrderLines', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('cancelOrderLines', 'wMSVCNAME', wMSVCNAME)
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('cancelOrderLines', 'inlineObject', inlineObject)
            const localVarPath = `/v3/orders/{purchaseOrderId}/cancel`
                .replace(`{${"purchaseOrderId"}}`, encodeURIComponent(String(purchaseOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of all the orders for specified search criteria.  Only orders created in last 180 days and a maximum of 20000 orders can be fetched at a time. Attempting to download more than 20000 orders will return an error.
         * @summary All orders
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [sku] A seller-provided Product ID
         * @param {string} [customerOrderId] The customer order ID
         * @param {string} [purchaseOrderId] The purchase order ID. One customer may have multiple purchase orders.
         * @param {string} [status] Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled.
         * @param {string} [createdStartDate] Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [createdEndDate] Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [fromExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [toExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [lastModifiedStartDate] Fetches all purchase orders that were modified after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [lastModifiedEndDate] Fetches all purchase orders that were modified before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [limit] The number of orders to be returned. Cannot be larger than 200.
         * @param {string} [productInfo] Provides the image URL and product weight in response, if available. Allowed values are true or false.
         * @param {string} [shipNodeType] Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled.
         * @param {string} [shippingProgramType] Specifies the type of program. Allowed value is TWO_DAY.
         * @param {string} [replacementInfo] Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
         * @param {string} [orderType] Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo&#x3D;true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrders: async (authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, sku?: string, customerOrderId?: string, purchaseOrderId?: string, status?: string, createdStartDate?: string, createdEndDate?: string, fromExpectedShipDate?: string, toExpectedShipDate?: string, lastModifiedStartDate?: string, lastModifiedEndDate?: string, limit?: string, productInfo?: string, shipNodeType?: string, shippingProgramType?: string, replacementInfo?: string, orderType?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllOrders', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getAllOrders', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getAllOrders', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getAllOrders', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (sku !== undefined) {
                localVarQueryParameter['sku'] = sku;
            }

            if (customerOrderId !== undefined) {
                localVarQueryParameter['customerOrderId'] = customerOrderId;
            }

            if (purchaseOrderId !== undefined) {
                localVarQueryParameter['purchaseOrderId'] = purchaseOrderId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (createdStartDate !== undefined) {
                localVarQueryParameter['createdStartDate'] = createdStartDate;
            }

            if (createdEndDate !== undefined) {
                localVarQueryParameter['createdEndDate'] = createdEndDate;
            }

            if (fromExpectedShipDate !== undefined) {
                localVarQueryParameter['fromExpectedShipDate'] = fromExpectedShipDate;
            }

            if (toExpectedShipDate !== undefined) {
                localVarQueryParameter['toExpectedShipDate'] = toExpectedShipDate;
            }

            if (lastModifiedStartDate !== undefined) {
                localVarQueryParameter['lastModifiedStartDate'] = lastModifiedStartDate;
            }

            if (lastModifiedEndDate !== undefined) {
                localVarQueryParameter['lastModifiedEndDate'] = lastModifiedEndDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (productInfo !== undefined) {
                localVarQueryParameter['productInfo'] = productInfo;
            }

            if (shipNodeType !== undefined) {
                localVarQueryParameter['shipNodeType'] = shipNodeType;
            }

            if (shippingProgramType !== undefined) {
                localVarQueryParameter['shippingProgramType'] = shippingProgramType;
            }

            if (replacementInfo !== undefined) {
                localVarQueryParameter['replacementInfo'] = replacementInfo;
            }

            if (orderType !== undefined) {
                localVarQueryParameter['orderType'] = orderType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all the orders with line items that are in the \"created\" status, that is, these orders have been released from the Walmart Order Management System to the seller for processing. The released orders are the orders that are ready for a seller to fulfill.  Only orders created in last 180 days and a maximum of 20000 orders can be fetched at a time. Attempting to download more than 20000 orders will return an error.
         * @summary All released orders
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [createdStartDate] Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [createdEndDate] Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [limit] The number of orders to be returned. Cannot be larger than 200.
         * @param {string} [productInfo] Provides the image URL and product weight in response, if available. Allowed values are true or false.
         * @param {string} [shipNodeType] Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled.
         * @param {string} [sku] A seller-provided Product ID
         * @param {string} [customerOrderId] The customer order ID
         * @param {string} [purchaseOrderId] The purchase order ID. One customer may have multiple purchase orders.
         * @param {string} [fromExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [toExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [shippingProgramType] Specifies the type of program. Allowed value is TWO_DAY.
         * @param {string} [replacementInfo] Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
         * @param {string} [orderType] Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo&#x3D;true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReleasedOrders: async (authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, createdStartDate?: string, createdEndDate?: string, limit?: string, productInfo?: string, shipNodeType?: string, sku?: string, customerOrderId?: string, purchaseOrderId?: string, fromExpectedShipDate?: string, toExpectedShipDate?: string, shippingProgramType?: string, replacementInfo?: string, orderType?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAllReleasedOrders', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getAllReleasedOrders', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getAllReleasedOrders', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getAllReleasedOrders', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/orders/released`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (createdStartDate !== undefined) {
                localVarQueryParameter['createdStartDate'] = createdStartDate;
            }

            if (createdEndDate !== undefined) {
                localVarQueryParameter['createdEndDate'] = createdEndDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (productInfo !== undefined) {
                localVarQueryParameter['productInfo'] = productInfo;
            }

            if (shipNodeType !== undefined) {
                localVarQueryParameter['shipNodeType'] = shipNodeType;
            }

            if (sku !== undefined) {
                localVarQueryParameter['sku'] = sku;
            }

            if (customerOrderId !== undefined) {
                localVarQueryParameter['customerOrderId'] = customerOrderId;
            }

            if (purchaseOrderId !== undefined) {
                localVarQueryParameter['purchaseOrderId'] = purchaseOrderId;
            }

            if (fromExpectedShipDate !== undefined) {
                localVarQueryParameter['fromExpectedShipDate'] = fromExpectedShipDate;
            }

            if (toExpectedShipDate !== undefined) {
                localVarQueryParameter['toExpectedShipDate'] = toExpectedShipDate;
            }

            if (shippingProgramType !== undefined) {
                localVarQueryParameter['shippingProgramType'] = shippingProgramType;
            }

            if (replacementInfo !== undefined) {
                localVarQueryParameter['replacementInfo'] = replacementInfo;
            }

            if (orderType !== undefined) {
                localVarQueryParameter['orderType'] = orderType;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an order detail for a specific purchaseOrderId
         * @summary An order
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [productInfo] Provides the image URL and product weight in response, if available. Allowed values are true or false.
         * @param {string} [replacementInfo] Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnOrder: async (purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, productInfo?: string, replacementInfo?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderId' is not null or undefined
            assertParamExists('getAnOrder', 'purchaseOrderId', purchaseOrderId)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getAnOrder', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getAnOrder', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getAnOrder', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getAnOrder', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/orders/{purchaseOrderId}`
                .replace(`{${"purchaseOrderId"}}`, encodeURIComponent(String(purchaseOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (productInfo !== undefined) {
                localVarQueryParameter['productInfo'] = productInfo;
            }

            if (replacementInfo !== undefined) {
                localVarQueryParameter['replacementInfo'] = replacementInfo;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refunds one or more order lines that have been shipped. The response to a successful call contains the order with the refunded line items
         * @summary Refund Order Lines
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject1} inlineObject1 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrderLines: async (purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject1: InlineObject1, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderId' is not null or undefined
            assertParamExists('refundOrderLines', 'purchaseOrderId', purchaseOrderId)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('refundOrderLines', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('refundOrderLines', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('refundOrderLines', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('refundOrderLines', 'wMSVCNAME', wMSVCNAME)
            // verify required parameter 'inlineObject1' is not null or undefined
            assertParamExists('refundOrderLines', 'inlineObject1', inlineObject1)
            const localVarPath = `/v3/orders/{purchaseOrderId}/refund`
                .replace(`{${"purchaseOrderId"}}`, encodeURIComponent(String(purchaseOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the status of order lines to Shipped and trigger the charge to the customer. The response to a successful call contains the order with the shipped line items.
         * @summary Ship Order Lines
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject2} inlineObject2 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shippingUpdates: async (purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject2: InlineObject2, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderId' is not null or undefined
            assertParamExists('shippingUpdates', 'purchaseOrderId', purchaseOrderId)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('shippingUpdates', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('shippingUpdates', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('shippingUpdates', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('shippingUpdates', 'wMSVCNAME', wMSVCNAME)
            // verify required parameter 'inlineObject2' is not null or undefined
            assertParamExists('shippingUpdates', 'inlineObject2', inlineObject2)
            const localVarPath = `/v3/orders/{purchaseOrderId}/shipping`
                .replace(`{${"purchaseOrderId"}}`, encodeURIComponent(String(purchaseOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * You can use this API to acknowledge an entire order, including all of its order lines. The response to a successful call contains the acknowledged order.
         * @summary Acknowledge Orders
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async acknowledgeOrders(purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.acknowledgeOrders(purchaseOrderId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * You can cancel one or more order lines. You must include a purchaseOrderId when cancelling an order line. The response to a successful call contains the order with the cancelled line items
         * @summary Cancel Order Lines
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject} inlineObject 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrderLines(purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject: InlineObject, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrderLines(purchaseOrderId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of all the orders for specified search criteria.  Only orders created in last 180 days and a maximum of 20000 orders can be fetched at a time. Attempting to download more than 20000 orders will return an error.
         * @summary All orders
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [sku] A seller-provided Product ID
         * @param {string} [customerOrderId] The customer order ID
         * @param {string} [purchaseOrderId] The purchase order ID. One customer may have multiple purchase orders.
         * @param {string} [status] Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled.
         * @param {string} [createdStartDate] Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [createdEndDate] Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [fromExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [toExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [lastModifiedStartDate] Fetches all purchase orders that were modified after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [lastModifiedEndDate] Fetches all purchase orders that were modified before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [limit] The number of orders to be returned. Cannot be larger than 200.
         * @param {string} [productInfo] Provides the image URL and product weight in response, if available. Allowed values are true or false.
         * @param {string} [shipNodeType] Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled.
         * @param {string} [shippingProgramType] Specifies the type of program. Allowed value is TWO_DAY.
         * @param {string} [replacementInfo] Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
         * @param {string} [orderType] Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo&#x3D;true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrders(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, sku?: string, customerOrderId?: string, purchaseOrderId?: string, status?: string, createdStartDate?: string, createdEndDate?: string, fromExpectedShipDate?: string, toExpectedShipDate?: string, lastModifiedStartDate?: string, lastModifiedEndDate?: string, limit?: string, productInfo?: string, shipNodeType?: string, shippingProgramType?: string, replacementInfo?: string, orderType?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrders(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, sku, customerOrderId, purchaseOrderId, status, createdStartDate, createdEndDate, fromExpectedShipDate, toExpectedShipDate, lastModifiedStartDate, lastModifiedEndDate, limit, productInfo, shipNodeType, shippingProgramType, replacementInfo, orderType, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all the orders with line items that are in the \"created\" status, that is, these orders have been released from the Walmart Order Management System to the seller for processing. The released orders are the orders that are ready for a seller to fulfill.  Only orders created in last 180 days and a maximum of 20000 orders can be fetched at a time. Attempting to download more than 20000 orders will return an error.
         * @summary All released orders
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [createdStartDate] Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [createdEndDate] Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [limit] The number of orders to be returned. Cannot be larger than 200.
         * @param {string} [productInfo] Provides the image URL and product weight in response, if available. Allowed values are true or false.
         * @param {string} [shipNodeType] Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled.
         * @param {string} [sku] A seller-provided Product ID
         * @param {string} [customerOrderId] The customer order ID
         * @param {string} [purchaseOrderId] The purchase order ID. One customer may have multiple purchase orders.
         * @param {string} [fromExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [toExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [shippingProgramType] Specifies the type of program. Allowed value is TWO_DAY.
         * @param {string} [replacementInfo] Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
         * @param {string} [orderType] Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo&#x3D;true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllReleasedOrders(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, createdStartDate?: string, createdEndDate?: string, limit?: string, productInfo?: string, shipNodeType?: string, sku?: string, customerOrderId?: string, purchaseOrderId?: string, fromExpectedShipDate?: string, toExpectedShipDate?: string, shippingProgramType?: string, replacementInfo?: string, orderType?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllReleasedOrders(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, createdStartDate, createdEndDate, limit, productInfo, shipNodeType, sku, customerOrderId, purchaseOrderId, fromExpectedShipDate, toExpectedShipDate, shippingProgramType, replacementInfo, orderType, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves an order detail for a specific purchaseOrderId
         * @summary An order
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [productInfo] Provides the image URL and product weight in response, if available. Allowed values are true or false.
         * @param {string} [replacementInfo] Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnOrder(purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, productInfo?: string, replacementInfo?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnOrder(purchaseOrderId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, productInfo, replacementInfo, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refunds one or more order lines that have been shipped. The response to a successful call contains the order with the refunded line items
         * @summary Refund Order Lines
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject1} inlineObject1 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refundOrderLines(purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject1: InlineObject1, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refundOrderLines(purchaseOrderId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject1, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the status of order lines to Shipped and trigger the charge to the customer. The response to a successful call contains the order with the shipped line items.
         * @summary Ship Order Lines
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject2} inlineObject2 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shippingUpdates(purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject2: InlineObject2, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shippingUpdates(purchaseOrderId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject2, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * You can use this API to acknowledge an entire order, including all of its order lines. The response to a successful call contains the acknowledged order.
         * @summary Acknowledge Orders
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        acknowledgeOrders(purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.acknowledgeOrders(purchaseOrderId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * You can cancel one or more order lines. You must include a purchaseOrderId when cancelling an order line. The response to a successful call contains the order with the cancelled line items
         * @summary Cancel Order Lines
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject} inlineObject 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderLines(purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject: InlineObject, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.cancelOrderLines(purchaseOrderId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of all the orders for specified search criteria.  Only orders created in last 180 days and a maximum of 20000 orders can be fetched at a time. Attempting to download more than 20000 orders will return an error.
         * @summary All orders
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [sku] A seller-provided Product ID
         * @param {string} [customerOrderId] The customer order ID
         * @param {string} [purchaseOrderId] The purchase order ID. One customer may have multiple purchase orders.
         * @param {string} [status] Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled.
         * @param {string} [createdStartDate] Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [createdEndDate] Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [fromExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [toExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [lastModifiedStartDate] Fetches all purchase orders that were modified after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [lastModifiedEndDate] Fetches all purchase orders that were modified before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [limit] The number of orders to be returned. Cannot be larger than 200.
         * @param {string} [productInfo] Provides the image URL and product weight in response, if available. Allowed values are true or false.
         * @param {string} [shipNodeType] Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled.
         * @param {string} [shippingProgramType] Specifies the type of program. Allowed value is TWO_DAY.
         * @param {string} [replacementInfo] Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
         * @param {string} [orderType] Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo&#x3D;true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrders(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, sku?: string, customerOrderId?: string, purchaseOrderId?: string, status?: string, createdStartDate?: string, createdEndDate?: string, fromExpectedShipDate?: string, toExpectedShipDate?: string, lastModifiedStartDate?: string, lastModifiedEndDate?: string, limit?: string, productInfo?: string, shipNodeType?: string, shippingProgramType?: string, replacementInfo?: string, orderType?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getAllOrders(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, sku, customerOrderId, purchaseOrderId, status, createdStartDate, createdEndDate, fromExpectedShipDate, toExpectedShipDate, lastModifiedStartDate, lastModifiedEndDate, limit, productInfo, shipNodeType, shippingProgramType, replacementInfo, orderType, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all the orders with line items that are in the \"created\" status, that is, these orders have been released from the Walmart Order Management System to the seller for processing. The released orders are the orders that are ready for a seller to fulfill.  Only orders created in last 180 days and a maximum of 20000 orders can be fetched at a time. Attempting to download more than 20000 orders will return an error.
         * @summary All released orders
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [createdStartDate] Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [createdEndDate] Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
         * @param {string} [limit] The number of orders to be returned. Cannot be larger than 200.
         * @param {string} [productInfo] Provides the image URL and product weight in response, if available. Allowed values are true or false.
         * @param {string} [shipNodeType] Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled.
         * @param {string} [sku] A seller-provided Product ID
         * @param {string} [customerOrderId] The customer order ID
         * @param {string} [purchaseOrderId] The purchase order ID. One customer may have multiple purchase orders.
         * @param {string} [fromExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [toExpectedShipDate] Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
         * @param {string} [shippingProgramType] Specifies the type of program. Allowed value is TWO_DAY.
         * @param {string} [replacementInfo] Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
         * @param {string} [orderType] Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo&#x3D;true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReleasedOrders(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, createdStartDate?: string, createdEndDate?: string, limit?: string, productInfo?: string, shipNodeType?: string, sku?: string, customerOrderId?: string, purchaseOrderId?: string, fromExpectedShipDate?: string, toExpectedShipDate?: string, shippingProgramType?: string, replacementInfo?: string, orderType?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getAllReleasedOrders(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, createdStartDate, createdEndDate, limit, productInfo, shipNodeType, sku, customerOrderId, purchaseOrderId, fromExpectedShipDate, toExpectedShipDate, shippingProgramType, replacementInfo, orderType, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an order detail for a specific purchaseOrderId
         * @summary An order
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [productInfo] Provides the image URL and product weight in response, if available. Allowed values are true or false.
         * @param {string} [replacementInfo] Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnOrder(purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, productInfo?: string, replacementInfo?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getAnOrder(purchaseOrderId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, productInfo, replacementInfo, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Refunds one or more order lines that have been shipped. The response to a successful call contains the order with the refunded line items
         * @summary Refund Order Lines
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject1} inlineObject1 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refundOrderLines(purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject1: InlineObject1, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.refundOrderLines(purchaseOrderId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject1, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the status of order lines to Shipped and trigger the charge to the customer. The response to a successful call contains the order with the shipped line items.
         * @summary Ship Order Lines
         * @param {string} purchaseOrderId purchaseOrderId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject2} inlineObject2 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shippingUpdates(purchaseOrderId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject2: InlineObject2, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.shippingUpdates(purchaseOrderId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject2, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for acknowledgeOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiAcknowledgeOrdersRequest
 */
export interface OrdersApiAcknowledgeOrdersRequest {
    /**
     * purchaseOrderId
     * @type {string}
     * @memberof OrdersApiAcknowledgeOrders
     */
    readonly purchaseOrderId: string

    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof OrdersApiAcknowledgeOrders
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof OrdersApiAcknowledgeOrders
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof OrdersApiAcknowledgeOrders
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof OrdersApiAcknowledgeOrders
     */
    readonly wMSVCNAME: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof OrdersApiAcknowledgeOrders
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for cancelOrderLines operation in OrdersApi.
 * @export
 * @interface OrdersApiCancelOrderLinesRequest
 */
export interface OrdersApiCancelOrderLinesRequest {
    /**
     * purchaseOrderId
     * @type {string}
     * @memberof OrdersApiCancelOrderLines
     */
    readonly purchaseOrderId: string

    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof OrdersApiCancelOrderLines
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof OrdersApiCancelOrderLines
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof OrdersApiCancelOrderLines
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof OrdersApiCancelOrderLines
     */
    readonly wMSVCNAME: string

    /**
     * 
     * @type {InlineObject}
     * @memberof OrdersApiCancelOrderLines
     */
    readonly inlineObject: InlineObject

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof OrdersApiCancelOrderLines
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getAllOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiGetAllOrdersRequest
 */
export interface OrdersApiGetAllOrdersRequest {
    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly wMSVCNAME: string

    /**
     * A seller-provided Product ID
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly sku?: string

    /**
     * The customer order ID
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly customerOrderId?: string

    /**
     * The purchase order ID. One customer may have multiple purchase orders.
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly purchaseOrderId?: string

    /**
     * Status of purchase order line. Valid statuses are: Created, Acknowledged, Shipped, Delivered and Cancelled.
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly status?: string

    /**
     * Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly createdStartDate?: string

    /**
     * Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly createdEndDate?: string

    /**
     * Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly fromExpectedShipDate?: string

    /**
     * Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly toExpectedShipDate?: string

    /**
     * Fetches all purchase orders that were modified after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly lastModifiedStartDate?: string

    /**
     * Fetches all purchase orders that were modified before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly lastModifiedEndDate?: string

    /**
     * The number of orders to be returned. Cannot be larger than 200.
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly limit?: string

    /**
     * Provides the image URL and product weight in response, if available. Allowed values are true or false.
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly productInfo?: string

    /**
     * Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled.
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly shipNodeType?: string

    /**
     * Specifies the type of program. Allowed value is TWO_DAY.
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly shippingProgramType?: string

    /**
     * Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly replacementInfo?: string

    /**
     * Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo&#x3D;true.
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly orderType?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof OrdersApiGetAllOrders
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getAllReleasedOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiGetAllReleasedOrdersRequest
 */
export interface OrdersApiGetAllReleasedOrdersRequest {
    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly wMSVCNAME: string

    /**
     * Fetches all purchase orders that were created after this date. Default is current date - 7 days. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly createdStartDate?: string

    /**
     * Fetches all purchase orders that were created before this date. Default is current date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ).
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly createdEndDate?: string

    /**
     * The number of orders to be returned. Cannot be larger than 200.
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly limit?: string

    /**
     * Provides the image URL and product weight in response, if available. Allowed values are true or false.
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly productInfo?: string

    /**
     * Specifies the type of shipNode. Allowed values are SellerFulfilled(Default), WFSFulfilled and 3PLFulfilled.
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly shipNodeType?: string

    /**
     * A seller-provided Product ID
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly sku?: string

    /**
     * The customer order ID
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly customerOrderId?: string

    /**
     * The purchase order ID. One customer may have multiple purchase orders.
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly purchaseOrderId?: string

    /**
     * Fetches all purchase orders that have order lines with an expected ship date after this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly fromExpectedShipDate?: string

    /**
     * Fetches all purchase orders that have order lines with an expected ship date before this date. Use either UTC or ISO 8601 formats. Date example: \&#39;2020-03-16\&#39;(yyyy-MM-dd). Date with Timestamp example: \&#39;2020-03-16T10:30:15Z\&#39;(yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ)
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly toExpectedShipDate?: string

    /**
     * Specifies the type of program. Allowed value is TWO_DAY.
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly shippingProgramType?: string

    /**
     * Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly replacementInfo?: string

    /**
     * Specifies if the order is a regular order or replacement order. Possible values are REGULAR or REPLACEMENT. Provided in response only if query parameter replacementInfo&#x3D;true.
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly orderType?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof OrdersApiGetAllReleasedOrders
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getAnOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetAnOrderRequest
 */
export interface OrdersApiGetAnOrderRequest {
    /**
     * purchaseOrderId
     * @type {string}
     * @memberof OrdersApiGetAnOrder
     */
    readonly purchaseOrderId: string

    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof OrdersApiGetAnOrder
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof OrdersApiGetAnOrder
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof OrdersApiGetAnOrder
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof OrdersApiGetAnOrder
     */
    readonly wMSVCNAME: string

    /**
     * Provides the image URL and product weight in response, if available. Allowed values are true or false.
     * @type {string}
     * @memberof OrdersApiGetAnOrder
     */
    readonly productInfo?: string

    /**
     * Provides additional attributes - originalCustomerOrderID, orderType - related to Replacement order, in response, if available. Allowed values are true or false.
     * @type {string}
     * @memberof OrdersApiGetAnOrder
     */
    readonly replacementInfo?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof OrdersApiGetAnOrder
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for refundOrderLines operation in OrdersApi.
 * @export
 * @interface OrdersApiRefundOrderLinesRequest
 */
export interface OrdersApiRefundOrderLinesRequest {
    /**
     * purchaseOrderId
     * @type {string}
     * @memberof OrdersApiRefundOrderLines
     */
    readonly purchaseOrderId: string

    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof OrdersApiRefundOrderLines
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof OrdersApiRefundOrderLines
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof OrdersApiRefundOrderLines
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof OrdersApiRefundOrderLines
     */
    readonly wMSVCNAME: string

    /**
     * 
     * @type {InlineObject1}
     * @memberof OrdersApiRefundOrderLines
     */
    readonly inlineObject1: InlineObject1

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof OrdersApiRefundOrderLines
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for shippingUpdates operation in OrdersApi.
 * @export
 * @interface OrdersApiShippingUpdatesRequest
 */
export interface OrdersApiShippingUpdatesRequest {
    /**
     * purchaseOrderId
     * @type {string}
     * @memberof OrdersApiShippingUpdates
     */
    readonly purchaseOrderId: string

    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof OrdersApiShippingUpdates
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof OrdersApiShippingUpdates
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof OrdersApiShippingUpdates
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof OrdersApiShippingUpdates
     */
    readonly wMSVCNAME: string

    /**
     * 
     * @type {InlineObject2}
     * @memberof OrdersApiShippingUpdates
     */
    readonly inlineObject2: InlineObject2

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof OrdersApiShippingUpdates
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * You can use this API to acknowledge an entire order, including all of its order lines. The response to a successful call contains the acknowledged order.
     * @summary Acknowledge Orders
     * @param {OrdersApiAcknowledgeOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public acknowledgeOrders(requestParameters: OrdersApiAcknowledgeOrdersRequest, options?: any) {
        return OrdersApiFp(this.configuration).acknowledgeOrders(requestParameters.purchaseOrderId, requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * You can cancel one or more order lines. You must include a purchaseOrderId when cancelling an order line. The response to a successful call contains the order with the cancelled line items
     * @summary Cancel Order Lines
     * @param {OrdersApiCancelOrderLinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public cancelOrderLines(requestParameters: OrdersApiCancelOrderLinesRequest, options?: any) {
        return OrdersApiFp(this.configuration).cancelOrderLines(requestParameters.purchaseOrderId, requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.inlineObject, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of all the orders for specified search criteria.  Only orders created in last 180 days and a maximum of 20000 orders can be fetched at a time. Attempting to download more than 20000 orders will return an error.
     * @summary All orders
     * @param {OrdersApiGetAllOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getAllOrders(requestParameters: OrdersApiGetAllOrdersRequest, options?: any) {
        return OrdersApiFp(this.configuration).getAllOrders(requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.sku, requestParameters.customerOrderId, requestParameters.purchaseOrderId, requestParameters.status, requestParameters.createdStartDate, requestParameters.createdEndDate, requestParameters.fromExpectedShipDate, requestParameters.toExpectedShipDate, requestParameters.lastModifiedStartDate, requestParameters.lastModifiedEndDate, requestParameters.limit, requestParameters.productInfo, requestParameters.shipNodeType, requestParameters.shippingProgramType, requestParameters.replacementInfo, requestParameters.orderType, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all the orders with line items that are in the \"created\" status, that is, these orders have been released from the Walmart Order Management System to the seller for processing. The released orders are the orders that are ready for a seller to fulfill.  Only orders created in last 180 days and a maximum of 20000 orders can be fetched at a time. Attempting to download more than 20000 orders will return an error.
     * @summary All released orders
     * @param {OrdersApiGetAllReleasedOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getAllReleasedOrders(requestParameters: OrdersApiGetAllReleasedOrdersRequest, options?: any) {
        return OrdersApiFp(this.configuration).getAllReleasedOrders(requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.createdStartDate, requestParameters.createdEndDate, requestParameters.limit, requestParameters.productInfo, requestParameters.shipNodeType, requestParameters.sku, requestParameters.customerOrderId, requestParameters.purchaseOrderId, requestParameters.fromExpectedShipDate, requestParameters.toExpectedShipDate, requestParameters.shippingProgramType, requestParameters.replacementInfo, requestParameters.orderType, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an order detail for a specific purchaseOrderId
     * @summary An order
     * @param {OrdersApiGetAnOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getAnOrder(requestParameters: OrdersApiGetAnOrderRequest, options?: any) {
        return OrdersApiFp(this.configuration).getAnOrder(requestParameters.purchaseOrderId, requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.productInfo, requestParameters.replacementInfo, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refunds one or more order lines that have been shipped. The response to a successful call contains the order with the refunded line items
     * @summary Refund Order Lines
     * @param {OrdersApiRefundOrderLinesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public refundOrderLines(requestParameters: OrdersApiRefundOrderLinesRequest, options?: any) {
        return OrdersApiFp(this.configuration).refundOrderLines(requestParameters.purchaseOrderId, requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.inlineObject1, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the status of order lines to Shipped and trigger the charge to the customer. The response to a successful call contains the order with the shipped line items.
     * @summary Ship Order Lines
     * @param {OrdersApiShippingUpdatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public shippingUpdates(requestParameters: OrdersApiShippingUpdatesRequest, options?: any) {
        return OrdersApiFp(this.configuration).shippingUpdates(requestParameters.purchaseOrderId, requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.inlineObject2, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }
}


