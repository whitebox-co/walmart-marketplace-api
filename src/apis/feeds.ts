/* tslint:disable */
/* eslint-disable */
/**
 * Feed Management
 * Feeds are constructed to handle bulk functions. A feed consists of an HTTP request with an attached file. Once you upload the Feeds, you can use the Feed ID to track the status of the feeds and the status of the item within those Feeds.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Cause
 */
export interface Cause {
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    description?: string;
}
/**
 * Information about the individual feed
 * @export
 * @interface FeedRecord
 */
export interface FeedRecord {
    /**
     * A unique ID used for tracking the Feed File
     * @type {string}
     * @memberof FeedRecord
     */
    feedId?: string;
    /**
     * The source of the feed
     * @type {string}
     * @memberof FeedRecord
     */
    feedSource?: string;
    /**
     * The feed type
     * @type {string}
     * @memberof FeedRecord
     */
    feedType?: string;
    /**
     * The seller ID
     * @type {string}
     * @memberof FeedRecord
     */
    partnerId?: string;
    /**
     * The number of items received
     * @type {number}
     * @memberof FeedRecord
     */
    itemsReceived?: number;
    /**
     * The number of items in the feed that have successfully processed
     * @type {number}
     * @memberof FeedRecord
     */
    itemsSucceeded?: number;
    /**
     * The number of items in the feed that failed due to a data or system error
     * @type {number}
     * @memberof FeedRecord
     */
    itemsFailed?: number;
    /**
     * The number of items in the feed that are still in progress
     * @type {number}
     * @memberof FeedRecord
     */
    itemsProcessing?: number;
    /**
     * Can be one of the following: RECEIVED, INPROGRESS, PROCESSED, or ERROR. For details, see the definitions listed under \'Feed Statuses\' at the beginning of this section.
     * @type {string}
     * @memberof FeedRecord
     */
    feedStatus?: string;
    /**
     * The date and time the feed was submitted. Format: yyyymmddThh:mm:ss.xxxz
     * @type {number}
     * @memberof FeedRecord
     */
    feedDate?: number;
    /**
     * The batch ID for the feed, if provided
     * @type {string}
     * @memberof FeedRecord
     */
    batchId?: string;
    /**
     * The most recent time the feed was modified. Format: yyyymmddThh:mm:ss.xxxz
     * @type {number}
     * @memberof FeedRecord
     */
    modifiedDtm?: number;
}
/**
 * 
 * @export
 * @interface FeedRecordResponse
 */
export interface FeedRecordResponse {
    /**
     * 
     * @type {Array<InlineResponse200Errors>}
     * @memberof FeedRecordResponse
     */
    errors?: Array<InlineResponse200Errors>;
    /**
     * Total number of feeds returned
     * @type {number}
     * @memberof FeedRecordResponse
     */
    totalResults?: number;
    /**
     * The object response to the starting number, where 0 is the first available
     * @type {number}
     * @memberof FeedRecordResponse
     */
    offset?: number;
    /**
     * The number of items to be returned
     * @type {number}
     * @memberof FeedRecordResponse
     */
    limit?: number;
    /**
     * 
     * @type {InlineResponse200Results}
     * @memberof FeedRecordResponse
     */
    results?: InlineResponse200Results;
}
/**
 * 
 * @export
 * @interface GatewayError
 */
export interface GatewayError {
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    info?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    severity?: GatewayErrorSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    category?: GatewayErrorCategoryEnum;
    /**
     * 
     * @type {Array<InlineResponse200Causes>}
     * @memberof GatewayError
     */
    causes?: Array<InlineResponse200Causes>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof GatewayError
     */
    errorIdentifiers?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    component?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    serviceName?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    gatewayErrorCategory?: GatewayErrorGatewayErrorCategoryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum GatewayErrorSeverityEnum {
    Info = 'INFO',
    Warn = 'WARN',
    Error = 'ERROR'
}
/**
    * @export
    * @enum {string}
    */
export enum GatewayErrorCategoryEnum {
    Application = 'APPLICATION',
    System = 'SYSTEM',
    Request = 'REQUEST',
    Data = 'DATA'
}
/**
    * @export
    * @enum {string}
    */
export enum GatewayErrorGatewayErrorCategoryEnum {
    InternalDataError = 'INTERNAL_DATA_ERROR',
    ExternalDataError = 'EXTERNAL_DATA_ERROR',
    SystemError = 'SYSTEM_ERROR'
}

/**
 * 
 * @export
 * @interface IngestionError
 */
export interface IngestionError {
    /**
     * Error Type
     * @type {string}
     * @memberof IngestionError
     */
    type: IngestionErrorTypeEnum;
    /**
     * Error code
     * @type {string}
     * @memberof IngestionError
     */
    code: string;
    /**
     * Error description
     * @type {string}
     * @memberof IngestionError
     */
    description?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum IngestionErrorTypeEnum {
    DataError = 'DATA_ERROR',
    SystemError = 'SYSTEM_ERROR',
    TimeoutError = 'TIMEOUT_ERROR'
}

/**
 * List of errors for an item
 * @export
 * @interface IngestionErrors
 */
export interface IngestionErrors {
    /**
     * 
     * @type {Array<InlineResponse2001IngestionErrorsIngestionError>}
     * @memberof IngestionErrors
     */
    ingestionError?: Array<InlineResponse2001IngestionErrorsIngestionError>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<InlineResponse200Errors>}
     * @memberof InlineResponse200
     */
    errors?: Array<InlineResponse200Errors>;
    /**
     * Total number of feeds returned
     * @type {number}
     * @memberof InlineResponse200
     */
    totalResults?: number;
    /**
     * The object response to the starting number, where 0 is the first available
     * @type {number}
     * @memberof InlineResponse200
     */
    offset?: number;
    /**
     * The number of items to be returned
     * @type {number}
     * @memberof InlineResponse200
     */
    limit?: number;
    /**
     * 
     * @type {InlineResponse200Results}
     * @memberof InlineResponse200
     */
    results?: InlineResponse200Results;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<InlineResponse200Errors>}
     * @memberof InlineResponse2001
     */
    errors?: Array<InlineResponse200Errors>;
    /**
     * A unique ID used for tracking the Feed File
     * @type {string}
     * @memberof InlineResponse2001
     */
    feedId?: string;
    /**
     * Can be one of the following: RECEIVED, INPROGRESS, PROCESSED, or ERROR
     * @type {string}
     * @memberof InlineResponse2001
     */
    feedStatus?: InlineResponse2001FeedStatusEnum;
    /**
     * 
     * @type {InlineResponse2001IngestionErrors}
     * @memberof InlineResponse2001
     */
    ingestionErrors?: InlineResponse2001IngestionErrors;
    /**
     * The number of items received in the feed
     * @type {number}
     * @memberof InlineResponse2001
     */
    itemsReceived?: number;
    /**
     * The number of items in the feed that processed successfully
     * @type {number}
     * @memberof InlineResponse2001
     */
    itemsSucceeded?: number;
    /**
     * The number of items in the feed that failed due to a data or system error
     * @type {number}
     * @memberof InlineResponse2001
     */
    itemsFailed?: number;
    /**
     * The number of items in the feed that are still processing
     * @type {number}
     * @memberof InlineResponse2001
     */
    itemsProcessing?: number;
    /**
     * The object response to the starting number, where 0 is the first entity available for request
     * @type {number}
     * @memberof InlineResponse2001
     */
    offset?: number;
    /**
     * The number of items returned. Cannot be greater than 1000.
     * @type {number}
     * @memberof InlineResponse2001
     */
    limit?: number;
    /**
     * 
     * @type {InlineResponse2001ItemDetails}
     * @memberof InlineResponse2001
     */
    itemDetails?: InlineResponse2001ItemDetails;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2001FeedStatusEnum {
    Received = 'RECEIVED',
    Inprogress = 'INPROGRESS',
    Processed = 'PROCESSED',
    Error = 'ERROR'
}

/**
 * List of errors for an item
 * @export
 * @interface InlineResponse2001IngestionErrors
 */
export interface InlineResponse2001IngestionErrors {
    /**
     * 
     * @type {Array<InlineResponse2001IngestionErrorsIngestionError>}
     * @memberof InlineResponse2001IngestionErrors
     */
    ingestionError?: Array<InlineResponse2001IngestionErrorsIngestionError>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001IngestionErrorsIngestionError
 */
export interface InlineResponse2001IngestionErrorsIngestionError {
    /**
     * Error Type
     * @type {string}
     * @memberof InlineResponse2001IngestionErrorsIngestionError
     */
    type: InlineResponse2001IngestionErrorsIngestionErrorTypeEnum;
    /**
     * Error code
     * @type {string}
     * @memberof InlineResponse2001IngestionErrorsIngestionError
     */
    code: string;
    /**
     * Error description
     * @type {string}
     * @memberof InlineResponse2001IngestionErrorsIngestionError
     */
    description?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2001IngestionErrorsIngestionErrorTypeEnum {
    DataError = 'DATA_ERROR',
    SystemError = 'SYSTEM_ERROR',
    TimeoutError = 'TIMEOUT_ERROR'
}

/**
 * List of ingestion status details for items in the feed
 * @export
 * @interface InlineResponse2001ItemDetails
 */
export interface InlineResponse2001ItemDetails {
    /**
     * The ingestion status of an individual item
     * @type {Array<InlineResponse2001ItemDetailsItemIngestionStatus>}
     * @memberof InlineResponse2001ItemDetails
     */
    itemIngestionStatus?: Array<InlineResponse2001ItemDetailsItemIngestionStatus>;
}
/**
 * The ingestion status of an individual item
 * @export
 * @interface InlineResponse2001ItemDetailsItemIngestionStatus
 */
export interface InlineResponse2001ItemDetailsItemIngestionStatus {
    /**
     * Mart ID that a user or seller uses for a marketplace
     * @type {number}
     * @memberof InlineResponse2001ItemDetailsItemIngestionStatus
     */
    martId?: number;
    /**
     * An arbitrary alphanumeric unique ID, seller-specified, identifying each item.
     * @type {string}
     * @memberof InlineResponse2001ItemDetailsItemIngestionStatus
     */
    sku?: string;
    /**
     * An alphanumeric product ID, generated by Walmart
     * @type {string}
     * @memberof InlineResponse2001ItemDetailsItemIngestionStatus
     */
    wpid?: string;
    /**
     * index of items in the feed
     * @type {number}
     * @memberof InlineResponse2001ItemDetailsItemIngestionStatus
     */
    index?: number;
    /**
     * Can be one of the following: DATA_ERROR, SYSTEM_ERROR, TIMEOUT_ERROR, or INPROGRESS
     * @type {string}
     * @memberof InlineResponse2001ItemDetailsItemIngestionStatus
     */
    ingestionStatus: InlineResponse2001ItemDetailsItemIngestionStatusIngestionStatusEnum;
    /**
     * 
     * @type {InlineResponse2001IngestionErrors}
     * @memberof InlineResponse2001ItemDetailsItemIngestionStatus
     */
    ingestionErrors?: InlineResponse2001IngestionErrors;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2001ItemDetailsItemIngestionStatusIngestionStatusEnum {
    Inprogress = 'INPROGRESS',
    Success = 'SUCCESS',
    DataError = 'DATA_ERROR',
    SystemError = 'SYSTEM_ERROR',
    TimeoutError = 'TIMEOUT_ERROR'
}

/**
 * 
 * @export
 * @interface InlineResponse200Causes
 */
export interface InlineResponse200Causes {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Causes
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Causes
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Causes
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Causes
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200Errors
 */
export interface InlineResponse200Errors {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Errors
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Errors
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Errors
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Errors
     */
    info?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Errors
     */
    severity?: InlineResponse200ErrorsSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Errors
     */
    category?: InlineResponse200ErrorsCategoryEnum;
    /**
     * 
     * @type {Array<InlineResponse200Causes>}
     * @memberof InlineResponse200Errors
     */
    causes?: Array<InlineResponse200Causes>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof InlineResponse200Errors
     */
    errorIdentifiers?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Errors
     */
    component?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Errors
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Errors
     */
    serviceName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Errors
     */
    gatewayErrorCategory?: InlineResponse200ErrorsGatewayErrorCategoryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ErrorsSeverityEnum {
    Info = 'INFO',
    Warn = 'WARN',
    Error = 'ERROR'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ErrorsCategoryEnum {
    Application = 'APPLICATION',
    System = 'SYSTEM',
    Request = 'REQUEST',
    Data = 'DATA'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200ErrorsGatewayErrorCategoryEnum {
    InternalDataError = 'INTERNAL_DATA_ERROR',
    ExternalDataError = 'EXTERNAL_DATA_ERROR',
    SystemError = 'SYSTEM_ERROR'
}

/**
 * The feed status results
 * @export
 * @interface InlineResponse200Results
 */
export interface InlineResponse200Results {
    /**
     * The feed status results
     * @type {Array<InlineResponse200ResultsFeed>}
     * @memberof InlineResponse200Results
     */
    feed?: Array<InlineResponse200ResultsFeed>;
}
/**
 * Information about the individual feed
 * @export
 * @interface InlineResponse200ResultsFeed
 */
export interface InlineResponse200ResultsFeed {
    /**
     * A unique ID used for tracking the Feed File
     * @type {string}
     * @memberof InlineResponse200ResultsFeed
     */
    feedId?: string;
    /**
     * The source of the feed
     * @type {string}
     * @memberof InlineResponse200ResultsFeed
     */
    feedSource?: string;
    /**
     * The feed type
     * @type {string}
     * @memberof InlineResponse200ResultsFeed
     */
    feedType?: string;
    /**
     * The seller ID
     * @type {string}
     * @memberof InlineResponse200ResultsFeed
     */
    partnerId?: string;
    /**
     * The number of items received
     * @type {number}
     * @memberof InlineResponse200ResultsFeed
     */
    itemsReceived?: number;
    /**
     * The number of items in the feed that have successfully processed
     * @type {number}
     * @memberof InlineResponse200ResultsFeed
     */
    itemsSucceeded?: number;
    /**
     * The number of items in the feed that failed due to a data or system error
     * @type {number}
     * @memberof InlineResponse200ResultsFeed
     */
    itemsFailed?: number;
    /**
     * The number of items in the feed that are still in progress
     * @type {number}
     * @memberof InlineResponse200ResultsFeed
     */
    itemsProcessing?: number;
    /**
     * Can be one of the following: RECEIVED, INPROGRESS, PROCESSED, or ERROR. For details, see the definitions listed under \'Feed Statuses\' at the beginning of this section.
     * @type {string}
     * @memberof InlineResponse200ResultsFeed
     */
    feedStatus?: string;
    /**
     * The date and time the feed was submitted. Format: yyyymmddThh:mm:ss.xxxz
     * @type {number}
     * @memberof InlineResponse200ResultsFeed
     */
    feedDate?: number;
    /**
     * The batch ID for the feed, if provided
     * @type {string}
     * @memberof InlineResponse200ResultsFeed
     */
    batchId?: string;
    /**
     * The most recent time the feed was modified. Format: yyyymmddThh:mm:ss.xxxz
     * @type {number}
     * @memberof InlineResponse200ResultsFeed
     */
    modifiedDtm?: number;
}
/**
 * List of ingestion status details for items in the feed
 * @export
 * @interface ItemDetails
 */
export interface ItemDetails {
    /**
     * The ingestion status of an individual item
     * @type {Array<InlineResponse2001ItemDetailsItemIngestionStatus>}
     * @memberof ItemDetails
     */
    itemIngestionStatus?: Array<InlineResponse2001ItemDetailsItemIngestionStatus>;
}
/**
 * 
 * @export
 * @interface PartnerFeedResponse
 */
export interface PartnerFeedResponse {
    /**
     * 
     * @type {Array<InlineResponse200Errors>}
     * @memberof PartnerFeedResponse
     */
    errors?: Array<InlineResponse200Errors>;
    /**
     * A unique ID used for tracking the Feed File
     * @type {string}
     * @memberof PartnerFeedResponse
     */
    feedId?: string;
    /**
     * Can be one of the following: RECEIVED, INPROGRESS, PROCESSED, or ERROR
     * @type {string}
     * @memberof PartnerFeedResponse
     */
    feedStatus?: PartnerFeedResponseFeedStatusEnum;
    /**
     * 
     * @type {InlineResponse2001IngestionErrors}
     * @memberof PartnerFeedResponse
     */
    ingestionErrors?: InlineResponse2001IngestionErrors;
    /**
     * The number of items received in the feed
     * @type {number}
     * @memberof PartnerFeedResponse
     */
    itemsReceived?: number;
    /**
     * The number of items in the feed that processed successfully
     * @type {number}
     * @memberof PartnerFeedResponse
     */
    itemsSucceeded?: number;
    /**
     * The number of items in the feed that failed due to a data or system error
     * @type {number}
     * @memberof PartnerFeedResponse
     */
    itemsFailed?: number;
    /**
     * The number of items in the feed that are still processing
     * @type {number}
     * @memberof PartnerFeedResponse
     */
    itemsProcessing?: number;
    /**
     * The object response to the starting number, where 0 is the first entity available for request
     * @type {number}
     * @memberof PartnerFeedResponse
     */
    offset?: number;
    /**
     * The number of items returned. Cannot be greater than 1000.
     * @type {number}
     * @memberof PartnerFeedResponse
     */
    limit?: number;
    /**
     * 
     * @type {InlineResponse2001ItemDetails}
     * @memberof PartnerFeedResponse
     */
    itemDetails?: InlineResponse2001ItemDetails;
}

/**
    * @export
    * @enum {string}
    */
export enum PartnerFeedResponseFeedStatusEnum {
    Received = 'RECEIVED',
    Inprogress = 'INPROGRESS',
    Processed = 'PROCESSED',
    Error = 'ERROR'
}

/**
 * The ingestion status of an individual item
 * @export
 * @interface PartnerItemIngestionStatus
 */
export interface PartnerItemIngestionStatus {
    /**
     * Mart ID that a user or seller uses for a marketplace
     * @type {number}
     * @memberof PartnerItemIngestionStatus
     */
    martId?: number;
    /**
     * An arbitrary alphanumeric unique ID, seller-specified, identifying each item.
     * @type {string}
     * @memberof PartnerItemIngestionStatus
     */
    sku?: string;
    /**
     * An alphanumeric product ID, generated by Walmart
     * @type {string}
     * @memberof PartnerItemIngestionStatus
     */
    wpid?: string;
    /**
     * index of items in the feed
     * @type {number}
     * @memberof PartnerItemIngestionStatus
     */
    index?: number;
    /**
     * Can be one of the following: DATA_ERROR, SYSTEM_ERROR, TIMEOUT_ERROR, or INPROGRESS
     * @type {string}
     * @memberof PartnerItemIngestionStatus
     */
    ingestionStatus: PartnerItemIngestionStatusIngestionStatusEnum;
    /**
     * 
     * @type {InlineResponse2001IngestionErrors}
     * @memberof PartnerItemIngestionStatus
     */
    ingestionErrors?: InlineResponse2001IngestionErrors;
}

/**
    * @export
    * @enum {string}
    */
export enum PartnerItemIngestionStatusIngestionStatusEnum {
    Inprogress = 'INPROGRESS',
    Success = 'SUCCESS',
    DataError = 'DATA_ERROR',
    SystemError = 'SYSTEM_ERROR',
    TimeoutError = 'TIMEOUT_ERROR'
}

/**
 * The feed status results
 * @export
 * @interface ResultRecord
 */
export interface ResultRecord {
    /**
     * The feed status results
     * @type {Array<InlineResponse200ResultsFeed>}
     * @memberof ResultRecord
     */
    feed?: Array<InlineResponse200ResultsFeed>;
}

/**
 * FeedsApi - axios parameter creator
 * @export
 */
export const FeedsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the feed statuses for all the specified Feed IDs.
         * @summary  All feed statuses
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [feedId] A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped. (e.g., feedId: \&#39;...3456@789...\&#39; must be entered in the URL as \&#39;...3456%40789).
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
         * @param {string} [limit] The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeedStatuses: async (wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, feedId?: string, offset?: string, limit?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getAllFeedStatuses', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getAllFeedStatuses', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getAllFeedStatuses', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (feedId !== undefined) {
                localVarQueryParameter['feedId'] = feedId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Feed Error Report API allows you to download a detailed error report for a submitted feed.   Currently the API supports error report download for the following feeds:  *   FITMENT_ACES  *   FITMENT_PIES    This API returns a zipped .csv file, which contains line item level detailed error messages. For details and a sample, please refer to the guide section link below.    
         * @summary Get Feed Error Report
         * @param {string} feedId Feed Id of the feed
         * @param {'FITMENT_ACES' | 'FITMENT_PIES'} feedType Feed type for which Error Report needs to be downloaded
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedErrorReport: async (feedId: string, feedType: 'FITMENT_ACES' | 'FITMENT_PIES', wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('getFeedErrorReport', 'feedId', feedId)
            // verify required parameter 'feedType' is not null or undefined
            assertParamExists('getFeedErrorReport', 'feedType', feedType)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getFeedErrorReport', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getFeedErrorReport', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getFeedErrorReport', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/feeds/{feedId}/errorReport`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (feedType !== undefined) {
                localVarQueryParameter['feedType'] = feedType;
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the feed and item status for a specified Feed ID.
         * @summary Feed item status
         * @param {string} feedId A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped. (e.g., feedId: \&#39;...3456@789...\&#39; must be entered in the URL as \&#39;...3456%40789)
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [includeDetails] Includes details of each entity in the feed.
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
         * @param {string} [limit] The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedItemStatus: async (feedId: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, includeDetails?: string, offset?: string, limit?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('getFeedItemStatus', 'feedId', feedId)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getFeedItemStatus', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getFeedItemStatus', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getFeedItemStatus', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/feeds/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedsApi - functional programming interface
 * @export
 */
export const FeedsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FeedsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the feed statuses for all the specified Feed IDs.
         * @summary  All feed statuses
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [feedId] A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped. (e.g., feedId: \&#39;...3456@789...\&#39; must be entered in the URL as \&#39;...3456%40789).
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
         * @param {string} [limit] The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFeedStatuses(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, feedId?: string, offset?: string, limit?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFeedStatuses(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, feedId, offset, limit, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Feed Error Report API allows you to download a detailed error report for a submitted feed.   Currently the API supports error report download for the following feeds:  *   FITMENT_ACES  *   FITMENT_PIES    This API returns a zipped .csv file, which contains line item level detailed error messages. For details and a sample, please refer to the guide section link below.    
         * @summary Get Feed Error Report
         * @param {string} feedId Feed Id of the feed
         * @param {'FITMENT_ACES' | 'FITMENT_PIES'} feedType Feed type for which Error Report needs to be downloaded
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedErrorReport(feedId: string, feedType: 'FITMENT_ACES' | 'FITMENT_PIES', wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedErrorReport(feedId, feedType, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the feed and item status for a specified Feed ID.
         * @summary Feed item status
         * @param {string} feedId A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped. (e.g., feedId: \&#39;...3456@789...\&#39; must be entered in the URL as \&#39;...3456%40789)
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [includeDetails] Includes details of each entity in the feed.
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
         * @param {string} [limit] The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedItemStatus(feedId: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, includeDetails?: string, offset?: string, limit?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedItemStatus(feedId, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, includeDetails, offset, limit, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FeedsApi - factory interface
 * @export
 */
export const FeedsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FeedsApiFp(configuration)
    return {
        /**
         * Returns the feed statuses for all the specified Feed IDs.
         * @summary  All feed statuses
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [feedId] A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped. (e.g., feedId: \&#39;...3456@789...\&#39; must be entered in the URL as \&#39;...3456%40789).
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
         * @param {string} [limit] The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeedStatuses(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, feedId?: string, offset?: string, limit?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getAllFeedStatuses(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, feedId, offset, limit, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Feed Error Report API allows you to download a detailed error report for a submitted feed.   Currently the API supports error report download for the following feeds:  *   FITMENT_ACES  *   FITMENT_PIES    This API returns a zipped .csv file, which contains line item level detailed error messages. For details and a sample, please refer to the guide section link below.    
         * @summary Get Feed Error Report
         * @param {string} feedId Feed Id of the feed
         * @param {'FITMENT_ACES' | 'FITMENT_PIES'} feedType Feed type for which Error Report needs to be downloaded
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedErrorReport(feedId: string, feedType: 'FITMENT_ACES' | 'FITMENT_PIES', wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<void> {
            return localVarFp.getFeedErrorReport(feedId, feedType, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the feed and item status for a specified Feed ID.
         * @summary Feed item status
         * @param {string} feedId A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped. (e.g., feedId: \&#39;...3456@789...\&#39; must be entered in the URL as \&#39;...3456%40789)
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [includeDetails] Includes details of each entity in the feed.
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
         * @param {string} [limit] The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedItemStatus(feedId: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, includeDetails?: string, offset?: string, limit?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getFeedItemStatus(feedId, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, includeDetails, offset, limit, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllFeedStatuses operation in FeedsApi.
 * @export
 * @interface FeedsApiGetAllFeedStatusesRequest
 */
export interface FeedsApiGetAllFeedStatusesRequest {
    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof FeedsApiGetAllFeedStatuses
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof FeedsApiGetAllFeedStatuses
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof FeedsApiGetAllFeedStatuses
     */
    readonly wMSVCNAME: string

    /**
     * A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped. (e.g., feedId: \&#39;...3456@789...\&#39; must be entered in the URL as \&#39;...3456%40789).
     * @type {string}
     * @memberof FeedsApiGetAllFeedStatuses
     */
    readonly feedId?: string

    /**
     * The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
     * @type {string}
     * @memberof FeedsApiGetAllFeedStatuses
     */
    readonly offset?: string

    /**
     * The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
     * @type {string}
     * @memberof FeedsApiGetAllFeedStatuses
     */
    readonly limit?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof FeedsApiGetAllFeedStatuses
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getFeedErrorReport operation in FeedsApi.
 * @export
 * @interface FeedsApiGetFeedErrorReportRequest
 */
export interface FeedsApiGetFeedErrorReportRequest {
    /**
     * Feed Id of the feed
     * @type {string}
     * @memberof FeedsApiGetFeedErrorReport
     */
    readonly feedId: string

    /**
     * Feed type for which Error Report needs to be downloaded
     * @type {'FITMENT_ACES' | 'FITMENT_PIES'}
     * @memberof FeedsApiGetFeedErrorReport
     */
    readonly feedType: 'FITMENT_ACES' | 'FITMENT_PIES'

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof FeedsApiGetFeedErrorReport
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof FeedsApiGetFeedErrorReport
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof FeedsApiGetFeedErrorReport
     */
    readonly wMSVCNAME: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof FeedsApiGetFeedErrorReport
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getFeedItemStatus operation in FeedsApi.
 * @export
 * @interface FeedsApiGetFeedItemStatusRequest
 */
export interface FeedsApiGetFeedItemStatusRequest {
    /**
     * A unique ID returned from the Bulk Upload API, used for tracking the Feed File. Special characters must be escaped. (e.g., feedId: \&#39;...3456@789...\&#39; must be entered in the URL as \&#39;...3456%40789)
     * @type {string}
     * @memberof FeedsApiGetFeedItemStatus
     */
    readonly feedId: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof FeedsApiGetFeedItemStatus
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof FeedsApiGetFeedItemStatus
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof FeedsApiGetFeedItemStatus
     */
    readonly wMSVCNAME: string

    /**
     * Includes details of each entity in the feed.
     * @type {string}
     * @memberof FeedsApiGetFeedItemStatus
     */
    readonly includeDetails?: string

    /**
     * The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
     * @type {string}
     * @memberof FeedsApiGetFeedItemStatus
     */
    readonly offset?: string

    /**
     * The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
     * @type {string}
     * @memberof FeedsApiGetFeedItemStatus
     */
    readonly limit?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof FeedsApiGetFeedItemStatus
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * FeedsApi - object-oriented interface
 * @export
 * @class FeedsApi
 * @extends {BaseAPI}
 */
export class FeedsApi extends BaseAPI {
    /**
     * Returns the feed statuses for all the specified Feed IDs.
     * @summary  All feed statuses
     * @param {FeedsApiGetAllFeedStatusesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public getAllFeedStatuses(requestParameters: FeedsApiGetAllFeedStatusesRequest, options?: any) {
        return FeedsApiFp(this.configuration).getAllFeedStatuses(requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.feedId, requestParameters.offset, requestParameters.limit, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Feed Error Report API allows you to download a detailed error report for a submitted feed.   Currently the API supports error report download for the following feeds:  *   FITMENT_ACES  *   FITMENT_PIES    This API returns a zipped .csv file, which contains line item level detailed error messages. For details and a sample, please refer to the guide section link below.    
     * @summary Get Feed Error Report
     * @param {FeedsApiGetFeedErrorReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public getFeedErrorReport(requestParameters: FeedsApiGetFeedErrorReportRequest, options?: any) {
        return FeedsApiFp(this.configuration).getFeedErrorReport(requestParameters.feedId, requestParameters.feedType, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the feed and item status for a specified Feed ID.
     * @summary Feed item status
     * @param {FeedsApiGetFeedItemStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedsApi
     */
    public getFeedItemStatus(requestParameters: FeedsApiGetFeedItemStatusRequest, options?: any) {
        return FeedsApiFp(this.configuration).getFeedItemStatus(requestParameters.feedId, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.includeDetails, requestParameters.offset, requestParameters.limit, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }
}


