/* tslint:disable */
/* eslint-disable */
/**
 * Item Management
 * The Item Management APIs enable you to set up and manage items on Walmart.com. Once you have completed Registration and have access to your Consumer ID and Private Key, you can get started with the integration process
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Item Associations like shippingTemplate, shipNode.
 * @export
 * @interface Association
 */
export interface Association {
    /**
     * 
     * @type {InlineResponse2001ShippingTemplate}
     * @memberof Association
     */
    shippingTemplate?: InlineResponse2001ShippingTemplate;
    /**
     * Name of the fulfillment center.
     * @type {string}
     * @memberof Association
     */
    shipNodeName?: string;
    /**
     * The fulfillment center or ship node Id which uniquely identifies each facility and is autogenerated during the creation of fulfillment center. Every time a facility is added, a new ship node id is generated.
     * @type {string}
     * @memberof Association
     */
    shipNode?: string;
}
/**
 * 
 * @export
 * @interface CategoryPayload
 */
export interface CategoryPayload {
    /**
     * Type of item
     * @type {string}
     * @memberof CategoryPayload
     */
    category?: string;
    /**
     * Specific kind of category
     * @type {Array<InlineResponse2006Subcategory>}
     * @memberof CategoryPayload
     */
    subcategory?: Array<InlineResponse2006Subcategory>;
}
/**
 * 
 * @export
 * @interface Cause
 */
export interface Cause {
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof Cause
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface FeedId
 */
export interface FeedId {
    /**
     * A unique ID, returned from the Bulk Upload API, used for tracking the feed file
     * @type {string}
     * @memberof FeedId
     */
    feedId?: string;
    /**
     * 
     * @type {object}
     * @memberof FeedId
     */
    additionalAttributes?: object | null;
    /**
     * 
     * @type {object}
     * @memberof FeedId
     */
    errors?: object | null;
}
/**
 * 
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * | Attribute | Description | Data Type | --- | ----------- | ------- | num_reviews | The reviewed times for Items | string | | customerRating | Customer rating | string | | lifecycleStatus | The lifecycle status of an item describes where the item listing is in the overall lifecycle | string | | publishedStatus | The published status of an item describes where the item is in the submission process | string | | unpublishedReasons | It outlines the reason for an item when unpublished | string | | inventoryStatus | It indicates whether the product is in stock or not | string | | price | Price of the Item | string | | fulfillmentType | Fulfillment information | string |
     * @type {string}
     * @memberof Filter
     */
    field?: FilterFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    op?: FilterOpEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof Filter
     */
    values?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum FilterFieldEnum {
    NumReviews = 'num_reviews',
    CustomerRating = 'customerRating',
    LifecycleStatus = 'lifecycleStatus',
    PublishedStatus = 'publishedStatus',
    UnpublishedReasons = 'unpublishedReasons',
    InventoryStatus = 'inventoryStatus',
    Price = 'price',
    FulfillmentType = 'fulfillmentType'
}
/**
    * @export
    * @enum {string}
    */
export enum FilterOpEnum {
    Equals = 'equals',
    Between = 'between',
    GreaterThan = 'greater_than',
    LessThan = 'less_than'
}

/**
 * 
 * @export
 * @interface GatewayError
 */
export interface GatewayError {
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    info?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    severity?: GatewayErrorSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    category?: GatewayErrorCategoryEnum;
    /**
     * 
     * @type {Array<InlineResponse2001Causes>}
     * @memberof GatewayError
     */
    causes?: Array<InlineResponse2001Causes>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof GatewayError
     */
    errorIdentifiers?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    component?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    serviceName?: string;
    /**
     * 
     * @type {string}
     * @memberof GatewayError
     */
    gatewayErrorCategory?: GatewayErrorGatewayErrorCategoryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum GatewayErrorSeverityEnum {
    Info = 'INFO',
    Warn = 'WARN',
    Error = 'ERROR'
}
/**
    * @export
    * @enum {string}
    */
export enum GatewayErrorCategoryEnum {
    Application = 'APPLICATION',
    System = 'SYSTEM',
    Request = 'REQUEST',
    Data = 'DATA'
}
/**
    * @export
    * @enum {string}
    */
export enum GatewayErrorGatewayErrorCategoryEnum {
    InternalDataError = 'INTERNAL_DATA_ERROR',
    ExternalDataError = 'EXTERNAL_DATA_ERROR',
    SystemError = 'SYSTEM_ERROR'
}

/**
 * 
 * @export
 * @interface GenericAttributeValue
 */
export interface GenericAttributeValue {
    /**
     * 
     * @type {string}
     * @memberof GenericAttributeValue
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof GenericAttributeValue
     */
    group?: string;
    /**
     * 
     * @type {string}
     * @memberof GenericAttributeValue
     */
    source?: string;
    /**
     * 
     * @type {number}
     * @memberof GenericAttributeValue
     */
    rank?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GenericAttributeValue
     */
    isVariant?: boolean;
}
/**
 * The list of variant attributes used to create the variant item
 * @export
 * @interface GroupingAttributes
 */
export interface GroupingAttributes {
    /**
     * Returns true if the item is a primary variant
     * @type {string}
     * @memberof GroupingAttributes
     */
    name?: string;
    /**
     * The list of variant attributes used to create the variant item
     * @type {string}
     * @memberof GroupingAttributes
     */
    value?: string;
}
/**
 * Provides images associated with the item product listing.
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {V3ItemsCatalogSearchQuery}
     * @memberof InlineObject
     */
    query?: V3ItemsCatalogSearchQuery;
    /**
     * 
     * @type {Array<V3ItemsCatalogSearchFilters>}
     * @memberof InlineObject
     */
    filters?: Array<V3ItemsCatalogSearchFilters>;
    /**
     * 
     * @type {V3ItemsCatalogSearchSort}
     * @memberof InlineObject
     */
    sort?: V3ItemsCatalogSearchSort;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * List of items whose associations need to be fetched. It should not have more than 50 items.
     * @type {Array<V3ItemsAssociationsItems>}
     * @memberof InlineObject1
     */
    items: Array<V3ItemsAssociationsItems>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * Response Status
     * @type {string}
     * @memberof InlineResponse200
     */
    status?: string;
    /**
     * Items included in the response list
     * @type {Array<InlineResponse200Payload>}
     * @memberof InlineResponse200
     */
    payload?: Array<InlineResponse200Payload>;
    /**
     * Total items for the query
     * @type {number}
     * @memberof InlineResponse200
     */
    totalItems?: number;
    /**
     * Number of items shown in this page
     * @type {number}
     * @memberof InlineResponse200
     */
    limit?: number;
    /**
     * Used for pagination to fetch the next set of items
     * @type {string}
     * @memberof InlineResponse200
     */
    nextCursor?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    statuss?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<InlineResponse2001Items>}
     * @memberof InlineResponse2001
     */
    items: Array<InlineResponse2001Items>;
}
/**
 * Item Associations like shippingTemplate, shipNode.
 * @export
 * @interface InlineResponse2001Associations
 */
export interface InlineResponse2001Associations {
    /**
     * 
     * @type {InlineResponse2001ShippingTemplate}
     * @memberof InlineResponse2001Associations
     */
    shippingTemplate?: InlineResponse2001ShippingTemplate;
    /**
     * Name of the fulfillment center.
     * @type {string}
     * @memberof InlineResponse2001Associations
     */
    shipNodeName?: string;
    /**
     * The fulfillment center or ship node Id which uniquely identifies each facility and is autogenerated during the creation of fulfillment center. Every time a facility is added, a new ship node id is generated.
     * @type {string}
     * @memberof InlineResponse2001Associations
     */
    shipNode?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001Causes
 */
export interface InlineResponse2001Causes {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Causes
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Causes
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Causes
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Causes
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001Errors
 */
export interface InlineResponse2001Errors {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Errors
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Errors
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Errors
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Errors
     */
    info?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Errors
     */
    severity?: InlineResponse2001ErrorsSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Errors
     */
    category?: InlineResponse2001ErrorsCategoryEnum;
    /**
     * 
     * @type {Array<InlineResponse2001Causes>}
     * @memberof InlineResponse2001Errors
     */
    causes?: Array<InlineResponse2001Causes>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof InlineResponse2001Errors
     */
    errorIdentifiers?: { [key: string]: object; };
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2001ErrorsSeverityEnum {
    Info = 'INFO',
    Warn = 'WARN',
    Error = 'ERROR'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2001ErrorsCategoryEnum {
    Application = 'APPLICATION',
    System = 'SYSTEM',
    Request = 'REQUEST',
    Data = 'DATA'
}

/**
 * 
 * @export
 * @interface InlineResponse2001Items
 */
export interface InlineResponse2001Items {
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof InlineResponse2001Items
     */
    sku: string;
    /**
     * Item Associations like shippingTemplate, shipNode.
     * @type {Array<InlineResponse2001Associations>}
     * @memberof InlineResponse2001Items
     */
    associations?: Array<InlineResponse2001Associations>;
    /**
     * 
     * @type {Array<InlineResponse2001Errors>}
     * @memberof InlineResponse2001Items
     */
    errors?: Array<InlineResponse2001Errors>;
}
/**
 * Information about Shipping Template
 * @export
 * @interface InlineResponse2001ShippingTemplate
 */
export interface InlineResponse2001ShippingTemplate {
    /**
     * Shipping Template Name
     * @type {string}
     * @memberof InlineResponse2001ShippingTemplate
     */
    name?: string;
    /**
     * Shipping Template Type
     * @type {string}
     * @memberof InlineResponse2001ShippingTemplate
     */
    type?: InlineResponse2001ShippingTemplateTypeEnum;
    /**
     * Shipping Template ID
     * @type {string}
     * @memberof InlineResponse2001ShippingTemplate
     */
    id?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2001ShippingTemplateTypeEnum {
    Default = 'DEFAULT',
    Custom = 'CUSTOM',
    Deliverr = 'DELIVERR'
}

/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * A unique ID, returned from the Bulk Upload API, used for tracking the feed file
     * @type {string}
     * @memberof InlineResponse2002
     */
    feedId?: string;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2002
     */
    additionalAttributes?: object | null;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2002
     */
    errors?: object | null;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<InlineResponse2003Errors>}
     * @memberof InlineResponse2003
     */
    errors?: Array<InlineResponse2003Errors>;
    /**
     * Items included in the response list
     * @type {Array<InlineResponse2003ItemResponse>}
     * @memberof InlineResponse2003
     */
    ItemResponse: Array<InlineResponse2003ItemResponse>;
    /**
     * 
     * @type {InlineResponse2003AdditionalAttributes}
     * @memberof InlineResponse2003
     */
    additionalAttributes?: InlineResponse2003AdditionalAttributes;
    /**
     * Total items for the query
     * @type {number}
     * @memberof InlineResponse2003
     */
    totalItems?: number;
    /**
     * Used for pagination to fetch the next set of items
     * @type {string}
     * @memberof InlineResponse2003
     */
    nextCursor?: string;
}
/**
 * Bag of additional attributes
 * @export
 * @interface InlineResponse2003AdditionalAttributes
 */
export interface InlineResponse2003AdditionalAttributes {
    /**
     * 
     * @type {Array<InlineResponse2003AdditionalAttributesNameValueAttribute>}
     * @memberof InlineResponse2003AdditionalAttributes
     */
    nameValueAttribute?: Array<InlineResponse2003AdditionalAttributesNameValueAttribute>;
}
/**
 * 
 * @export
 * @interface InlineResponse2003AdditionalAttributesNameValueAttribute
 */
export interface InlineResponse2003AdditionalAttributesNameValueAttribute {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003AdditionalAttributesNameValueAttribute
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003AdditionalAttributesNameValueAttribute
     */
    type: InlineResponse2003AdditionalAttributesNameValueAttributeTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2003AdditionalAttributesNameValueAttribute
     */
    isVariant?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003AdditionalAttributesNameValueAttribute
     */
    variantResourceType?: string;
    /**
     * 
     * @type {Array<InlineResponse2003AdditionalAttributesValue>}
     * @memberof InlineResponse2003AdditionalAttributesNameValueAttribute
     */
    value: Array<InlineResponse2003AdditionalAttributesValue>;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003AdditionalAttributesNameValueAttributeTypeEnum {
    LocalizableText = 'LOCALIZABLE_TEXT',
    String = 'STRING',
    Boolean = 'BOOLEAN',
    Integer = 'INTEGER',
    Decimal = 'DECIMAL',
    Date = 'DATE',
    Timestamp = 'TIMESTAMP'
}

/**
 * 
 * @export
 * @interface InlineResponse2003AdditionalAttributesValue
 */
export interface InlineResponse2003AdditionalAttributesValue {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003AdditionalAttributesValue
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003AdditionalAttributesValue
     */
    group?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003AdditionalAttributesValue
     */
    source?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003AdditionalAttributesValue
     */
    rank?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2003AdditionalAttributesValue
     */
    isVariant?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2003Errors
 */
export interface InlineResponse2003Errors {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Errors
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Errors
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Errors
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Errors
     */
    info?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Errors
     */
    severity?: InlineResponse2003ErrorsSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Errors
     */
    category?: InlineResponse2003ErrorsCategoryEnum;
    /**
     * 
     * @type {Array<InlineResponse2001Causes>}
     * @memberof InlineResponse2003Errors
     */
    causes?: Array<InlineResponse2001Causes>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof InlineResponse2003Errors
     */
    errorIdentifiers?: { [key: string]: object; };
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Errors
     */
    component?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Errors
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Errors
     */
    serviceName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Errors
     */
    gatewayErrorCategory?: InlineResponse2003ErrorsGatewayErrorCategoryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003ErrorsSeverityEnum {
    Info = 'INFO',
    Warn = 'WARN',
    Error = 'ERROR'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003ErrorsCategoryEnum {
    Application = 'APPLICATION',
    System = 'SYSTEM',
    Request = 'REQUEST',
    Data = 'DATA'
}
/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003ErrorsGatewayErrorCategoryEnum {
    InternalDataError = 'INTERNAL_DATA_ERROR',
    ExternalDataError = 'EXTERNAL_DATA_ERROR',
    SystemError = 'SYSTEM_ERROR'
}

/**
 * 
 * @export
 * @interface InlineResponse2003ItemResponse
 */
export interface InlineResponse2003ItemResponse {
    /**
     * The marketplace name. Example: Walmart_US
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    mart?: InlineResponse2003ItemResponseMartEnum;
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    sku: string;
    /**
     * The Walmart Product ID assigned by Walmart to the item when listed on Walmart.com
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    wpid?: string;
    /**
     * The 12-digit bar code used extensively for retail packaging in the United States
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    upc?: string;
    /**
     * The GTIN-compatible Product ID (i.e. UPC or EAN). UPCs must be 12 or 14 digitis in length. EANs must be 13 digits in length.
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    gtin?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the product name. Example: \'Sterling Silver Blue Diamond Heart Pendant with 18in Chain\'
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    productName?: string;
    /**
     * Walmart assigned an item shelf name
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    shelf?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the Product Type. Example: \'Diamond\'
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    productType?: string;
    /**
     * 
     * @type {InlineResponse2003Price}
     * @memberof InlineResponse2003ItemResponse
     */
    price?: InlineResponse2003Price;
    /**
     * The status of an item when the item is in the submission process. The status can be one of the following: PUBLISHED, READY_TO_PUBLISH, IN_PROGRESS, UNPUBLISHED, STAGE, or SYSTEM_PROBLEM.
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    publishedStatus?: string;
    /**
     * 
     * @type {InlineResponse2003AdditionalAttributes}
     * @memberof InlineResponse2003ItemResponse
     */
    additionalAttributes?: InlineResponse2003AdditionalAttributes;
    /**
     * 
     * @type {InlineResponse2003UnpublishedReasons}
     * @memberof InlineResponse2003ItemResponse
     */
    unpublishedReasons?: InlineResponse2003UnpublishedReasons;
    /**
     * The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    lifecycleStatus?: string;
    /**
     * Variant Id  if the item is of type Variant
     * @type {string}
     * @memberof InlineResponse2003ItemResponse
     */
    variantGroupId?: string;
    /**
     * 
     * @type {InlineResponse200VariantGroupInfo}
     * @memberof InlineResponse2003ItemResponse
     */
    variantGroupInfo?: InlineResponse200VariantGroupInfo;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003ItemResponseMartEnum {
    WalmartUs = 'WALMART_US',
    WalmartCa = 'WALMART_CA',
    AsdaGm = 'ASDA_GM',
    WalmartMexico = 'WALMART_MEXICO'
}

/**
 * Specifies item purchase price information, including currency and amount.
 * @export
 * @interface InlineResponse2003Price
 */
export interface InlineResponse2003Price {
    /**
     * The currency type. Example: USD for US Dollars
     * @type {string}
     * @memberof InlineResponse2003Price
     */
    currency?: InlineResponse2003PriceCurrencyEnum;
    /**
     * The numerical amount of the price. Example: 9.99
     * @type {number}
     * @memberof InlineResponse2003Price
     */
    amount?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2003PriceCurrencyEnum {
    Aed = 'AED',
    Afn = 'AFN',
    All = 'ALL',
    Amd = 'AMD',
    Ang = 'ANG',
    Aoa = 'AOA',
    Ars = 'ARS',
    Aud = 'AUD',
    Awg = 'AWG',
    Azn = 'AZN',
    Bam = 'BAM',
    Bbd = 'BBD',
    Bdt = 'BDT',
    Bgn = 'BGN',
    Bhd = 'BHD',
    Bif = 'BIF',
    Bmd = 'BMD',
    Bnd = 'BND',
    Bob = 'BOB',
    Brl = 'BRL',
    Bsd = 'BSD',
    Btn = 'BTN',
    Bwp = 'BWP',
    Byr = 'BYR',
    Bzd = 'BZD',
    Cad = 'CAD',
    Cdf = 'CDF',
    Chf = 'CHF',
    Clp = 'CLP',
    Cny = 'CNY',
    Cop = 'COP',
    Crc = 'CRC',
    Cup = 'CUP',
    Cve = 'CVE',
    Czk = 'CZK',
    Djf = 'DJF',
    Dkk = 'DKK',
    Dop = 'DOP',
    Dzd = 'DZD',
    Egp = 'EGP',
    Ern = 'ERN',
    Etb = 'ETB',
    Eur = 'EUR',
    Fjd = 'FJD',
    Fkp = 'FKP',
    Gbp = 'GBP',
    Gel = 'GEL',
    Ghs = 'GHS',
    Gip = 'GIP',
    Gmd = 'GMD',
    Gnf = 'GNF',
    Gtq = 'GTQ',
    Gyd = 'GYD',
    Hkd = 'HKD',
    Hnl = 'HNL',
    Hrk = 'HRK',
    Htg = 'HTG',
    Huf = 'HUF',
    Idr = 'IDR',
    Ils = 'ILS',
    Inr = 'INR',
    Iqd = 'IQD',
    Irr = 'IRR',
    Isk = 'ISK',
    Jmd = 'JMD',
    Jod = 'JOD',
    Jpy = 'JPY',
    Kes = 'KES',
    Kgs = 'KGS',
    Khr = 'KHR',
    Kmf = 'KMF',
    Kpw = 'KPW',
    Krw = 'KRW',
    Kwd = 'KWD',
    Kyd = 'KYD',
    Kzt = 'KZT',
    Lak = 'LAK',
    Lbp = 'LBP',
    Lkr = 'LKR',
    Lrd = 'LRD',
    Lsl = 'LSL',
    Ltl = 'LTL',
    Lvl = 'LVL',
    Lyd = 'LYD',
    Mad = 'MAD',
    Mdl = 'MDL',
    Mga = 'MGA',
    Mkd = 'MKD',
    Mmk = 'MMK',
    Mnt = 'MNT',
    Mop = 'MOP',
    Mro = 'MRO',
    Mur = 'MUR',
    Mvr = 'MVR',
    Mwk = 'MWK',
    Mxn = 'MXN',
    Myr = 'MYR',
    Mzn = 'MZN',
    Nad = 'NAD',
    Ngn = 'NGN',
    Nio = 'NIO',
    Nok = 'NOK',
    Npr = 'NPR',
    Nzd = 'NZD',
    Omr = 'OMR',
    Pab = 'PAB',
    Pen = 'PEN',
    Pgk = 'PGK',
    Php = 'PHP',
    Pkr = 'PKR',
    Pln = 'PLN',
    Pyg = 'PYG',
    Qar = 'QAR',
    Ron = 'RON',
    Rsd = 'RSD',
    Rub = 'RUB',
    Rur = 'RUR',
    Rwf = 'RWF',
    Sar = 'SAR',
    Sbd = 'SBD',
    Scr = 'SCR',
    Sdg = 'SDG',
    Sek = 'SEK',
    Sgd = 'SGD',
    Shp = 'SHP',
    Sll = 'SLL',
    Sos = 'SOS',
    Srd = 'SRD',
    Std = 'STD',
    Syp = 'SYP',
    Szl = 'SZL',
    Thb = 'THB',
    Tjs = 'TJS',
    Tmt = 'TMT',
    Tnd = 'TND',
    Top = 'TOP',
    Try = 'TRY',
    Ttd = 'TTD',
    Twd = 'TWD',
    Tzs = 'TZS',
    Uah = 'UAH',
    Ugx = 'UGX',
    Usd = 'USD',
    Uyu = 'UYU',
    Uzs = 'UZS',
    Vef = 'VEF',
    Vnd = 'VND',
    Vuv = 'VUV',
    Wst = 'WST',
    Xaf = 'XAF',
    Xag = 'XAG',
    Xau = 'XAU',
    Xba = 'XBA',
    Xbb = 'XBB',
    Xbc = 'XBC',
    Xbd = 'XBD',
    Xcd = 'XCD',
    Xdr = 'XDR',
    Xfu = 'XFU',
    Xof = 'XOF',
    Xpd = 'XPD',
    Xpf = 'XPF',
    Xpt = 'XPT',
    Xts = 'XTS',
    Xxx = 'XXX',
    Yer = 'YER',
    Zar = 'ZAR',
    Zmk = 'ZMK',
    Zwl = 'ZWL'
}

/**
 * It outlines the reason for an item when unpublished ,that is, when \'publishedStatus\' is set to \'UNPUBLISHED\'.
 * @export
 * @interface InlineResponse2003UnpublishedReasons
 */
export interface InlineResponse2003UnpublishedReasons {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2003UnpublishedReasons
     */
    reason?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {InlineResponse2004ResponseRecord}
     * @memberof InlineResponse2004
     */
    responseRecord?: InlineResponse2004ResponseRecord;
}
/**
 * 
 * @export
 * @interface InlineResponse2004ResponseRecord
 */
export interface InlineResponse2004ResponseRecord {
    /**
     * The marketplace name. Example: Walmart_US
     * @type {string}
     * @memberof InlineResponse2004ResponseRecord
     */
    mart?: InlineResponse2004ResponseRecordMartEnum;
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof InlineResponse2004ResponseRecord
     */
    sku: string;
    /**
     * The Walmart Product ID assigned by Walmart to the item when listed on Walmart.com
     * @type {string}
     * @memberof InlineResponse2004ResponseRecord
     */
    wpid?: string;
    /**
     * The 12-digit bar code used extensively for retail packaging in the United States
     * @type {string}
     * @memberof InlineResponse2004ResponseRecord
     */
    upc?: string;
    /**
     * The GTIN-compatible Product ID (i.e. UPC or EAN). UPCs must be 12 or 14 digitis in length. EANs must be 13 digits in length.
     * @type {string}
     * @memberof InlineResponse2004ResponseRecord
     */
    gtin?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the product name. Example: \'Sterling Silver Blue Diamond Heart Pendant with 18in Chain\'
     * @type {string}
     * @memberof InlineResponse2004ResponseRecord
     */
    productName?: string;
    /**
     * Walmart assigned an item shelf name
     * @type {string}
     * @memberof InlineResponse2004ResponseRecord
     */
    shelf?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the Product Type. Example: \'Diamond\'
     * @type {string}
     * @memberof InlineResponse2004ResponseRecord
     */
    productType?: string;
    /**
     * 
     * @type {InlineResponse2003Price}
     * @memberof InlineResponse2004ResponseRecord
     */
    price?: InlineResponse2003Price;
    /**
     * The status of an item when the item is in the submission process. The status can be one of the following: PUBLISHED, READY_TO_PUBLISH, IN_PROGRESS, UNPUBLISHED, STAGE, or SYSTEM_PROBLEM.
     * @type {string}
     * @memberof InlineResponse2004ResponseRecord
     */
    publishedStatus?: string;
    /**
     * 
     * @type {InlineResponse2003AdditionalAttributes}
     * @memberof InlineResponse2004ResponseRecord
     */
    additionalAttributes?: InlineResponse2003AdditionalAttributes;
    /**
     * 
     * @type {InlineResponse2003UnpublishedReasons}
     * @memberof InlineResponse2004ResponseRecord
     */
    unpublishedReasons?: InlineResponse2003UnpublishedReasons;
    /**
     * The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
     * @type {string}
     * @memberof InlineResponse2004ResponseRecord
     */
    lifecycleStatus?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse2004ResponseRecordMartEnum {
    WalmartUs = 'WALMART_US',
    WalmartCa = 'WALMART_CA',
    AsdaGm = 'ASDA_GM',
    WalmartMexico = 'WALMART_MEXICO'
}

/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Array<InlineResponse2005Items>}
     * @memberof InlineResponse2005
     */
    items?: Array<InlineResponse2005Items>;
}
/**
 * Provides images associated with the item product listing.
 * @export
 * @interface InlineResponse2005Images
 */
export interface InlineResponse2005Images {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Images
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Items
 */
export interface InlineResponse2005Items {
    /**
     * Specifies the item identifier generated by Walmart.
     * @type {string}
     * @memberof InlineResponse2005Items
     */
    itemId?: string;
    /**
     * Specifies whether or not this item is available by other sellers in the Marketplace.
     * @type {boolean}
     * @memberof InlineResponse2005Items
     */
    isMarketPlaceItem?: boolean;
    /**
     * Provides images associated with the item product listing.
     * @type {Array<InlineResponse2005Images>}
     * @memberof InlineResponse2005Items
     */
    images?: Array<InlineResponse2005Images>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Items
     */
    customerRating?: string;
    /**
     * 
     * @type {InlineResponse2005Price}
     * @memberof InlineResponse2005Items
     */
    price?: InlineResponse2005Price;
    /**
     * Specifies the catalog item description.
     * @type {string}
     * @memberof InlineResponse2005Items
     */
    description?: string;
    /**
     * Provides the seller-specified alphanumeric string that uniquely identifies the product name. Example: \'Sterling Silver Blue Diamond Heart Pendant with 18in Chain\'.
     * @type {string}
     * @memberof InlineResponse2005Items
     */
    title?: string;
    /**
     * Specifies the item brand.
     * @type {string}
     * @memberof InlineResponse2005Items
     */
    brand?: string;
    /**
     * Provides the seller-specified alphanumeric string that uniquely identifies the Product Type. Example: \'Diamond\'.
     * @type {string}
     * @memberof InlineResponse2005Items
     */
    productType?: string;
    /**
     * 
     * @type {InlineResponse2005Properties}
     * @memberof InlineResponse2005Items
     */
    properties?: InlineResponse2005Properties;
}
/**
 * Specifies item purchase price information, including currency and amount.
 * @export
 * @interface InlineResponse2005Price
 */
export interface InlineResponse2005Price {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Price
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Price
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Properties
 */
export interface InlineResponse2005Properties {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Properties
     */
    variant_items_num?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Properties
     */
    num_reviews?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2005Properties
     */
    categories?: Array<string>;
    /**
     * 
     * @type {InlineResponse2005PropertiesVariants}
     * @memberof InlineResponse2005Properties
     */
    variants?: InlineResponse2005PropertiesVariants;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2005Properties
     */
    next_day_eligible?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2005PropertiesVariants
 */
export interface InlineResponse2005PropertiesVariants {
    /**
     * 
     * @type {Array<InlineResponse2005PropertiesVariantsVariantMeta>}
     * @memberof InlineResponse2005PropertiesVariants
     */
    variantMeta?: Array<InlineResponse2005PropertiesVariantsVariantMeta>;
    /**
     * 
     * @type {Array<InlineResponse2005PropertiesVariantsVariantData>}
     * @memberof InlineResponse2005PropertiesVariants
     */
    variantData?: Array<InlineResponse2005PropertiesVariantsVariantData>;
}
/**
 * 
 * @export
 * @interface InlineResponse2005PropertiesVariantsVariantData
 */
export interface InlineResponse2005PropertiesVariantsVariantData {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005PropertiesVariantsVariantData
     */
    productImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005PropertiesVariantsVariantData
     */
    itemId?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005PropertiesVariantsVariantData
     */
    isAvailable?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005PropertiesVariantsVariantData
     */
    title?: string;
    /**
     * 
     * @type {Array<InlineResponse2005PropertiesVariantsVariantValues>}
     * @memberof InlineResponse2005PropertiesVariantsVariantData
     */
    variantValues?: Array<InlineResponse2005PropertiesVariantsVariantValues>;
}
/**
 * 
 * @export
 * @interface InlineResponse2005PropertiesVariantsVariantMeta
 */
export interface InlineResponse2005PropertiesVariantsVariantMeta {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005PropertiesVariantsVariantMeta
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005PropertiesVariantsVariantValues
 */
export interface InlineResponse2005PropertiesVariantsVariantValues {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005PropertiesVariantsVariantValues
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005PropertiesVariantsVariantValues
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006
     */
    status?: string;
    /**
     * 
     * @type {Array<InlineResponse2006Payload>}
     * @memberof InlineResponse2006
     */
    payload?: Array<InlineResponse2006Payload>;
}
/**
 * 
 * @export
 * @interface InlineResponse2006Payload
 */
export interface InlineResponse2006Payload {
    /**
     * Type of item
     * @type {string}
     * @memberof InlineResponse2006Payload
     */
    category?: string;
    /**
     * Specific kind of category
     * @type {Array<InlineResponse2006Subcategory>}
     * @memberof InlineResponse2006Payload
     */
    subcategory?: Array<InlineResponse2006Subcategory>;
}
/**
 * Specific kind of category
 * @export
 * @interface InlineResponse2006Subcategory
 */
export interface InlineResponse2006Subcategory {
    /**
     * Name of specific kind of category
     * @type {string}
     * @memberof InlineResponse2006Subcategory
     */
    subCategoryName?: string;
    /**
     * ID of specific kind of category
     * @type {string}
     * @memberof InlineResponse2006Subcategory
     */
    subCategoryId?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * Response Status
     * @type {string}
     * @memberof InlineResponse2007
     */
    status?: string;
    /**
     * Items included in the response list
     * @type {Array<InlineResponse2007Payload>}
     * @memberof InlineResponse2007
     */
    payload?: Array<InlineResponse2007Payload>;
}
/**
 * Items included in the response list
 * @export
 * @interface InlineResponse2007Payload
 */
export interface InlineResponse2007Payload {
    /**
     * variant group id used to create the groups
     * @type {string}
     * @memberof InlineResponse2007Payload
     */
    variantGroupId?: string;
    /**
     * count of items having the same variant group id
     * @type {string}
     * @memberof InlineResponse2007Payload
     */
    count?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof InlineResponse2008
     */
    sku: string;
    /**
     * Message confirming the deletion or retirement of an item from the Walmart Catalog
     * @type {string}
     * @memberof InlineResponse2008
     */
    message?: string;
}
/**
 * Items included in the response list
 * @export
 * @interface InlineResponse200Payload
 */
export interface InlineResponse200Payload {
    /**
     * The marketplace name. Example: Walmart_US
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    mart?: InlineResponse200PayloadMartEnum;
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    sku?: string;
    /**
     * The Walmart Product ID assigned by Walmart to the item when listed on Walmart.com
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    wpid?: string;
    /**
     * The 12-digit bar code used extensively for retail packaging in the United States
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    upc?: string;
    /**
     * International Standard Book Number
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    isbn?: string;
    /**
     * Product ID, EANs must be 13 digits in length.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    ean?: string;
    /**
     * The GTIN-compatible Product ID (i.e. UPC or EAN). UPCs must be 12 or 14 digitis in length. EANs must be 13 digits in length.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    gtin?: string;
    /**
     * A unique Id which identifies the item.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    itemId?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the product name. Example: \'Sterling Silver Blue Diamond Heart Pendant with 18in Chain\'
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    productName?: string;
    /**
     * Walmart assigned an item shelf name
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    shelf?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the Product Type. Example: \'Diamond\'
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    productType?: string;
    /**
     * 
     * @type {InlineResponse200Price}
     * @memberof InlineResponse200Payload
     */
    price?: InlineResponse200Price;
    /**
     * Brand of Item.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    brand?: string;
    /**
     * The reviewed times for Items.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    num_reviews?: string;
    /**
     * Customer rating.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    customerRating?: string;
    /**
     * manufacturer of Item.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    manufacturer?: string;
    /**
     * Fulfillment information.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    fulfillmentType?: string;
    /**
     * 
     * @type {InlineResponse200PublishedStatus}
     * @memberof InlineResponse200Payload
     */
    publishedStatus?: InlineResponse200PublishedStatus;
    /**
     * It indicates whether the product is in stock or not.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    inventoryStatus?: string;
    /**
     * The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    lifecycleStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    shop_ref?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    shop_product_id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    shop_variant_id?: string;
    /**
     * Variant Id if the item is of type Variant
     * @type {string}
     * @memberof InlineResponse200Payload
     */
    variantGroupId?: string;
    /**
     * 
     * @type {InlineResponse200VariantGroupInfo}
     * @memberof InlineResponse200Payload
     */
    variantGroupInfo?: InlineResponse200VariantGroupInfo;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200PayloadMartEnum {
    WalmartUs = 'WALMART_US',
    WalmartCa = 'WALMART_CA',
    AsdaGm = 'ASDA_GM',
    WalmartMexico = 'WALMART_MEXICO'
}

/**
 * Specifies item purchase price information, including currency and amount.
 * @export
 * @interface InlineResponse200Price
 */
export interface InlineResponse200Price {
    /**
     * The currency type. Example: USD for US Dollars
     * @type {string}
     * @memberof InlineResponse200Price
     */
    unit?: InlineResponse200PriceUnitEnum;
    /**
     * The numerical amount of the price. Example: 9.99
     * @type {number}
     * @memberof InlineResponse200Price
     */
    amount?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponse200PriceUnitEnum {
    Aed = 'AED',
    Afn = 'AFN',
    All = 'ALL',
    Amd = 'AMD',
    Ang = 'ANG',
    Aoa = 'AOA',
    Ars = 'ARS',
    Aud = 'AUD',
    Awg = 'AWG',
    Azn = 'AZN',
    Bam = 'BAM',
    Bbd = 'BBD',
    Bdt = 'BDT',
    Bgn = 'BGN',
    Bhd = 'BHD',
    Bif = 'BIF',
    Bmd = 'BMD',
    Bnd = 'BND',
    Bob = 'BOB',
    Brl = 'BRL',
    Bsd = 'BSD',
    Btn = 'BTN',
    Bwp = 'BWP',
    Byr = 'BYR',
    Bzd = 'BZD',
    Cad = 'CAD',
    Cdf = 'CDF',
    Chf = 'CHF',
    Clp = 'CLP',
    Cny = 'CNY',
    Cop = 'COP',
    Crc = 'CRC',
    Cup = 'CUP',
    Cve = 'CVE',
    Czk = 'CZK',
    Djf = 'DJF',
    Dkk = 'DKK',
    Dop = 'DOP',
    Dzd = 'DZD',
    Egp = 'EGP',
    Ern = 'ERN',
    Etb = 'ETB',
    Eur = 'EUR',
    Fjd = 'FJD',
    Fkp = 'FKP',
    Gbp = 'GBP',
    Gel = 'GEL',
    Ghs = 'GHS',
    Gip = 'GIP',
    Gmd = 'GMD',
    Gnf = 'GNF',
    Gtq = 'GTQ',
    Gyd = 'GYD',
    Hkd = 'HKD',
    Hnl = 'HNL',
    Hrk = 'HRK',
    Htg = 'HTG',
    Huf = 'HUF',
    Idr = 'IDR',
    Ils = 'ILS',
    Inr = 'INR',
    Iqd = 'IQD',
    Irr = 'IRR',
    Isk = 'ISK',
    Jmd = 'JMD',
    Jod = 'JOD',
    Jpy = 'JPY',
    Kes = 'KES',
    Kgs = 'KGS',
    Khr = 'KHR',
    Kmf = 'KMF',
    Kpw = 'KPW',
    Krw = 'KRW',
    Kwd = 'KWD',
    Kyd = 'KYD',
    Kzt = 'KZT',
    Lak = 'LAK',
    Lbp = 'LBP',
    Lkr = 'LKR',
    Lrd = 'LRD',
    Lsl = 'LSL',
    Ltl = 'LTL',
    Lvl = 'LVL',
    Lyd = 'LYD',
    Mad = 'MAD',
    Mdl = 'MDL',
    Mga = 'MGA',
    Mkd = 'MKD',
    Mmk = 'MMK',
    Mnt = 'MNT',
    Mop = 'MOP',
    Mro = 'MRO',
    Mur = 'MUR',
    Mvr = 'MVR',
    Mwk = 'MWK',
    Mxn = 'MXN',
    Myr = 'MYR',
    Mzn = 'MZN',
    Nad = 'NAD',
    Ngn = 'NGN',
    Nio = 'NIO',
    Nok = 'NOK',
    Npr = 'NPR',
    Nzd = 'NZD',
    Omr = 'OMR',
    Pab = 'PAB',
    Pen = 'PEN',
    Pgk = 'PGK',
    Php = 'PHP',
    Pkr = 'PKR',
    Pln = 'PLN',
    Pyg = 'PYG',
    Qar = 'QAR',
    Ron = 'RON',
    Rsd = 'RSD',
    Rub = 'RUB',
    Rur = 'RUR',
    Rwf = 'RWF',
    Sar = 'SAR',
    Sbd = 'SBD',
    Scr = 'SCR',
    Sdg = 'SDG',
    Sek = 'SEK',
    Sgd = 'SGD',
    Shp = 'SHP',
    Sll = 'SLL',
    Sos = 'SOS',
    Srd = 'SRD',
    Std = 'STD',
    Syp = 'SYP',
    Szl = 'SZL',
    Thb = 'THB',
    Tjs = 'TJS',
    Tmt = 'TMT',
    Tnd = 'TND',
    Top = 'TOP',
    Try = 'TRY',
    Ttd = 'TTD',
    Twd = 'TWD',
    Tzs = 'TZS',
    Uah = 'UAH',
    Ugx = 'UGX',
    Usd = 'USD',
    Uyu = 'UYU',
    Uzs = 'UZS',
    Vef = 'VEF',
    Vnd = 'VND',
    Vuv = 'VUV',
    Wst = 'WST',
    Xaf = 'XAF',
    Xag = 'XAG',
    Xau = 'XAU',
    Xba = 'XBA',
    Xbb = 'XBB',
    Xbc = 'XBC',
    Xbd = 'XBD',
    Xcd = 'XCD',
    Xdr = 'XDR',
    Xfu = 'XFU',
    Xof = 'XOF',
    Xpd = 'XPD',
    Xpf = 'XPF',
    Xpt = 'XPT',
    Xts = 'XTS',
    Xxx = 'XXX',
    Yer = 'YER',
    Zar = 'ZAR',
    Zmk = 'ZMK',
    Zwl = 'ZWL'
}

/**
 * The status of an item when the item is in the submission process. The status can be one of the following: PUBLISHED, READY_TO_PUBLISH, IN_PROGRESS, UNPUBLISHED, STAGE, or SYSTEM_PROBLEM.
 * @export
 * @interface InlineResponse200PublishedStatus
 */
export interface InlineResponse200PublishedStatus {
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof InlineResponse200PublishedStatus
     */
    status?: string;
    /**
     * The Walmart Product ID assigned by Walmart to the item when listed on Walmart.com
     * @type {Array<string>}
     * @memberof InlineResponse200PublishedStatus
     */
    reasons?: Array<string>;
}
/**
 * Additional variant group information if the item is of type Variant
 * @export
 * @interface InlineResponse200VariantGroupInfo
 */
export interface InlineResponse200VariantGroupInfo {
    /**
     * Returns true if the item is a primary variant
     * @type {boolean}
     * @memberof InlineResponse200VariantGroupInfo
     */
    isPrimary?: boolean;
    /**
     * 
     * @type {InlineResponse200VariantGroupInfoGroupingAttributes}
     * @memberof InlineResponse200VariantGroupInfo
     */
    groupingAttributes?: InlineResponse200VariantGroupInfoGroupingAttributes;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200VariantGroupInfo
     */
    primary?: boolean;
}
/**
 * The list of variant attributes used to create the variant item
 * @export
 * @interface InlineResponse200VariantGroupInfoGroupingAttributes
 */
export interface InlineResponse200VariantGroupInfoGroupingAttributes {
    /**
     * Returns true if the item is a primary variant
     * @type {string}
     * @memberof InlineResponse200VariantGroupInfoGroupingAttributes
     */
    name?: string;
    /**
     * The list of variant attributes used to create the variant item
     * @type {string}
     * @memberof InlineResponse200VariantGroupInfoGroupingAttributes
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * Specifies the item identifier generated by Walmart.
     * @type {string}
     * @memberof Item
     */
    itemId?: string;
    /**
     * Specifies whether or not this item is available by other sellers in the Marketplace.
     * @type {boolean}
     * @memberof Item
     */
    isMarketPlaceItem?: boolean;
    /**
     * Provides images associated with the item product listing.
     * @type {Array<InlineResponse2005Images>}
     * @memberof Item
     */
    images?: Array<InlineResponse2005Images>;
    /**
     * 
     * @type {string}
     * @memberof Item
     */
    customerRating?: string;
    /**
     * 
     * @type {InlineResponse2005Price}
     * @memberof Item
     */
    price?: InlineResponse2005Price;
    /**
     * Specifies the catalog item description.
     * @type {string}
     * @memberof Item
     */
    description?: string;
    /**
     * Provides the seller-specified alphanumeric string that uniquely identifies the product name. Example: \'Sterling Silver Blue Diamond Heart Pendant with 18in Chain\'.
     * @type {string}
     * @memberof Item
     */
    title?: string;
    /**
     * Specifies the item brand.
     * @type {string}
     * @memberof Item
     */
    brand?: string;
    /**
     * Provides the seller-specified alphanumeric string that uniquely identifies the Product Type. Example: \'Diamond\'.
     * @type {string}
     * @memberof Item
     */
    productType?: string;
    /**
     * 
     * @type {InlineResponse2005Properties}
     * @memberof Item
     */
    properties?: InlineResponse2005Properties;
}
/**
 * Items included in the response list
 * @export
 * @interface ItemCatalogResponse
 */
export interface ItemCatalogResponse {
    /**
     * The marketplace name. Example: Walmart_US
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    mart?: ItemCatalogResponseMartEnum;
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    sku?: string;
    /**
     * The Walmart Product ID assigned by Walmart to the item when listed on Walmart.com
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    wpid?: string;
    /**
     * The 12-digit bar code used extensively for retail packaging in the United States
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    upc?: string;
    /**
     * International Standard Book Number
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    isbn?: string;
    /**
     * Product ID, EANs must be 13 digits in length.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    ean?: string;
    /**
     * The GTIN-compatible Product ID (i.e. UPC or EAN). UPCs must be 12 or 14 digitis in length. EANs must be 13 digits in length.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    gtin?: string;
    /**
     * A unique Id which identifies the item.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    itemId?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the product name. Example: \'Sterling Silver Blue Diamond Heart Pendant with 18in Chain\'
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    productName?: string;
    /**
     * Walmart assigned an item shelf name
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    shelf?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the Product Type. Example: \'Diamond\'
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    productType?: string;
    /**
     * 
     * @type {InlineResponse200Price}
     * @memberof ItemCatalogResponse
     */
    price?: InlineResponse200Price;
    /**
     * Brand of Item.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    brand?: string;
    /**
     * The reviewed times for Items.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    num_reviews?: string;
    /**
     * Customer rating.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    customerRating?: string;
    /**
     * manufacturer of Item.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    manufacturer?: string;
    /**
     * Fulfillment information.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    fulfillmentType?: string;
    /**
     * 
     * @type {InlineResponse200PublishedStatus}
     * @memberof ItemCatalogResponse
     */
    publishedStatus?: InlineResponse200PublishedStatus;
    /**
     * It indicates whether the product is in stock or not.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    inventoryStatus?: string;
    /**
     * The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    lifecycleStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    shop_ref?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    shop_product_id?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    shop_variant_id?: string;
    /**
     * Variant Id if the item is of type Variant
     * @type {string}
     * @memberof ItemCatalogResponse
     */
    variantGroupId?: string;
    /**
     * 
     * @type {InlineResponse200VariantGroupInfo}
     * @memberof ItemCatalogResponse
     */
    variantGroupInfo?: InlineResponse200VariantGroupInfo;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemCatalogResponseMartEnum {
    WalmartUs = 'WALMART_US',
    WalmartCa = 'WALMART_CA',
    AsdaGm = 'ASDA_GM',
    WalmartMexico = 'WALMART_MEXICO'
}

/**
 * 
 * @export
 * @interface ItemCatalogResponses
 */
export interface ItemCatalogResponses {
    /**
     * Response Status
     * @type {string}
     * @memberof ItemCatalogResponses
     */
    status?: string;
    /**
     * Items included in the response list
     * @type {Array<InlineResponse200Payload>}
     * @memberof ItemCatalogResponses
     */
    payload?: Array<InlineResponse200Payload>;
    /**
     * Total items for the query
     * @type {number}
     * @memberof ItemCatalogResponses
     */
    totalItems?: number;
    /**
     * Number of items shown in this page
     * @type {number}
     * @memberof ItemCatalogResponses
     */
    limit?: number;
    /**
     * Used for pagination to fetch the next set of items
     * @type {string}
     * @memberof ItemCatalogResponses
     */
    nextCursor?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemCatalogResponses
     */
    statuss?: string;
}
/**
 * 
 * @export
 * @interface ItemCatalogSearchPayload
 */
export interface ItemCatalogSearchPayload {
    /**
     * 
     * @type {V3ItemsCatalogSearchQuery}
     * @memberof ItemCatalogSearchPayload
     */
    query?: V3ItemsCatalogSearchQuery;
    /**
     * 
     * @type {Array<V3ItemsCatalogSearchFilters>}
     * @memberof ItemCatalogSearchPayload
     */
    filters?: Array<V3ItemsCatalogSearchFilters>;
    /**
     * 
     * @type {V3ItemsCatalogSearchSort}
     * @memberof ItemCatalogSearchPayload
     */
    sort?: V3ItemsCatalogSearchSort;
}
/**
 * 
 * @export
 * @interface ItemResponse
 */
export interface ItemResponse {
    /**
     * The marketplace name. Example: Walmart_US
     * @type {string}
     * @memberof ItemResponse
     */
    mart?: ItemResponseMartEnum;
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof ItemResponse
     */
    sku: string;
    /**
     * The Walmart Product ID assigned by Walmart to the item when listed on Walmart.com
     * @type {string}
     * @memberof ItemResponse
     */
    wpid?: string;
    /**
     * The 12-digit bar code used extensively for retail packaging in the United States
     * @type {string}
     * @memberof ItemResponse
     */
    upc?: string;
    /**
     * The GTIN-compatible Product ID (i.e. UPC or EAN). UPCs must be 12 or 14 digitis in length. EANs must be 13 digits in length.
     * @type {string}
     * @memberof ItemResponse
     */
    gtin?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the product name. Example: \'Sterling Silver Blue Diamond Heart Pendant with 18in Chain\'
     * @type {string}
     * @memberof ItemResponse
     */
    productName?: string;
    /**
     * Walmart assigned an item shelf name
     * @type {string}
     * @memberof ItemResponse
     */
    shelf?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the Product Type. Example: \'Diamond\'
     * @type {string}
     * @memberof ItemResponse
     */
    productType?: string;
    /**
     * 
     * @type {InlineResponse2003Price}
     * @memberof ItemResponse
     */
    price?: InlineResponse2003Price;
    /**
     * The status of an item when the item is in the submission process. The status can be one of the following: PUBLISHED, READY_TO_PUBLISH, IN_PROGRESS, UNPUBLISHED, STAGE, or SYSTEM_PROBLEM.
     * @type {string}
     * @memberof ItemResponse
     */
    publishedStatus?: string;
    /**
     * 
     * @type {InlineResponse2003AdditionalAttributes}
     * @memberof ItemResponse
     */
    additionalAttributes?: InlineResponse2003AdditionalAttributes;
    /**
     * 
     * @type {InlineResponse2003UnpublishedReasons}
     * @memberof ItemResponse
     */
    unpublishedReasons?: InlineResponse2003UnpublishedReasons;
    /**
     * The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
     * @type {string}
     * @memberof ItemResponse
     */
    lifecycleStatus?: string;
    /**
     * Variant Id  if the item is of type Variant
     * @type {string}
     * @memberof ItemResponse
     */
    variantGroupId?: string;
    /**
     * 
     * @type {InlineResponse200VariantGroupInfo}
     * @memberof ItemResponse
     */
    variantGroupInfo?: InlineResponse200VariantGroupInfo;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemResponseMartEnum {
    WalmartUs = 'WALMART_US',
    WalmartCa = 'WALMART_CA',
    AsdaGm = 'ASDA_GM',
    WalmartMexico = 'WALMART_MEXICO'
}

/**
 * 
 * @export
 * @interface ItemResponseJson
 */
export interface ItemResponseJson {
    /**
     * 
     * @type {InlineResponse2004ResponseRecord}
     * @memberof ItemResponseJson
     */
    responseRecord?: InlineResponse2004ResponseRecord;
}
/**
 * 
 * @export
 * @interface ItemResponseRecord
 */
export interface ItemResponseRecord {
    /**
     * The marketplace name. Example: Walmart_US
     * @type {string}
     * @memberof ItemResponseRecord
     */
    mart?: ItemResponseRecordMartEnum;
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof ItemResponseRecord
     */
    sku: string;
    /**
     * The Walmart Product ID assigned by Walmart to the item when listed on Walmart.com
     * @type {string}
     * @memberof ItemResponseRecord
     */
    wpid?: string;
    /**
     * The 12-digit bar code used extensively for retail packaging in the United States
     * @type {string}
     * @memberof ItemResponseRecord
     */
    upc?: string;
    /**
     * The GTIN-compatible Product ID (i.e. UPC or EAN). UPCs must be 12 or 14 digitis in length. EANs must be 13 digits in length.
     * @type {string}
     * @memberof ItemResponseRecord
     */
    gtin?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the product name. Example: \'Sterling Silver Blue Diamond Heart Pendant with 18in Chain\'
     * @type {string}
     * @memberof ItemResponseRecord
     */
    productName?: string;
    /**
     * Walmart assigned an item shelf name
     * @type {string}
     * @memberof ItemResponseRecord
     */
    shelf?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the Product Type. Example: \'Diamond\'
     * @type {string}
     * @memberof ItemResponseRecord
     */
    productType?: string;
    /**
     * 
     * @type {InlineResponse2003Price}
     * @memberof ItemResponseRecord
     */
    price?: InlineResponse2003Price;
    /**
     * The status of an item when the item is in the submission process. The status can be one of the following: PUBLISHED, READY_TO_PUBLISH, IN_PROGRESS, UNPUBLISHED, STAGE, or SYSTEM_PROBLEM.
     * @type {string}
     * @memberof ItemResponseRecord
     */
    publishedStatus?: string;
    /**
     * 
     * @type {InlineResponse2003AdditionalAttributes}
     * @memberof ItemResponseRecord
     */
    additionalAttributes?: InlineResponse2003AdditionalAttributes;
    /**
     * 
     * @type {InlineResponse2003UnpublishedReasons}
     * @memberof ItemResponseRecord
     */
    unpublishedReasons?: InlineResponse2003UnpublishedReasons;
    /**
     * The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
     * @type {string}
     * @memberof ItemResponseRecord
     */
    lifecycleStatus?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemResponseRecordMartEnum {
    WalmartUs = 'WALMART_US',
    WalmartCa = 'WALMART_CA',
    AsdaGm = 'ASDA_GM',
    WalmartMexico = 'WALMART_MEXICO'
}

/**
 * 
 * @export
 * @interface ItemResponses
 */
export interface ItemResponses {
    /**
     * 
     * @type {Array<InlineResponse2003Errors>}
     * @memberof ItemResponses
     */
    errors?: Array<InlineResponse2003Errors>;
    /**
     * Items included in the response list
     * @type {Array<InlineResponse2003ItemResponse>}
     * @memberof ItemResponses
     */
    ItemResponse: Array<InlineResponse2003ItemResponse>;
    /**
     * 
     * @type {InlineResponse2003AdditionalAttributes}
     * @memberof ItemResponses
     */
    additionalAttributes?: InlineResponse2003AdditionalAttributes;
    /**
     * Total items for the query
     * @type {number}
     * @memberof ItemResponses
     */
    totalItems?: number;
    /**
     * Used for pagination to fetch the next set of items
     * @type {string}
     * @memberof ItemResponses
     */
    nextCursor?: string;
}
/**
 * 
 * @export
 * @interface ItemRetireResponse
 */
export interface ItemRetireResponse {
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof ItemRetireResponse
     */
    sku: string;
    /**
     * Message confirming the deletion or retirement of an item from the Walmart Catalog
     * @type {string}
     * @memberof ItemRetireResponse
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface ItemSearch
 */
export interface ItemSearch {
    /**
     * 
     * @type {Array<InlineResponse2005Items>}
     * @memberof ItemSearch
     */
    items?: Array<InlineResponse2005Items>;
}
/**
 * Specifies item purchase price information, including currency and amount.
 * @export
 * @interface ItemSearchPrice
 */
export interface ItemSearchPrice {
    /**
     * 
     * @type {string}
     * @memberof ItemSearchPrice
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemSearchPrice
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface ItemsAssociationsRequestDTO
 */
export interface ItemsAssociationsRequestDTO {
    /**
     * List of items whose associations need to be fetched. It should not have more than 50 items.
     * @type {Array<V3ItemsAssociationsItems>}
     * @memberof ItemsAssociationsRequestDTO
     */
    items: Array<V3ItemsAssociationsItems>;
}
/**
 * 
 * @export
 * @interface ItemsAssociationsResponseDTO
 */
export interface ItemsAssociationsResponseDTO {
    /**
     * 
     * @type {Array<InlineResponse2001Items>}
     * @memberof ItemsAssociationsResponseDTO
     */
    items: Array<InlineResponse2001Items>;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    field?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    info?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    severity?: ModelErrorSeverityEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    category?: ModelErrorCategoryEnum;
    /**
     * 
     * @type {Array<InlineResponse2001Causes>}
     * @memberof ModelError
     */
    causes?: Array<InlineResponse2001Causes>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ModelError
     */
    errorIdentifiers?: { [key: string]: object; };
}

/**
    * @export
    * @enum {string}
    */
export enum ModelErrorSeverityEnum {
    Info = 'INFO',
    Warn = 'WARN',
    Error = 'ERROR'
}
/**
    * @export
    * @enum {string}
    */
export enum ModelErrorCategoryEnum {
    Application = 'APPLICATION',
    System = 'SYSTEM',
    Request = 'REQUEST',
    Data = 'DATA'
}

/**
 * Specifies item purchase price information, including currency and amount.
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * The currency type. Example: USD for US Dollars
     * @type {string}
     * @memberof Money
     */
    currency?: MoneyCurrencyEnum;
    /**
     * The numerical amount of the price. Example: 9.99
     * @type {number}
     * @memberof Money
     */
    amount?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum MoneyCurrencyEnum {
    Aed = 'AED',
    Afn = 'AFN',
    All = 'ALL',
    Amd = 'AMD',
    Ang = 'ANG',
    Aoa = 'AOA',
    Ars = 'ARS',
    Aud = 'AUD',
    Awg = 'AWG',
    Azn = 'AZN',
    Bam = 'BAM',
    Bbd = 'BBD',
    Bdt = 'BDT',
    Bgn = 'BGN',
    Bhd = 'BHD',
    Bif = 'BIF',
    Bmd = 'BMD',
    Bnd = 'BND',
    Bob = 'BOB',
    Brl = 'BRL',
    Bsd = 'BSD',
    Btn = 'BTN',
    Bwp = 'BWP',
    Byr = 'BYR',
    Bzd = 'BZD',
    Cad = 'CAD',
    Cdf = 'CDF',
    Chf = 'CHF',
    Clp = 'CLP',
    Cny = 'CNY',
    Cop = 'COP',
    Crc = 'CRC',
    Cup = 'CUP',
    Cve = 'CVE',
    Czk = 'CZK',
    Djf = 'DJF',
    Dkk = 'DKK',
    Dop = 'DOP',
    Dzd = 'DZD',
    Egp = 'EGP',
    Ern = 'ERN',
    Etb = 'ETB',
    Eur = 'EUR',
    Fjd = 'FJD',
    Fkp = 'FKP',
    Gbp = 'GBP',
    Gel = 'GEL',
    Ghs = 'GHS',
    Gip = 'GIP',
    Gmd = 'GMD',
    Gnf = 'GNF',
    Gtq = 'GTQ',
    Gyd = 'GYD',
    Hkd = 'HKD',
    Hnl = 'HNL',
    Hrk = 'HRK',
    Htg = 'HTG',
    Huf = 'HUF',
    Idr = 'IDR',
    Ils = 'ILS',
    Inr = 'INR',
    Iqd = 'IQD',
    Irr = 'IRR',
    Isk = 'ISK',
    Jmd = 'JMD',
    Jod = 'JOD',
    Jpy = 'JPY',
    Kes = 'KES',
    Kgs = 'KGS',
    Khr = 'KHR',
    Kmf = 'KMF',
    Kpw = 'KPW',
    Krw = 'KRW',
    Kwd = 'KWD',
    Kyd = 'KYD',
    Kzt = 'KZT',
    Lak = 'LAK',
    Lbp = 'LBP',
    Lkr = 'LKR',
    Lrd = 'LRD',
    Lsl = 'LSL',
    Ltl = 'LTL',
    Lvl = 'LVL',
    Lyd = 'LYD',
    Mad = 'MAD',
    Mdl = 'MDL',
    Mga = 'MGA',
    Mkd = 'MKD',
    Mmk = 'MMK',
    Mnt = 'MNT',
    Mop = 'MOP',
    Mro = 'MRO',
    Mur = 'MUR',
    Mvr = 'MVR',
    Mwk = 'MWK',
    Mxn = 'MXN',
    Myr = 'MYR',
    Mzn = 'MZN',
    Nad = 'NAD',
    Ngn = 'NGN',
    Nio = 'NIO',
    Nok = 'NOK',
    Npr = 'NPR',
    Nzd = 'NZD',
    Omr = 'OMR',
    Pab = 'PAB',
    Pen = 'PEN',
    Pgk = 'PGK',
    Php = 'PHP',
    Pkr = 'PKR',
    Pln = 'PLN',
    Pyg = 'PYG',
    Qar = 'QAR',
    Ron = 'RON',
    Rsd = 'RSD',
    Rub = 'RUB',
    Rur = 'RUR',
    Rwf = 'RWF',
    Sar = 'SAR',
    Sbd = 'SBD',
    Scr = 'SCR',
    Sdg = 'SDG',
    Sek = 'SEK',
    Sgd = 'SGD',
    Shp = 'SHP',
    Sll = 'SLL',
    Sos = 'SOS',
    Srd = 'SRD',
    Std = 'STD',
    Syp = 'SYP',
    Szl = 'SZL',
    Thb = 'THB',
    Tjs = 'TJS',
    Tmt = 'TMT',
    Tnd = 'TND',
    Top = 'TOP',
    Try = 'TRY',
    Ttd = 'TTD',
    Twd = 'TWD',
    Tzs = 'TZS',
    Uah = 'UAH',
    Ugx = 'UGX',
    Usd = 'USD',
    Uyu = 'UYU',
    Uzs = 'UZS',
    Vef = 'VEF',
    Vnd = 'VND',
    Vuv = 'VUV',
    Wst = 'WST',
    Xaf = 'XAF',
    Xag = 'XAG',
    Xau = 'XAU',
    Xba = 'XBA',
    Xbb = 'XBB',
    Xbc = 'XBC',
    Xbd = 'XBD',
    Xcd = 'XCD',
    Xdr = 'XDR',
    Xfu = 'XFU',
    Xof = 'XOF',
    Xpd = 'XPD',
    Xpf = 'XPF',
    Xpt = 'XPT',
    Xts = 'XTS',
    Xxx = 'XXX',
    Yer = 'YER',
    Zar = 'ZAR',
    Zmk = 'ZMK',
    Zwl = 'ZWL'
}

/**
 * 
 * @export
 * @interface NameValueAttribute
 */
export interface NameValueAttribute {
    /**
     * 
     * @type {string}
     * @memberof NameValueAttribute
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof NameValueAttribute
     */
    type: NameValueAttributeTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof NameValueAttribute
     */
    isVariant?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NameValueAttribute
     */
    variantResourceType?: string;
    /**
     * 
     * @type {Array<InlineResponse2003AdditionalAttributesValue>}
     * @memberof NameValueAttribute
     */
    value: Array<InlineResponse2003AdditionalAttributesValue>;
}

/**
    * @export
    * @enum {string}
    */
export enum NameValueAttributeTypeEnum {
    LocalizableText = 'LOCALIZABLE_TEXT',
    String = 'STRING',
    Boolean = 'BOOLEAN',
    Integer = 'INTEGER',
    Decimal = 'DECIMAL',
    Date = 'DATE',
    Timestamp = 'TIMESTAMP'
}

/**
 * Bag of additional attributes
 * @export
 * @interface NameValueAttributes
 */
export interface NameValueAttributes {
    /**
     * 
     * @type {Array<InlineResponse2003AdditionalAttributesNameValueAttribute>}
     * @memberof NameValueAttributes
     */
    nameValueAttribute?: Array<InlineResponse2003AdditionalAttributesNameValueAttribute>;
}
/**
 * Items included in the response list
 * @export
 * @interface Payload
 */
export interface Payload {
    /**
     * variant group id used to create the groups
     * @type {string}
     * @memberof Payload
     */
    variantGroupId?: string;
    /**
     * count of items having the same variant group id
     * @type {string}
     * @memberof Payload
     */
    count?: string;
}
/**
 * Specifies item purchase price information, including currency and amount.
 * @export
 * @interface Price
 */
export interface Price {
    /**
     * The currency type. Example: USD for US Dollars
     * @type {string}
     * @memberof Price
     */
    unit?: PriceUnitEnum;
    /**
     * The numerical amount of the price. Example: 9.99
     * @type {number}
     * @memberof Price
     */
    amount?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum PriceUnitEnum {
    Aed = 'AED',
    Afn = 'AFN',
    All = 'ALL',
    Amd = 'AMD',
    Ang = 'ANG',
    Aoa = 'AOA',
    Ars = 'ARS',
    Aud = 'AUD',
    Awg = 'AWG',
    Azn = 'AZN',
    Bam = 'BAM',
    Bbd = 'BBD',
    Bdt = 'BDT',
    Bgn = 'BGN',
    Bhd = 'BHD',
    Bif = 'BIF',
    Bmd = 'BMD',
    Bnd = 'BND',
    Bob = 'BOB',
    Brl = 'BRL',
    Bsd = 'BSD',
    Btn = 'BTN',
    Bwp = 'BWP',
    Byr = 'BYR',
    Bzd = 'BZD',
    Cad = 'CAD',
    Cdf = 'CDF',
    Chf = 'CHF',
    Clp = 'CLP',
    Cny = 'CNY',
    Cop = 'COP',
    Crc = 'CRC',
    Cup = 'CUP',
    Cve = 'CVE',
    Czk = 'CZK',
    Djf = 'DJF',
    Dkk = 'DKK',
    Dop = 'DOP',
    Dzd = 'DZD',
    Egp = 'EGP',
    Ern = 'ERN',
    Etb = 'ETB',
    Eur = 'EUR',
    Fjd = 'FJD',
    Fkp = 'FKP',
    Gbp = 'GBP',
    Gel = 'GEL',
    Ghs = 'GHS',
    Gip = 'GIP',
    Gmd = 'GMD',
    Gnf = 'GNF',
    Gtq = 'GTQ',
    Gyd = 'GYD',
    Hkd = 'HKD',
    Hnl = 'HNL',
    Hrk = 'HRK',
    Htg = 'HTG',
    Huf = 'HUF',
    Idr = 'IDR',
    Ils = 'ILS',
    Inr = 'INR',
    Iqd = 'IQD',
    Irr = 'IRR',
    Isk = 'ISK',
    Jmd = 'JMD',
    Jod = 'JOD',
    Jpy = 'JPY',
    Kes = 'KES',
    Kgs = 'KGS',
    Khr = 'KHR',
    Kmf = 'KMF',
    Kpw = 'KPW',
    Krw = 'KRW',
    Kwd = 'KWD',
    Kyd = 'KYD',
    Kzt = 'KZT',
    Lak = 'LAK',
    Lbp = 'LBP',
    Lkr = 'LKR',
    Lrd = 'LRD',
    Lsl = 'LSL',
    Ltl = 'LTL',
    Lvl = 'LVL',
    Lyd = 'LYD',
    Mad = 'MAD',
    Mdl = 'MDL',
    Mga = 'MGA',
    Mkd = 'MKD',
    Mmk = 'MMK',
    Mnt = 'MNT',
    Mop = 'MOP',
    Mro = 'MRO',
    Mur = 'MUR',
    Mvr = 'MVR',
    Mwk = 'MWK',
    Mxn = 'MXN',
    Myr = 'MYR',
    Mzn = 'MZN',
    Nad = 'NAD',
    Ngn = 'NGN',
    Nio = 'NIO',
    Nok = 'NOK',
    Npr = 'NPR',
    Nzd = 'NZD',
    Omr = 'OMR',
    Pab = 'PAB',
    Pen = 'PEN',
    Pgk = 'PGK',
    Php = 'PHP',
    Pkr = 'PKR',
    Pln = 'PLN',
    Pyg = 'PYG',
    Qar = 'QAR',
    Ron = 'RON',
    Rsd = 'RSD',
    Rub = 'RUB',
    Rur = 'RUR',
    Rwf = 'RWF',
    Sar = 'SAR',
    Sbd = 'SBD',
    Scr = 'SCR',
    Sdg = 'SDG',
    Sek = 'SEK',
    Sgd = 'SGD',
    Shp = 'SHP',
    Sll = 'SLL',
    Sos = 'SOS',
    Srd = 'SRD',
    Std = 'STD',
    Syp = 'SYP',
    Szl = 'SZL',
    Thb = 'THB',
    Tjs = 'TJS',
    Tmt = 'TMT',
    Tnd = 'TND',
    Top = 'TOP',
    Try = 'TRY',
    Ttd = 'TTD',
    Twd = 'TWD',
    Tzs = 'TZS',
    Uah = 'UAH',
    Ugx = 'UGX',
    Usd = 'USD',
    Uyu = 'UYU',
    Uzs = 'UZS',
    Vef = 'VEF',
    Vnd = 'VND',
    Vuv = 'VUV',
    Wst = 'WST',
    Xaf = 'XAF',
    Xag = 'XAG',
    Xau = 'XAU',
    Xba = 'XBA',
    Xbb = 'XBB',
    Xbc = 'XBC',
    Xbd = 'XBD',
    Xcd = 'XCD',
    Xdr = 'XDR',
    Xfu = 'XFU',
    Xof = 'XOF',
    Xpd = 'XPD',
    Xpf = 'XPF',
    Xpt = 'XPT',
    Xts = 'XTS',
    Xxx = 'XXX',
    Yer = 'YER',
    Zar = 'ZAR',
    Zmk = 'ZMK',
    Zwl = 'ZWL'
}

/**
 * 
 * @export
 * @interface Properties
 */
export interface Properties {
    /**
     * 
     * @type {string}
     * @memberof Properties
     */
    variant_items_num?: string;
    /**
     * 
     * @type {string}
     * @memberof Properties
     */
    num_reviews?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Properties
     */
    categories?: Array<string>;
    /**
     * 
     * @type {InlineResponse2005PropertiesVariants}
     * @memberof Properties
     */
    variants?: InlineResponse2005PropertiesVariants;
    /**
     * 
     * @type {boolean}
     * @memberof Properties
     */
    next_day_eligible?: boolean;
}
/**
 * The status of an item when the item is in the submission process. The status can be one of the following: PUBLISHED, READY_TO_PUBLISH, IN_PROGRESS, UNPUBLISHED, STAGE, or SYSTEM_PROBLEM.
 * @export
 * @interface PublishedStatus
 */
export interface PublishedStatus {
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof PublishedStatus
     */
    status?: string;
    /**
     * The Walmart Product ID assigned by Walmart to the item when listed on Walmart.com
     * @type {Array<string>}
     * @memberof PublishedStatus
     */
    reasons?: Array<string>;
}
/**
 * 
 * @export
 * @interface Query
 */
export interface Query {
    /**
     * | Attribute | Description | Data Type | --- | ----------- | ------- | productName | Product Name, can do white card search | string | | sku | An arbitrary alphanumeric unique ID, seller-specified, identifying each item | string | | gtin | Specifies a Global Trade Item Number (GTIN) search. GTIN must be 14 digits. | string | | wpid | The Walmart Product ID assigned by Walmart to the item when listed on Walmart.com | string | | upc | Specifies a Universal Product Code (UPC) search. UPC must be 12 digits. | string | | isbn | International Standard Book Number | string | | ean | Product ID, EANs must be 13 digits in length. | string | | itemId | A unique Id which identifies the item | string |   | variantGroupId | Variant Id to retrieve all items with the same variant id | string |
     * @type {string}
     * @memberof Query
     */
    field?: QueryFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof Query
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum QueryFieldEnum {
    ProductName = 'productName',
    Sku = 'sku',
    Gtin = 'gtin',
    Wpid = 'wpid',
    Upc = 'upc',
    Isbn = 'isbn',
    Ean = 'ean',
    ItemId = 'itemId'
}

/**
 * List of items whose associations need to be fetched. It should not have more than 50 items.
 * @export
 * @interface RequestItem
 */
export interface RequestItem {
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof RequestItem
     */
    sku: string;
}
/**
 * 
 * @export
 * @interface ResponseItem
 */
export interface ResponseItem {
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof ResponseItem
     */
    sku: string;
    /**
     * Item Associations like shippingTemplate, shipNode.
     * @type {Array<InlineResponse2001Associations>}
     * @memberof ResponseItem
     */
    associations?: Array<InlineResponse2001Associations>;
    /**
     * 
     * @type {Array<InlineResponse2001Errors>}
     * @memberof ResponseItem
     */
    errors?: Array<InlineResponse2001Errors>;
}
/**
 * Information about Shipping Template
 * @export
 * @interface ShippingTemplate
 */
export interface ShippingTemplate {
    /**
     * Shipping Template Name
     * @type {string}
     * @memberof ShippingTemplate
     */
    name?: string;
    /**
     * Shipping Template Type
     * @type {string}
     * @memberof ShippingTemplate
     */
    type?: ShippingTemplateTypeEnum;
    /**
     * Shipping Template ID
     * @type {string}
     * @memberof ShippingTemplate
     */
    id?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ShippingTemplateTypeEnum {
    Default = 'DEFAULT',
    Custom = 'CUSTOM',
    Deliverr = 'DELIVERR'
}

/**
 * 
 * @export
 * @interface Sort
 */
export interface Sort {
    /**
     * | Attribute | Description | Data Type | --- | ----------- | ------- | num_reviews | The revied number for Items | string | | customerRating | An arbitrary alphanumeric unique ID, seller-specified, identifying each item | string | | lifecycleStatus | The lifecycle status of an item describes where the item listing is in the overall lifecycle | string | | publishedStatus | The published status of an item describes where the item is in the submission process | string | | unpublishedReasons | It outlines the reason for an item when unpublished | string | | inventoryStatus | It indicates whether the product is in stock or not | string |
     * @type {string}
     * @memberof Sort
     */
    field?: SortFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof Sort
     */
    order?: SortOrderEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum SortFieldEnum {
    NumReviews = 'num_reviews',
    CustomerRating = 'customerRating',
    LifecycleStatus = 'lifecycleStatus',
    PublishedStatus = 'publishedStatus',
    UnpublishedReasons = 'unpublishedReasons',
    InventoryStatus = 'inventoryStatus'
}
/**
    * @export
    * @enum {string}
    */
export enum SortOrderEnum {
    Asc = 'ASC',
    Desc = 'DESC'
}

/**
 * Specific kind of category
 * @export
 * @interface SubCategory
 */
export interface SubCategory {
    /**
     * Name of specific kind of category
     * @type {string}
     * @memberof SubCategory
     */
    subCategoryName?: string;
    /**
     * ID of specific kind of category
     * @type {string}
     * @memberof SubCategory
     */
    subCategoryId?: string;
}
/**
 * 
 * @export
 * @interface TaxonomyResponseDTO
 */
export interface TaxonomyResponseDTO {
    /**
     * 
     * @type {string}
     * @memberof TaxonomyResponseDTO
     */
    status?: string;
    /**
     * 
     * @type {Array<InlineResponse2006Payload>}
     * @memberof TaxonomyResponseDTO
     */
    payload?: Array<InlineResponse2006Payload>;
}
/**
 * It outlines the reason for an item when unpublished ,that is, when \'publishedStatus\' is set to \'UNPUBLISHED\'.
 * @export
 * @interface UnpublishedReasonList
 */
export interface UnpublishedReasonList {
    /**
     * 
     * @type {Array<string>}
     * @memberof UnpublishedReasonList
     */
    reason?: Array<string>;
}
/**
 * List of items whose associations need to be fetched. It should not have more than 50 items.
 * @export
 * @interface V3ItemsAssociationsItems
 */
export interface V3ItemsAssociationsItems {
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item.
     * @type {string}
     * @memberof V3ItemsAssociationsItems
     */
    sku: string;
}
/**
 * 
 * @export
 * @interface V3ItemsCatalogSearchFilters
 */
export interface V3ItemsCatalogSearchFilters {
    /**
     * | Attribute | Description | Data Type | --- | ----------- | ------- | num_reviews | The reviewed times for Items | string | | customerRating | Customer rating | string | | lifecycleStatus | The lifecycle status of an item describes where the item listing is in the overall lifecycle | string | | publishedStatus | The published status of an item describes where the item is in the submission process | string | | unpublishedReasons | It outlines the reason for an item when unpublished | string | | inventoryStatus | It indicates whether the product is in stock or not | string | | price | Price of the Item | string | | fulfillmentType | Fulfillment information | string |
     * @type {string}
     * @memberof V3ItemsCatalogSearchFilters
     */
    field?: V3ItemsCatalogSearchFiltersFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof V3ItemsCatalogSearchFilters
     */
    op?: V3ItemsCatalogSearchFiltersOpEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof V3ItemsCatalogSearchFilters
     */
    values?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum V3ItemsCatalogSearchFiltersFieldEnum {
    NumReviews = 'num_reviews',
    CustomerRating = 'customerRating',
    LifecycleStatus = 'lifecycleStatus',
    PublishedStatus = 'publishedStatus',
    UnpublishedReasons = 'unpublishedReasons',
    InventoryStatus = 'inventoryStatus',
    Price = 'price',
    FulfillmentType = 'fulfillmentType'
}
/**
    * @export
    * @enum {string}
    */
export enum V3ItemsCatalogSearchFiltersOpEnum {
    Equals = 'equals',
    Between = 'between',
    GreaterThan = 'greater_than',
    LessThan = 'less_than'
}

/**
 * 
 * @export
 * @interface V3ItemsCatalogSearchQuery
 */
export interface V3ItemsCatalogSearchQuery {
    /**
     * | Attribute | Description | Data Type | --- | ----------- | ------- | productName | Product Name, can do white card search | string | | sku | An arbitrary alphanumeric unique ID, seller-specified, identifying each item | string | | gtin | Specifies a Global Trade Item Number (GTIN) search. GTIN must be 14 digits. | string | | wpid | The Walmart Product ID assigned by Walmart to the item when listed on Walmart.com | string | | upc | Specifies a Universal Product Code (UPC) search. UPC must be 12 digits. | string | | isbn | International Standard Book Number | string | | ean | Product ID, EANs must be 13 digits in length. | string | | itemId | A unique Id which identifies the item | string |   | variantGroupId | Variant Id to retrieve all items with the same variant id | string |
     * @type {string}
     * @memberof V3ItemsCatalogSearchQuery
     */
    field?: V3ItemsCatalogSearchQueryFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof V3ItemsCatalogSearchQuery
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum V3ItemsCatalogSearchQueryFieldEnum {
    ProductName = 'productName',
    Sku = 'sku',
    Gtin = 'gtin',
    Wpid = 'wpid',
    Upc = 'upc',
    Isbn = 'isbn',
    Ean = 'ean',
    ItemId = 'itemId'
}

/**
 * 
 * @export
 * @interface V3ItemsCatalogSearchSort
 */
export interface V3ItemsCatalogSearchSort {
    /**
     * | Attribute | Description | Data Type | --- | ----------- | ------- | num_reviews | The revied number for Items | string | | customerRating | An arbitrary alphanumeric unique ID, seller-specified, identifying each item | string | | lifecycleStatus | The lifecycle status of an item describes where the item listing is in the overall lifecycle | string | | publishedStatus | The published status of an item describes where the item is in the submission process | string | | unpublishedReasons | It outlines the reason for an item when unpublished | string | | inventoryStatus | It indicates whether the product is in stock or not | string |
     * @type {string}
     * @memberof V3ItemsCatalogSearchSort
     */
    field?: V3ItemsCatalogSearchSortFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof V3ItemsCatalogSearchSort
     */
    order?: V3ItemsCatalogSearchSortOrderEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum V3ItemsCatalogSearchSortFieldEnum {
    NumReviews = 'num_reviews',
    CustomerRating = 'customerRating',
    LifecycleStatus = 'lifecycleStatus',
    PublishedStatus = 'publishedStatus',
    UnpublishedReasons = 'unpublishedReasons',
    InventoryStatus = 'inventoryStatus'
}
/**
    * @export
    * @enum {string}
    */
export enum V3ItemsCatalogSearchSortOrderEnum {
    Asc = 'ASC',
    Desc = 'DESC'
}

/**
 * 
 * @export
 * @interface VariantCountResponses
 */
export interface VariantCountResponses {
    /**
     * Response Status
     * @type {string}
     * @memberof VariantCountResponses
     */
    status?: string;
    /**
     * Items included in the response list
     * @type {Array<InlineResponse2007Payload>}
     * @memberof VariantCountResponses
     */
    payload?: Array<InlineResponse2007Payload>;
}
/**
 * 
 * @export
 * @interface VariantDatum
 */
export interface VariantDatum {
    /**
     * 
     * @type {string}
     * @memberof VariantDatum
     */
    productImageUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof VariantDatum
     */
    itemId?: string;
    /**
     * 
     * @type {string}
     * @memberof VariantDatum
     */
    isAvailable?: string;
    /**
     * 
     * @type {string}
     * @memberof VariantDatum
     */
    title?: string;
    /**
     * 
     * @type {Array<InlineResponse2005PropertiesVariantsVariantValues>}
     * @memberof VariantDatum
     */
    variantValues?: Array<InlineResponse2005PropertiesVariantsVariantValues>;
}
/**
 * Additional variant group information if the item is of type Variant
 * @export
 * @interface VariantGroupInfo
 */
export interface VariantGroupInfo {
    /**
     * Returns true if the item is a primary variant
     * @type {boolean}
     * @memberof VariantGroupInfo
     */
    isPrimary?: boolean;
    /**
     * 
     * @type {InlineResponse200VariantGroupInfoGroupingAttributes}
     * @memberof VariantGroupInfo
     */
    groupingAttributes?: InlineResponse200VariantGroupInfoGroupingAttributes;
    /**
     * 
     * @type {boolean}
     * @memberof VariantGroupInfo
     */
    primary?: boolean;
}
/**
 * 
 * @export
 * @interface VariantMetum
 */
export interface VariantMetum {
    /**
     * 
     * @type {string}
     * @memberof VariantMetum
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface VariantValue
 */
export interface VariantValue {
    /**
     * 
     * @type {string}
     * @memberof VariantValue
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof VariantValue
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface Variants
 */
export interface Variants {
    /**
     * 
     * @type {Array<InlineResponse2005PropertiesVariantsVariantMeta>}
     * @memberof Variants
     */
    variantMeta?: Array<InlineResponse2005PropertiesVariantsVariantMeta>;
    /**
     * 
     * @type {Array<InlineResponse2005PropertiesVariantsVariantData>}
     * @memberof Variants
     */
    variantData?: Array<InlineResponse2005PropertiesVariantsVariantData>;
}

/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Displays a list of all items by using either nextCursor or offset and limit query parameters
         * @summary All items
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [nextCursor] Used for pagination when more than 200 items are retrieved.nextCursor value received in response will be same for all subsequent page requests.
         * @param {string} [sku] An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item.
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
         * @param {string} [limit] The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
         * @param {string} [lifecycleStatus] The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
         * @param {string} [publishedStatus] The published status of an item describes where the item is in the submission process. Examples of allowed values are PUBLISHED, UNPUBLISHED.
         * @param {string} [variantGroupId] Variant Id to retrieve all items with the same variant id
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllItems: async (wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, nextCursor?: string, sku?: string, offset?: string, limit?: string, lifecycleStatus?: string, publishedStatus?: string, variantGroupId?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getAllItems', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getAllItems', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getAllItems', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextCursor !== undefined) {
                localVarQueryParameter['nextCursor'] = nextCursor;
            }

            if (sku !== undefined) {
                localVarQueryParameter['sku'] = sku;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (lifecycleStatus !== undefined) {
                localVarQueryParameter['lifecycleStatus'] = lifecycleStatus;
            }

            if (publishedStatus !== undefined) {
                localVarQueryParameter['publishedStatus'] = publishedStatus;
            }

            if (variantGroupId !== undefined) {
                localVarQueryParameter['variantGroupId'] = variantGroupId;
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves an item and displays the item details.
         * @summary An item
         * @param {string} id Represents the seller-specified unique ID for each item. Takes SKU code by default. If you require more specific item codes, such as GTIN, UPC, ISBN, EAN, or ITEM_ID, you need to use the productIdType query parameter and specify the desired code e.g. productIdType&#x3D;GTIN.
         * @param {'GTIN' | 'UPC' | 'ISBN' | 'EAN' | 'SKU' | 'ITEM_ID'} productIdType Item code type specifier allows to filter by specific code type, (e.g. GTIN).
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnItem: async (id: string, productIdType: 'GTIN' | 'UPC' | 'ISBN' | 'EAN' | 'SKU' | 'ITEM_ID', wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnItem', 'id', id)
            // verify required parameter 'productIdType' is not null or undefined
            assertParamExists('getAnItem', 'productIdType', productIdType)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getAnItem', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getAnItem', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getAnItem', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (productIdType !== undefined) {
                localVarQueryParameter['productIdType'] = productIdType;
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Catalog Search Result
         * @summary Catalog Search
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject} inlineObject 
         * @param {number} [page] number of page
         * @param {number} [limit] number of items
         * @param {string} [nextCursor] nextCursor
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogSearch: async (wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject: InlineObject, page?: number, limit?: number, nextCursor?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getCatalogSearch', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getCatalogSearch', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getCatalogSearch', 'wMSVCNAME', wMSVCNAME)
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('getCatalogSearch', 'inlineObject', inlineObject)
            const localVarPath = `/v3/items/catalog/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (nextCursor !== undefined) {
                localVarQueryParameter['nextCursor'] = nextCursor;
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get total count of items based on status
         * @summary Get items count by status
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {'PUBLISHED' | 'UNPUBLISHED' | 'SYSTEM_PROBLEM' | 'IN_PROGRESS' | 'ALL'} [status] Status of Item
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountByStatus: async (wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, status?: 'PUBLISHED' | 'UNPUBLISHED' | 'SYSTEM_PROBLEM' | 'IN_PROGRESS' | 'ALL', wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getCountByStatus', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getCountByStatus', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getCountByStatus', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/items/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Item Associations API allows you to retrieve shippingTemplate and shipNode associated with the provided items.
         * @summary Get Item Associations
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject1} inlineObject1 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemAssociations: async (wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject1: InlineObject1, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getItemAssociations', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getItemAssociations', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getItemAssociations', 'wMSVCNAME', wMSVCNAME)
            // verify required parameter 'inlineObject1' is not null or undefined
            assertParamExists('getItemAssociations', 'inlineObject1', inlineObject1)
            const localVarPath = `/v3/items/associations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Item Search API allows you to query the Walmart.com global product catalog by item keyword, UPC or GTIN. You can review all item information provided in the response, so you can decide whether or not you want to sell this item.  You must specify at least one query parameter, either: \'query\', \'gtin\', or \'upc\'. If there are more than one item in the catalog, the search returns the first 20 items in the response.  Additionally, you can use the information provided in the \'relatedQueries\' response parameter to run a new search for similar items.
         * @summary Item Search
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [query] Specifies a keyword search as a String.
         * @param {string} [upc] Specifies a Universal Product Code (UPC) search. UPC must be 12 digits.
         * @param {string} [gtin] Specifies a Global Trade Item Number (GTIN) search. GTIN must be 14 digits.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchResult: async (wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, query?: string, upc?: string, gtin?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getSearchResult', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getSearchResult', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getSearchResult', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/items/walmart/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (upc !== undefined) {
                localVarQueryParameter['upc'] = upc;
            }

            if (gtin !== undefined) {
                localVarQueryParameter['gtin'] = gtin;
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Taxonomy API exposes the category taxonomy that Walmart.com uses to categorize items. It describes the Departments, Categories, and Subcategories levels available on Walmart.com. You can specify the exact category as a parameter when using any of the following APIs:  -   Search-   Data feeds-   Special feeds, to includePre-order, Best Sellers, Rollbacks, Clearance, and Special Buys  For example, you can restrict the Search API to search within a category by supplying the ID through the taxonomy. Similarly, you can use the Feed API to download category-specific feeds by specifying a category ID.
         * @summary Taxonomy
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxonomyResponse: async (wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getTaxonomyResponse', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getTaxonomyResponse', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getTaxonomyResponse', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/items/taxonomy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get total count of items based on variant group information
         * @summary Get item count by groups
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [variantGroupId] Variant Id to retrieve
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariantCount: async (wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, variantGroupId?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getVariantCount', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getVariantCount', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getVariantCount', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/items/groups/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variantGroupId !== undefined) {
                localVarQueryParameter['variantGroupId'] = variantGroupId;
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Use this API for initial item setup and maintenance.  This API updates items in bulk. You can update 10,000 items at once; updates with more than 10,000 items are not supported. Keep feed sizes below 10 MB, except for FITMENT_ACES and FITMENT_PIES, to ensure optimal feed processing time. For FITMENT_PIES and FITMENT_ACES feeds, files upto 25 MB are supported.  You can use the Bulk Item Setup API for any of the following item spec versions, just specify the corresponding feed type as a query parameter.  *   Item spec version 4.8 feed type: MP_ITEM *   WFS Item spec version 4.3 feed type: MP_WFS_ITEM  *   WFS Maintenance spec version 4.8 feed type: MP_MAINTENANCE *   Set up item by match 4.1 feed type: MP_ITEM_MATCH  *   Convert an existing item to WFS 4.5 feed type : OMNI_WFS  *   For Fitment feed type FITMENT_ACES and FITMENT_PIES, zip file needs to be added in the request body. While uploading the fitment feeds, it is mandatory to add boundary parameter in Content-Type header. For example, Content-Type: multipart/form-data;boundary=\"----custom boundary\". Without a boundary parameter, fitment feeds will fail to process. For details refer to the guide link below  
         * @summary Bulk Item Setup (Multiple)
         * @param {'item' | 'RETIRE_ITEM' | 'MP_ITEM' | 'MP_WFS_ITEM' | 'MP_ITEM_MATCH' | 'MP_MAINTENANCE' | 'SKU_TEMPLATE_MAP' | 'SHIPPING_OVERRIDES' | 'OMNI_WFS' | 'FITMENT_ACES' | 'FITMENT_PIES'} feedType The feed Type
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {any} file 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemBulkUploads: async (feedType: 'item' | 'RETIRE_ITEM' | 'MP_ITEM' | 'MP_WFS_ITEM' | 'MP_ITEM_MATCH' | 'MP_MAINTENANCE' | 'SKU_TEMPLATE_MAP' | 'SHIPPING_OVERRIDES' | 'OMNI_WFS' | 'FITMENT_ACES' | 'FITMENT_PIES', wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, file: any, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedType' is not null or undefined
            assertParamExists('itemBulkUploads', 'feedType', feedType)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('itemBulkUploads', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('itemBulkUploads', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('itemBulkUploads', 'wMSVCNAME', wMSVCNAME)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('itemBulkUploads', 'file', file)
            const localVarPath = `/v3/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (feedType !== undefined) {
                localVarQueryParameter['feedType'] = feedType;
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completely deactivates and un-publishes an item from the site.
         * @summary Retire an item
         * @param {string} sKU An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: \&#39;:\&#39;, \&#39;/\&#39;, \&#39;?\&#39;, \&#39;#\&#39;, \&#39;[\&#39;, \&#39;]\&#39;, \&#39;@\&#39;, \&#39;!\&#39;, \&#39;$\&#39;, \&#39;&amp;\&#39;, \&quot;\&#39;\&quot;, \&#39;(\&#39;, \&#39;)\&#39;, \&#39;*\&#39;, \&#39;+\&#39;, \&#39;,\&#39;, \&#39;;\&#39;, \&#39;&#x3D;\&#39;, as well as \&#39;%\&#39; itself. Other characters don\&#39;t need to be encoded.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retireAnItem: async (sKU: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sKU' is not null or undefined
            assertParamExists('retireAnItem', 'sKU', sKU)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('retireAnItem', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('retireAnItem', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('retireAnItem', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/items/{SKU}`
                .replace(`{${"SKU"}}`, encodeURIComponent(String(sKU)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Displays a list of all items by using either nextCursor or offset and limit query parameters
         * @summary All items
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [nextCursor] Used for pagination when more than 200 items are retrieved.nextCursor value received in response will be same for all subsequent page requests.
         * @param {string} [sku] An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item.
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
         * @param {string} [limit] The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
         * @param {string} [lifecycleStatus] The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
         * @param {string} [publishedStatus] The published status of an item describes where the item is in the submission process. Examples of allowed values are PUBLISHED, UNPUBLISHED.
         * @param {string} [variantGroupId] Variant Id to retrieve all items with the same variant id
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllItems(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, nextCursor?: string, sku?: string, offset?: string, limit?: string, lifecycleStatus?: string, publishedStatus?: string, variantGroupId?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllItems(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, nextCursor, sku, offset, limit, lifecycleStatus, publishedStatus, variantGroupId, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves an item and displays the item details.
         * @summary An item
         * @param {string} id Represents the seller-specified unique ID for each item. Takes SKU code by default. If you require more specific item codes, such as GTIN, UPC, ISBN, EAN, or ITEM_ID, you need to use the productIdType query parameter and specify the desired code e.g. productIdType&#x3D;GTIN.
         * @param {'GTIN' | 'UPC' | 'ISBN' | 'EAN' | 'SKU' | 'ITEM_ID'} productIdType Item code type specifier allows to filter by specific code type, (e.g. GTIN).
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnItem(id: string, productIdType: 'GTIN' | 'UPC' | 'ISBN' | 'EAN' | 'SKU' | 'ITEM_ID', wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnItem(id, productIdType, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Catalog Search Result
         * @summary Catalog Search
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject} inlineObject 
         * @param {number} [page] number of page
         * @param {number} [limit] number of items
         * @param {string} [nextCursor] nextCursor
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatalogSearch(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject: InlineObject, page?: number, limit?: number, nextCursor?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCatalogSearch(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject, page, limit, nextCursor, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get total count of items based on status
         * @summary Get items count by status
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {'PUBLISHED' | 'UNPUBLISHED' | 'SYSTEM_PROBLEM' | 'IN_PROGRESS' | 'ALL'} [status] Status of Item
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountByStatus(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, status?: 'PUBLISHED' | 'UNPUBLISHED' | 'SYSTEM_PROBLEM' | 'IN_PROGRESS' | 'ALL', wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCountByStatus(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, status, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Item Associations API allows you to retrieve shippingTemplate and shipNode associated with the provided items.
         * @summary Get Item Associations
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject1} inlineObject1 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemAssociations(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject1: InlineObject1, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemAssociations(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject1, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The Item Search API allows you to query the Walmart.com global product catalog by item keyword, UPC or GTIN. You can review all item information provided in the response, so you can decide whether or not you want to sell this item.  You must specify at least one query parameter, either: \'query\', \'gtin\', or \'upc\'. If there are more than one item in the catalog, the search returns the first 20 items in the response.  Additionally, you can use the information provided in the \'relatedQueries\' response parameter to run a new search for similar items.
         * @summary Item Search
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [query] Specifies a keyword search as a String.
         * @param {string} [upc] Specifies a Universal Product Code (UPC) search. UPC must be 12 digits.
         * @param {string} [gtin] Specifies a Global Trade Item Number (GTIN) search. GTIN must be 14 digits.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSearchResult(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, query?: string, upc?: string, gtin?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSearchResult(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, query, upc, gtin, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The Taxonomy API exposes the category taxonomy that Walmart.com uses to categorize items. It describes the Departments, Categories, and Subcategories levels available on Walmart.com. You can specify the exact category as a parameter when using any of the following APIs:  -   Search-   Data feeds-   Special feeds, to includePre-order, Best Sellers, Rollbacks, Clearance, and Special Buys  For example, you can restrict the Search API to search within a category by supplying the ID through the taxonomy. Similarly, you can use the Feed API to download category-specific feeds by specifying a category ID.
         * @summary Taxonomy
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaxonomyResponse(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaxonomyResponse(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get total count of items based on variant group information
         * @summary Get item count by groups
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [variantGroupId] Variant Id to retrieve
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVariantCount(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, variantGroupId?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVariantCount(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, variantGroupId, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *  Use this API for initial item setup and maintenance.  This API updates items in bulk. You can update 10,000 items at once; updates with more than 10,000 items are not supported. Keep feed sizes below 10 MB, except for FITMENT_ACES and FITMENT_PIES, to ensure optimal feed processing time. For FITMENT_PIES and FITMENT_ACES feeds, files upto 25 MB are supported.  You can use the Bulk Item Setup API for any of the following item spec versions, just specify the corresponding feed type as a query parameter.  *   Item spec version 4.8 feed type: MP_ITEM *   WFS Item spec version 4.3 feed type: MP_WFS_ITEM  *   WFS Maintenance spec version 4.8 feed type: MP_MAINTENANCE *   Set up item by match 4.1 feed type: MP_ITEM_MATCH  *   Convert an existing item to WFS 4.5 feed type : OMNI_WFS  *   For Fitment feed type FITMENT_ACES and FITMENT_PIES, zip file needs to be added in the request body. While uploading the fitment feeds, it is mandatory to add boundary parameter in Content-Type header. For example, Content-Type: multipart/form-data;boundary=\"----custom boundary\". Without a boundary parameter, fitment feeds will fail to process. For details refer to the guide link below  
         * @summary Bulk Item Setup (Multiple)
         * @param {'item' | 'RETIRE_ITEM' | 'MP_ITEM' | 'MP_WFS_ITEM' | 'MP_ITEM_MATCH' | 'MP_MAINTENANCE' | 'SKU_TEMPLATE_MAP' | 'SHIPPING_OVERRIDES' | 'OMNI_WFS' | 'FITMENT_ACES' | 'FITMENT_PIES'} feedType The feed Type
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {any} file 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemBulkUploads(feedType: 'item' | 'RETIRE_ITEM' | 'MP_ITEM' | 'MP_WFS_ITEM' | 'MP_ITEM_MATCH' | 'MP_MAINTENANCE' | 'SKU_TEMPLATE_MAP' | 'SHIPPING_OVERRIDES' | 'OMNI_WFS' | 'FITMENT_ACES' | 'FITMENT_PIES', wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, file: any, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemBulkUploads(feedType, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, file, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Completely deactivates and un-publishes an item from the site.
         * @summary Retire an item
         * @param {string} sKU An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: \&#39;:\&#39;, \&#39;/\&#39;, \&#39;?\&#39;, \&#39;#\&#39;, \&#39;[\&#39;, \&#39;]\&#39;, \&#39;@\&#39;, \&#39;!\&#39;, \&#39;$\&#39;, \&#39;&amp;\&#39;, \&quot;\&#39;\&quot;, \&#39;(\&#39;, \&#39;)\&#39;, \&#39;*\&#39;, \&#39;+\&#39;, \&#39;,\&#39;, \&#39;;\&#39;, \&#39;&#x3D;\&#39;, as well as \&#39;%\&#39; itself. Other characters don\&#39;t need to be encoded.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retireAnItem(sKU: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retireAnItem(sKU, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * Displays a list of all items by using either nextCursor or offset and limit query parameters
         * @summary All items
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [nextCursor] Used for pagination when more than 200 items are retrieved.nextCursor value received in response will be same for all subsequent page requests.
         * @param {string} [sku] An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item.
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
         * @param {string} [limit] The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
         * @param {string} [lifecycleStatus] The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
         * @param {string} [publishedStatus] The published status of an item describes where the item is in the submission process. Examples of allowed values are PUBLISHED, UNPUBLISHED.
         * @param {string} [variantGroupId] Variant Id to retrieve all items with the same variant id
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllItems(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, nextCursor?: string, sku?: string, offset?: string, limit?: string, lifecycleStatus?: string, publishedStatus?: string, variantGroupId?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getAllItems(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, nextCursor, sku, offset, limit, lifecycleStatus, publishedStatus, variantGroupId, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves an item and displays the item details.
         * @summary An item
         * @param {string} id Represents the seller-specified unique ID for each item. Takes SKU code by default. If you require more specific item codes, such as GTIN, UPC, ISBN, EAN, or ITEM_ID, you need to use the productIdType query parameter and specify the desired code e.g. productIdType&#x3D;GTIN.
         * @param {'GTIN' | 'UPC' | 'ISBN' | 'EAN' | 'SKU' | 'ITEM_ID'} productIdType Item code type specifier allows to filter by specific code type, (e.g. GTIN).
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnItem(id: string, productIdType: 'GTIN' | 'UPC' | 'ISBN' | 'EAN' | 'SKU' | 'ITEM_ID', wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getAnItem(id, productIdType, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Catalog Search Result
         * @summary Catalog Search
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject} inlineObject 
         * @param {number} [page] number of page
         * @param {number} [limit] number of items
         * @param {string} [nextCursor] nextCursor
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogSearch(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject: InlineObject, page?: number, limit?: number, nextCursor?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getCatalogSearch(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject, page, limit, nextCursor, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Get total count of items based on status
         * @summary Get items count by status
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {'PUBLISHED' | 'UNPUBLISHED' | 'SYSTEM_PROBLEM' | 'IN_PROGRESS' | 'ALL'} [status] Status of Item
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountByStatus(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, status?: 'PUBLISHED' | 'UNPUBLISHED' | 'SYSTEM_PROBLEM' | 'IN_PROGRESS' | 'ALL', wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<string> {
            return localVarFp.getCountByStatus(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, status, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Item Associations API allows you to retrieve shippingTemplate and shipNode associated with the provided items.
         * @summary Get Item Associations
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject1} inlineObject1 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemAssociations(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject1: InlineObject1, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getItemAssociations(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject1, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * The Item Search API allows you to query the Walmart.com global product catalog by item keyword, UPC or GTIN. You can review all item information provided in the response, so you can decide whether or not you want to sell this item.  You must specify at least one query parameter, either: \'query\', \'gtin\', or \'upc\'. If there are more than one item in the catalog, the search returns the first 20 items in the response.  Additionally, you can use the information provided in the \'relatedQueries\' response parameter to run a new search for similar items.
         * @summary Item Search
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [query] Specifies a keyword search as a String.
         * @param {string} [upc] Specifies a Universal Product Code (UPC) search. UPC must be 12 digits.
         * @param {string} [gtin] Specifies a Global Trade Item Number (GTIN) search. GTIN must be 14 digits.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSearchResult(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, query?: string, upc?: string, gtin?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.getSearchResult(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, query, upc, gtin, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * The Taxonomy API exposes the category taxonomy that Walmart.com uses to categorize items. It describes the Departments, Categories, and Subcategories levels available on Walmart.com. You can specify the exact category as a parameter when using any of the following APIs:  -   Search-   Data feeds-   Special feeds, to includePre-order, Best Sellers, Rollbacks, Clearance, and Special Buys  For example, you can restrict the Search API to search within a category by supplying the ID through the taxonomy. Similarly, you can use the Feed API to download category-specific feeds by specifying a category ID.
         * @summary Taxonomy
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaxonomyResponse(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.getTaxonomyResponse(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Get total count of items based on variant group information
         * @summary Get item count by groups
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [variantGroupId] Variant Id to retrieve
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVariantCount(wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, variantGroupId?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.getVariantCount(wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, variantGroupId, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         *  Use this API for initial item setup and maintenance.  This API updates items in bulk. You can update 10,000 items at once; updates with more than 10,000 items are not supported. Keep feed sizes below 10 MB, except for FITMENT_ACES and FITMENT_PIES, to ensure optimal feed processing time. For FITMENT_PIES and FITMENT_ACES feeds, files upto 25 MB are supported.  You can use the Bulk Item Setup API for any of the following item spec versions, just specify the corresponding feed type as a query parameter.  *   Item spec version 4.8 feed type: MP_ITEM *   WFS Item spec version 4.3 feed type: MP_WFS_ITEM  *   WFS Maintenance spec version 4.8 feed type: MP_MAINTENANCE *   Set up item by match 4.1 feed type: MP_ITEM_MATCH  *   Convert an existing item to WFS 4.5 feed type : OMNI_WFS  *   For Fitment feed type FITMENT_ACES and FITMENT_PIES, zip file needs to be added in the request body. While uploading the fitment feeds, it is mandatory to add boundary parameter in Content-Type header. For example, Content-Type: multipart/form-data;boundary=\"----custom boundary\". Without a boundary parameter, fitment feeds will fail to process. For details refer to the guide link below  
         * @summary Bulk Item Setup (Multiple)
         * @param {'item' | 'RETIRE_ITEM' | 'MP_ITEM' | 'MP_WFS_ITEM' | 'MP_ITEM_MATCH' | 'MP_MAINTENANCE' | 'SKU_TEMPLATE_MAP' | 'SHIPPING_OVERRIDES' | 'OMNI_WFS' | 'FITMENT_ACES' | 'FITMENT_PIES'} feedType The feed Type
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {any} file 
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemBulkUploads(feedType: 'item' | 'RETIRE_ITEM' | 'MP_ITEM' | 'MP_WFS_ITEM' | 'MP_ITEM_MATCH' | 'MP_MAINTENANCE' | 'SKU_TEMPLATE_MAP' | 'SHIPPING_OVERRIDES' | 'OMNI_WFS' | 'FITMENT_ACES' | 'FITMENT_PIES', wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, file: any, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.itemBulkUploads(feedType, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, file, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Completely deactivates and un-publishes an item from the site.
         * @summary Retire an item
         * @param {string} sKU An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: \&#39;:\&#39;, \&#39;/\&#39;, \&#39;?\&#39;, \&#39;#\&#39;, \&#39;[\&#39;, \&#39;]\&#39;, \&#39;@\&#39;, \&#39;!\&#39;, \&#39;$\&#39;, \&#39;&amp;\&#39;, \&quot;\&#39;\&quot;, \&#39;(\&#39;, \&#39;)\&#39;, \&#39;*\&#39;, \&#39;+\&#39;, \&#39;,\&#39;, \&#39;;\&#39;, \&#39;&#x3D;\&#39;, as well as \&#39;%\&#39; itself. Other characters don\&#39;t need to be encoded.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retireAnItem(sKU: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.retireAnItem(sKU, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllItems operation in ItemsApi.
 * @export
 * @interface ItemsApiGetAllItemsRequest
 */
export interface ItemsApiGetAllItemsRequest {
    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly wMSVCNAME: string

    /**
     * Used for pagination when more than 200 items are retrieved.nextCursor value received in response will be same for all subsequent page requests.
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly nextCursor?: string

    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item.
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly sku?: string

    /**
     * The object response to start with, where 0 is the first entity that can be requested. It can only be used when includeDetails is set to true.
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly offset?: string

    /**
     * The number of entities to be returned. It cannot be more than 50 entities. Use it only when the includeDetails is set to true.
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly limit?: string

    /**
     * The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly lifecycleStatus?: string

    /**
     * The published status of an item describes where the item is in the submission process. Examples of allowed values are PUBLISHED, UNPUBLISHED.
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly publishedStatus?: string

    /**
     * Variant Id to retrieve all items with the same variant id
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly variantGroupId?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof ItemsApiGetAllItems
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getAnItem operation in ItemsApi.
 * @export
 * @interface ItemsApiGetAnItemRequest
 */
export interface ItemsApiGetAnItemRequest {
    /**
     * Represents the seller-specified unique ID for each item. Takes SKU code by default. If you require more specific item codes, such as GTIN, UPC, ISBN, EAN, or ITEM_ID, you need to use the productIdType query parameter and specify the desired code e.g. productIdType&#x3D;GTIN.
     * @type {string}
     * @memberof ItemsApiGetAnItem
     */
    readonly id: string

    /**
     * Item code type specifier allows to filter by specific code type, (e.g. GTIN).
     * @type {'GTIN' | 'UPC' | 'ISBN' | 'EAN' | 'SKU' | 'ITEM_ID'}
     * @memberof ItemsApiGetAnItem
     */
    readonly productIdType: 'GTIN' | 'UPC' | 'ISBN' | 'EAN' | 'SKU' | 'ITEM_ID'

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof ItemsApiGetAnItem
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof ItemsApiGetAnItem
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof ItemsApiGetAnItem
     */
    readonly wMSVCNAME: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof ItemsApiGetAnItem
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getCatalogSearch operation in ItemsApi.
 * @export
 * @interface ItemsApiGetCatalogSearchRequest
 */
export interface ItemsApiGetCatalogSearchRequest {
    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof ItemsApiGetCatalogSearch
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof ItemsApiGetCatalogSearch
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof ItemsApiGetCatalogSearch
     */
    readonly wMSVCNAME: string

    /**
     * 
     * @type {InlineObject}
     * @memberof ItemsApiGetCatalogSearch
     */
    readonly inlineObject: InlineObject

    /**
     * number of page
     * @type {number}
     * @memberof ItemsApiGetCatalogSearch
     */
    readonly page?: number

    /**
     * number of items
     * @type {number}
     * @memberof ItemsApiGetCatalogSearch
     */
    readonly limit?: number

    /**
     * nextCursor
     * @type {string}
     * @memberof ItemsApiGetCatalogSearch
     */
    readonly nextCursor?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof ItemsApiGetCatalogSearch
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getCountByStatus operation in ItemsApi.
 * @export
 * @interface ItemsApiGetCountByStatusRequest
 */
export interface ItemsApiGetCountByStatusRequest {
    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof ItemsApiGetCountByStatus
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof ItemsApiGetCountByStatus
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof ItemsApiGetCountByStatus
     */
    readonly wMSVCNAME: string

    /**
     * Status of Item
     * @type {'PUBLISHED' | 'UNPUBLISHED' | 'SYSTEM_PROBLEM' | 'IN_PROGRESS' | 'ALL'}
     * @memberof ItemsApiGetCountByStatus
     */
    readonly status?: 'PUBLISHED' | 'UNPUBLISHED' | 'SYSTEM_PROBLEM' | 'IN_PROGRESS' | 'ALL'

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof ItemsApiGetCountByStatus
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getItemAssociations operation in ItemsApi.
 * @export
 * @interface ItemsApiGetItemAssociationsRequest
 */
export interface ItemsApiGetItemAssociationsRequest {
    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof ItemsApiGetItemAssociations
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof ItemsApiGetItemAssociations
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof ItemsApiGetItemAssociations
     */
    readonly wMSVCNAME: string

    /**
     * 
     * @type {InlineObject1}
     * @memberof ItemsApiGetItemAssociations
     */
    readonly inlineObject1: InlineObject1

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof ItemsApiGetItemAssociations
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getSearchResult operation in ItemsApi.
 * @export
 * @interface ItemsApiGetSearchResultRequest
 */
export interface ItemsApiGetSearchResultRequest {
    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof ItemsApiGetSearchResult
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof ItemsApiGetSearchResult
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof ItemsApiGetSearchResult
     */
    readonly wMSVCNAME: string

    /**
     * Specifies a keyword search as a String.
     * @type {string}
     * @memberof ItemsApiGetSearchResult
     */
    readonly query?: string

    /**
     * Specifies a Universal Product Code (UPC) search. UPC must be 12 digits.
     * @type {string}
     * @memberof ItemsApiGetSearchResult
     */
    readonly upc?: string

    /**
     * Specifies a Global Trade Item Number (GTIN) search. GTIN must be 14 digits.
     * @type {string}
     * @memberof ItemsApiGetSearchResult
     */
    readonly gtin?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof ItemsApiGetSearchResult
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getTaxonomyResponse operation in ItemsApi.
 * @export
 * @interface ItemsApiGetTaxonomyResponseRequest
 */
export interface ItemsApiGetTaxonomyResponseRequest {
    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof ItemsApiGetTaxonomyResponse
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof ItemsApiGetTaxonomyResponse
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof ItemsApiGetTaxonomyResponse
     */
    readonly wMSVCNAME: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof ItemsApiGetTaxonomyResponse
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getVariantCount operation in ItemsApi.
 * @export
 * @interface ItemsApiGetVariantCountRequest
 */
export interface ItemsApiGetVariantCountRequest {
    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof ItemsApiGetVariantCount
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof ItemsApiGetVariantCount
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof ItemsApiGetVariantCount
     */
    readonly wMSVCNAME: string

    /**
     * Variant Id to retrieve
     * @type {string}
     * @memberof ItemsApiGetVariantCount
     */
    readonly variantGroupId?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof ItemsApiGetVariantCount
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for itemBulkUploads operation in ItemsApi.
 * @export
 * @interface ItemsApiItemBulkUploadsRequest
 */
export interface ItemsApiItemBulkUploadsRequest {
    /**
     * The feed Type
     * @type {'item' | 'RETIRE_ITEM' | 'MP_ITEM' | 'MP_WFS_ITEM' | 'MP_ITEM_MATCH' | 'MP_MAINTENANCE' | 'SKU_TEMPLATE_MAP' | 'SHIPPING_OVERRIDES' | 'OMNI_WFS' | 'FITMENT_ACES' | 'FITMENT_PIES'}
     * @memberof ItemsApiItemBulkUploads
     */
    readonly feedType: 'item' | 'RETIRE_ITEM' | 'MP_ITEM' | 'MP_WFS_ITEM' | 'MP_ITEM_MATCH' | 'MP_MAINTENANCE' | 'SKU_TEMPLATE_MAP' | 'SHIPPING_OVERRIDES' | 'OMNI_WFS' | 'FITMENT_ACES' | 'FITMENT_PIES'

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof ItemsApiItemBulkUploads
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof ItemsApiItemBulkUploads
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof ItemsApiItemBulkUploads
     */
    readonly wMSVCNAME: string

    /**
     * 
     * @type {any}
     * @memberof ItemsApiItemBulkUploads
     */
    readonly file: any

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof ItemsApiItemBulkUploads
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for retireAnItem operation in ItemsApi.
 * @export
 * @interface ItemsApiRetireAnItemRequest
 */
export interface ItemsApiRetireAnItemRequest {
    /**
     * An arbitrary alphanumeric unique ID, specified by the seller, which identifies each item. This will be used by the seller in the XSD file to refer to each item. Special characters in the sku needing encoding are: \&#39;:\&#39;, \&#39;/\&#39;, \&#39;?\&#39;, \&#39;#\&#39;, \&#39;[\&#39;, \&#39;]\&#39;, \&#39;@\&#39;, \&#39;!\&#39;, \&#39;$\&#39;, \&#39;&amp;\&#39;, \&quot;\&#39;\&quot;, \&#39;(\&#39;, \&#39;)\&#39;, \&#39;*\&#39;, \&#39;+\&#39;, \&#39;,\&#39;, \&#39;;\&#39;, \&#39;&#x3D;\&#39;, as well as \&#39;%\&#39; itself. Other characters don\&#39;t need to be encoded.
     * @type {string}
     * @memberof ItemsApiRetireAnItem
     */
    readonly sKU: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof ItemsApiRetireAnItem
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof ItemsApiRetireAnItem
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof ItemsApiRetireAnItem
     */
    readonly wMSVCNAME: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof ItemsApiRetireAnItem
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * Displays a list of all items by using either nextCursor or offset and limit query parameters
     * @summary All items
     * @param {ItemsApiGetAllItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getAllItems(requestParameters: ItemsApiGetAllItemsRequest, options?: any) {
        return ItemsApiFp(this.configuration).getAllItems(requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.nextCursor, requestParameters.sku, requestParameters.offset, requestParameters.limit, requestParameters.lifecycleStatus, requestParameters.publishedStatus, requestParameters.variantGroupId, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves an item and displays the item details.
     * @summary An item
     * @param {ItemsApiGetAnItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getAnItem(requestParameters: ItemsApiGetAnItemRequest, options?: any) {
        return ItemsApiFp(this.configuration).getAnItem(requestParameters.id, requestParameters.productIdType, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Catalog Search Result
     * @summary Catalog Search
     * @param {ItemsApiGetCatalogSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getCatalogSearch(requestParameters: ItemsApiGetCatalogSearchRequest, options?: any) {
        return ItemsApiFp(this.configuration).getCatalogSearch(requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.inlineObject, requestParameters.page, requestParameters.limit, requestParameters.nextCursor, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get total count of items based on status
     * @summary Get items count by status
     * @param {ItemsApiGetCountByStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getCountByStatus(requestParameters: ItemsApiGetCountByStatusRequest, options?: any) {
        return ItemsApiFp(this.configuration).getCountByStatus(requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.status, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Item Associations API allows you to retrieve shippingTemplate and shipNode associated with the provided items.
     * @summary Get Item Associations
     * @param {ItemsApiGetItemAssociationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getItemAssociations(requestParameters: ItemsApiGetItemAssociationsRequest, options?: any) {
        return ItemsApiFp(this.configuration).getItemAssociations(requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.inlineObject1, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The Item Search API allows you to query the Walmart.com global product catalog by item keyword, UPC or GTIN. You can review all item information provided in the response, so you can decide whether or not you want to sell this item.  You must specify at least one query parameter, either: \'query\', \'gtin\', or \'upc\'. If there are more than one item in the catalog, the search returns the first 20 items in the response.  Additionally, you can use the information provided in the \'relatedQueries\' response parameter to run a new search for similar items.
     * @summary Item Search
     * @param {ItemsApiGetSearchResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getSearchResult(requestParameters: ItemsApiGetSearchResultRequest, options?: any) {
        return ItemsApiFp(this.configuration).getSearchResult(requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.query, requestParameters.upc, requestParameters.gtin, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The Taxonomy API exposes the category taxonomy that Walmart.com uses to categorize items. It describes the Departments, Categories, and Subcategories levels available on Walmart.com. You can specify the exact category as a parameter when using any of the following APIs:  -   Search-   Data feeds-   Special feeds, to includePre-order, Best Sellers, Rollbacks, Clearance, and Special Buys  For example, you can restrict the Search API to search within a category by supplying the ID through the taxonomy. Similarly, you can use the Feed API to download category-specific feeds by specifying a category ID.
     * @summary Taxonomy
     * @param {ItemsApiGetTaxonomyResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getTaxonomyResponse(requestParameters: ItemsApiGetTaxonomyResponseRequest, options?: any) {
        return ItemsApiFp(this.configuration).getTaxonomyResponse(requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get total count of items based on variant group information
     * @summary Get item count by groups
     * @param {ItemsApiGetVariantCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public getVariantCount(requestParameters: ItemsApiGetVariantCountRequest, options?: any) {
        return ItemsApiFp(this.configuration).getVariantCount(requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.variantGroupId, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *  Use this API for initial item setup and maintenance.  This API updates items in bulk. You can update 10,000 items at once; updates with more than 10,000 items are not supported. Keep feed sizes below 10 MB, except for FITMENT_ACES and FITMENT_PIES, to ensure optimal feed processing time. For FITMENT_PIES and FITMENT_ACES feeds, files upto 25 MB are supported.  You can use the Bulk Item Setup API for any of the following item spec versions, just specify the corresponding feed type as a query parameter.  *   Item spec version 4.8 feed type: MP_ITEM *   WFS Item spec version 4.3 feed type: MP_WFS_ITEM  *   WFS Maintenance spec version 4.8 feed type: MP_MAINTENANCE *   Set up item by match 4.1 feed type: MP_ITEM_MATCH  *   Convert an existing item to WFS 4.5 feed type : OMNI_WFS  *   For Fitment feed type FITMENT_ACES and FITMENT_PIES, zip file needs to be added in the request body. While uploading the fitment feeds, it is mandatory to add boundary parameter in Content-Type header. For example, Content-Type: multipart/form-data;boundary=\"----custom boundary\". Without a boundary parameter, fitment feeds will fail to process. For details refer to the guide link below  
     * @summary Bulk Item Setup (Multiple)
     * @param {ItemsApiItemBulkUploadsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public itemBulkUploads(requestParameters: ItemsApiItemBulkUploadsRequest, options?: any) {
        return ItemsApiFp(this.configuration).itemBulkUploads(requestParameters.feedType, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.file, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Completely deactivates and un-publishes an item from the site.
     * @summary Retire an item
     * @param {ItemsApiRetireAnItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public retireAnItem(requestParameters: ItemsApiRetireAnItemRequest, options?: any) {
        return ItemsApiFp(this.configuration).retireAnItem(requestParameters.sKU, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }
}


