/* tslint:disable */
/* eslint-disable */
/**
 * Insights Management
 * The Insights Management API provides sellers with actionable information to optimize their listings: *   Sellers can locate best-selling items with Trending Items API so they can add those to their catalog of item offerings.  *   Sellers can find out reasons why items go unpublished, fix the issue and republish those items. *   Sellers can use Listing Quality APIs to gather listing quality metrics about their items and find out any post-production issues that they can fix. *   Sellers can obtain their overall Listing Quality score, and locate any categories that show items with listing quality issues.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Cancellations
 */
export interface Cancellations {
    /**
     * 
     * @type {number}
     * @memberof Cancellations
     */
    defectedOrder?: number;
    /**
     * 
     * @type {number}
     * @memberof Cancellations
     */
    totalOrder?: number;
    /**
     * 
     * @type {number}
     * @memberof Cancellations
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface ContentAndDiscoverability
 */
export interface ContentAndDiscoverability {
    /**
     * 
     * @type {number}
     * @memberof ContentAndDiscoverability
     */
    issueCount?: number;
    /**
     * 
     * @type {Array<InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1>}
     * @memberof ContentAndDiscoverability
     */
    issues?: Array<InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1>;
}
/**
 * 
 * @export
 * @interface ContentDiscoverabilityIssue
 */
export interface ContentDiscoverabilityIssue {
    /**
     * 
     * @type {number}
     * @memberof ContentDiscoverabilityIssue
     */
    score?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ContentDiscoverabilityIssue
     */
    isEditable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ContentDiscoverabilityIssue
     */
    attributeValue?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ContentDiscoverabilityIssue
     */
    isSpecAttribute?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ContentDiscoverabilityIssue
     */
    attributeName?: string;
    /**
     * 
     * @type {number}
     * @memberof ContentDiscoverabilityIssue
     */
    issueCount?: number;
    /**
     * 
     * @type {Array<InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues>}
     * @memberof ContentDiscoverabilityIssue
     */
    issues?: Array<InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues>;
}
/**
 * 
 * @export
 * @interface ContentDiscoverabilityIssuesDesc
 */
export interface ContentDiscoverabilityIssuesDesc {
    /**
     * 
     * @type {string}
     * @memberof ContentDiscoverabilityIssuesDesc
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentDiscoverabilityIssuesDesc
     */
    value?: string;
}
/**
 * Shows the criteria for the Pro Seller badge.
 * @export
 * @interface CriteriaData
 */
export interface CriteriaData {
    /**
     * Number of orders received during the last 90 days.
     * @type {number}
     * @memberof CriteriaData
     */
    orders?: number;
    /**
     * Delivery Defect rate in the given timeframe.
     * @type {string}
     * @memberof CriteriaData
     */
    deliveryDefectRate?: string;
    /**
     * Cancellation rate in the given timeframe.
     * @type {string}
     * @memberof CriteriaData
     */
    cancellationRate?: string;
    /**
     * Trending Catalog Quality Score coverage.
     * @type {number}
     * @memberof CriteriaData
     */
    listingQualityCatalog?: number;
    /**
     * Days active on the platform.
     * @type {number}
     * @memberof CriteriaData
     */
    activeDays?: number;
}
/**
 * 
 * @export
 * @interface Filter
 */
export interface Filter {
    /**
     * | Attribute | Description | Data Type | --- | ----------- | ------- | contentDiscoverabilityPercentage | Item\'s content and discoverability score expressed as a percentage. | string | | qualityScorePercentage | Item\'s overall Listing Quality score, rated as a percentage. | string | | offerPercentage | Item\'s offer score, based on: item price, shipping price and speed, and in-stock rate.| string | | ratingReviewsPercentage | Rating and reviews score, as a percentage. | string | | viewTrendingItems | Indicates to return details for trending items that have non-zero page views. Acceptable values are \"true\" if pageView > 0, or \"false\" if pageView >= 0. | string | | viewPostPurchaseItems | Show items with post-purchase quality issues. If item has post-purchase value >= 1, it filters all items greater or equal based on post purchase value. | string | | wfsFlag | Show WFS-eligible items. Value of this parameter can be true or false. | string | | categoryName | Item\'s category name. | string | | hasIssues | Provides a count of item with issues. | integer | | productType | Product type to classify the item (e.g. Pants). | string| | attributeList | List of all available filter attributes. | string |
     * @type {string}
     * @memberof Filter
     */
    field?: FilterFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof Filter
     */
    op?: FilterOpEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof Filter
     */
    values?: Array<number>;
}

/**
    * @export
    * @enum {string}
    */
export enum FilterFieldEnum {
    ContentDiscoverabilityPercentage = 'contentDiscoverabilityPercentage',
    QualityScorePercentage = 'qualityScorePercentage',
    OfferPercentage = 'offerPercentage',
    RatingReviewsPercentage = 'ratingReviewsPercentage',
    ViewTrendingItems = 'viewTrendingItems',
    ViewPostPurchaseItems = 'viewPostPurchaseItems',
    WfsFlag = 'wfsFlag',
    CategoryName = 'categoryName',
    HasIssues = 'hasIssues',
    ProductType = 'productType',
    AttributeList = 'attributeList'
}
/**
    * @export
    * @enum {string}
    */
export enum FilterOpEnum {
    Equals = 'equals',
    Between = 'between'
}

/**
 * 
 * @export
 * @interface GetCategoriesPayload
 */
export interface GetCategoriesPayload {
    /**
     * 
     * @type {string}
     * @memberof GetCategoriesPayload
     */
    category?: string;
    /**
     * 
     * @type {number}
     * @memberof GetCategoriesPayload
     */
    offerCount?: number;
    /**
     * 
     * @type {Array<InlineResponse2005ProductType>}
     * @memberof GetCategoriesPayload
     */
    productType?: Array<InlineResponse2005ProductType>;
}
/**
 * 
 * @export
 * @interface GetCategoriesResponse
 */
export interface GetCategoriesResponse {
    /**
     * 
     * @type {Array<InlineResponse2005Payload>}
     * @memberof GetCategoriesResponse
     */
    payload?: Array<InlineResponse2005Payload>;
}
/**
 * 
 * @export
 * @interface GetListingQualityScore
 */
export interface GetListingQualityScore {
    /**
     * 
     * @type {InlineResponse200Payload}
     * @memberof GetListingQualityScore
     */
    payload?: InlineResponse200Payload;
}
/**
 * 
 * @export
 * @interface GetTrendingResult
 */
export interface GetTrendingResult {
    /**
     * 
     * @type {InlineResponse2003Payload}
     * @memberof GetTrendingResult
     */
    payload?: InlineResponse2003Payload;
    /**
     * 
     * @type {string}
     * @memberof GetTrendingResult
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface GetTrendingResultPayload
 */
export interface GetTrendingResultPayload {
    /**
     * Total count of qualified items
     * @type {number}
     * @memberof GetTrendingResultPayload
     */
    totalCount?: number;
    /**
     * List of Qualified Items
     * @type {Array<InlineResponse2003PayloadItems>}
     * @memberof GetTrendingResultPayload
     */
    items?: Array<InlineResponse2003PayloadItems>;
}
/**
 * 
 * @export
 * @interface GetUnpublishedItem
 */
export interface GetUnpublishedItem {
    /**
     * 
     * @type {Array<InlineResponse2002Payload>}
     * @memberof GetUnpublishedItem
     */
    payload?: Array<InlineResponse2002Payload>;
    /**
     * total number of unpublished items
     * @type {number}
     * @memberof GetUnpublishedItem
     */
    totalCount?: number;
    /**
     * 
     * @type {InlineResponse2002TotalGmvAmount}
     * @memberof GetUnpublishedItem
     */
    totalGmvAmount?: InlineResponse2002TotalGmvAmount;
}
/**
 * 
 * @export
 * @interface GetUnpublishedItemsCount
 */
export interface GetUnpublishedItemsCount {
    /**
     * 
     * @type {Array<InlineResponse2004Payload>}
     * @memberof GetUnpublishedItemsCount
     */
    payload?: Array<InlineResponse2004Payload>;
}
/**
 * 
 * @export
 * @interface GetUnpublishedItemsPayload
 */
export interface GetUnpublishedItemsPayload {
    /**
     * The GTIN-compatible Product ID (i.e. UPC or EAN)
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    gtin?: string;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOfferPrice}
     * @memberof GetUnpublishedItemsPayload
     */
    marketPrice?: InlineResponse2001ScoreDetailsOfferPrice;
    /**
     * The Date when item becomes available to sell in Walmart
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    offerStartDate?: string;
    /**
     * If item is trending in walmart
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    marketTrending?: string;
    /**
     * The lifecycle status of an item describes where the item listing is in the overall lifecycle
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    lifecycleStatus?: string;
    /**
     * It outlines the reason for an item when unpublished
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    unpublishReasons?: string;
    /**
     * Percentage of number of items that are converted into sales
     * @type {number}
     * @memberof GetUnpublishedItemsPayload
     */
    conversionRate?: number;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the product name
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    productName?: string;
    /**
     * 
     * @type {InlineResponse2002GmvAmount}
     * @memberof GetUnpublishedItemsPayload
     */
    gmvAmount?: InlineResponse2002GmvAmount;
    /**
     * Specifies the item identifier generated by Walmart
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    itemId?: string;
    /**
     * An average rating number for the item from customers
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    customerRating?: string;
    /**
     * number of times this item is viewed by customers
     * @type {number}
     * @memberof GetUnpublishedItemsPayload
     */
    pageViews?: number;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOfferPrice}
     * @memberof GetUnpublishedItemsPayload
     */
    price?: InlineResponse2001ScoreDetailsOfferPrice;
    /**
     * The Date item becomes to Unpublished
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    unpublishedDate?: string;
    /**
     * Specifies the item brand
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    brand?: string;
    /**
     * String of letters and/or numbers a partner uses to identify the item
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    sku?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the Product Type
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    productType?: string;
    /**
     * The Date when item becomes unavailable to sell in Walmart
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    offerEndDate?: string;
    /**
     * The status of an item when the item is in the submission process
     * @type {string}
     * @memberof GetUnpublishedItemsPayload
     */
    publishStatus?: string;
}
/**
 * 
 * @export
 * @interface Gmv
 */
export interface Gmv {
    /**
     * 
     * @type {string}
     * @memberof Gmv
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof Gmv
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface GmvAmount
 */
export interface GmvAmount {
    /**
     * The numerical value of the price
     * @type {number}
     * @memberof GmvAmount
     */
    amount?: number;
    /**
     * The currency type
     * @type {string}
     * @memberof GmvAmount
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {V3InsightsItemsListingQualityItemsQuery}
     * @memberof InlineObject
     */
    query?: V3InsightsItemsListingQualityItemsQuery;
    /**
     * 
     * @type {Array<V3InsightsItemsListingQualityItemsFilters>}
     * @memberof InlineObject
     */
    filters?: Array<V3InsightsItemsListingQualityItemsFilters>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {InlineResponse200Payload}
     * @memberof InlineResponse200
     */
    payload?: InlineResponse200Payload;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    nextCursor?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    totalItems?: string;
    /**
     * 
     * @type {Array<InlineResponse2001Payload>}
     * @memberof InlineResponse2001
     */
    payload?: Array<InlineResponse2001Payload>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001Payload
 */
export interface InlineResponse2001Payload {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    productId?: string;
    /**
     * 
     * @type {InlineResponse2001ScoreDetails}
     * @memberof InlineResponse2001Payload
     */
    scoreDetails?: InlineResponse2001ScoreDetails;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    wfsEnabled?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    priority?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    productName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    itemId?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    sellerId?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    pageViews?: string;
    /**
     * 
     * @type {InlineResponse2001Stats}
     * @memberof InlineResponse2001Payload
     */
    stats?: InlineResponse2001Stats;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    imageUrL?: string;
    /**
     * 
     * @type {InlineResponse2001QualityScore}
     * @memberof InlineResponse2001Payload
     */
    qualityScore?: InlineResponse2001QualityScore;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    offerId?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    sku?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    postPurchaseIssues?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Payload
     */
    productType?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001QualityScore
 */
export interface InlineResponse2001QualityScore {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001QualityScore
     */
    score?: number;
    /**
     * 
     * @type {Array<InlineResponse2001QualityScoreValues>}
     * @memberof InlineResponse2001QualityScore
     */
    values?: Array<InlineResponse2001QualityScoreValues>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001QualityScoreValues
 */
export interface InlineResponse2001QualityScoreValues {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001QualityScoreValues
     */
    scoreType?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001QualityScoreValues
     */
    scoreValue?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001QualityScoreValues
     */
    impact?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetails
 */
export interface InlineResponse2001ScoreDetails {
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOffer}
     * @memberof InlineResponse2001ScoreDetails
     */
    offer?: InlineResponse2001ScoreDetailsOffer;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsRatingReviews}
     * @memberof InlineResponse2001ScoreDetails
     */
    ratingReviews?: InlineResponse2001ScoreDetailsRatingReviews;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsPostPurchase}
     * @memberof InlineResponse2001ScoreDetails
     */
    postPurchase?: InlineResponse2001ScoreDetailsPostPurchase;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsContentAndDiscoverability}
     * @memberof InlineResponse2001ScoreDetails
     */
    contentAndDiscoverability?: InlineResponse2001ScoreDetailsContentAndDiscoverability;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsContentAndDiscoverability
 */
export interface InlineResponse2001ScoreDetailsContentAndDiscoverability {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverability
     */
    issueCount?: number;
    /**
     * 
     * @type {Array<InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1>}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverability
     */
    issues?: Array<InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues
 */
export interface InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1
 */
export interface InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1
     */
    score?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1
     */
    isEditable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1
     */
    attributeValue?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1
     */
    isSpecAttribute?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1
     */
    attributeName?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1
     */
    issueCount?: number;
    /**
     * 
     * @type {Array<InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues>}
     * @memberof InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues1
     */
    issues?: Array<InlineResponse2001ScoreDetailsContentAndDiscoverabilityIssues>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsOffer
 */
export interface InlineResponse2001ScoreDetailsOffer {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsOffer
     */
    issueCount?: number;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOfferPrice}
     * @memberof InlineResponse2001ScoreDetailsOffer
     */
    price?: InlineResponse2001ScoreDetailsOfferPrice;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOfferShippingSpeed}
     * @memberof InlineResponse2001ScoreDetailsOffer
     */
    shippingSpeed?: InlineResponse2001ScoreDetailsOfferShippingSpeed;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOfferPublishAndTransactable}
     * @memberof InlineResponse2001ScoreDetailsOffer
     */
    publishAndTransactable?: InlineResponse2001ScoreDetailsOfferPublishAndTransactable;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsOfferPrice
 */
export interface InlineResponse2001ScoreDetailsOfferPrice {
    /**
     * The numerical value of the price
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsOfferPrice
     */
    amount?: string;
    /**
     * The currency type
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsOfferPrice
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsOfferPublishAndTransactable
 */
export interface InlineResponse2001ScoreDetailsOfferPublishAndTransactable {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsOfferPublishAndTransactable
     */
    issueTitle?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsOfferPublishAndTransactable
     */
    totalIssue?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsOfferPublishAndTransactable
     */
    maxIssue?: number;
    /**
     * 
     * @type {Array<InlineResponse2001ScoreDetailsOfferPublishAndTransactableIssues>}
     * @memberof InlineResponse2001ScoreDetailsOfferPublishAndTransactable
     */
    issues?: Array<InlineResponse2001ScoreDetailsOfferPublishAndTransactableIssues>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsOfferPublishAndTransactable
     */
    score?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsOfferPublishAndTransactableIssues
 */
export interface InlineResponse2001ScoreDetailsOfferPublishAndTransactableIssues {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsOfferPublishAndTransactableIssues
     */
    date?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2001ScoreDetailsOfferPublishAndTransactableIssues
     */
    publishFlag?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2001ScoreDetailsOfferPublishAndTransactableIssues
     */
    transactableFlag?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsOfferShippingSpeed
 */
export interface InlineResponse2001ScoreDetailsOfferShippingSpeed {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsOfferShippingSpeed
     */
    shippingType?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsOfferShippingSpeed
     */
    issueTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsOfferShippingSpeed
     */
    issueDesc?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsOfferShippingSpeed
     */
    score?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsPostPurchase
 */
export interface InlineResponse2001ScoreDetailsPostPurchase {
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsPostPurchaseCancellations}
     * @memberof InlineResponse2001ScoreDetailsPostPurchase
     */
    cancellations?: InlineResponse2001ScoreDetailsPostPurchaseCancellations;
    /**
     * 
     * @type {object}
     * @memberof InlineResponse2001ScoreDetailsPostPurchase
     */
    returns?: object;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsPostPurchase
     */
    issueCount?: string;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsPostPurchaseCancellations}
     * @memberof InlineResponse2001ScoreDetailsPostPurchase
     */
    otd?: InlineResponse2001ScoreDetailsPostPurchaseCancellations;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsPostPurchaseCancellations
 */
export interface InlineResponse2001ScoreDetailsPostPurchaseCancellations {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsPostPurchaseCancellations
     */
    defectedOrder?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsPostPurchaseCancellations
     */
    totalOrder?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001ScoreDetailsPostPurchaseCancellations
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2001ScoreDetailsRatingReviews
 */
export interface InlineResponse2001ScoreDetailsRatingReviews {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsRatingReviews
     */
    maxRating?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001ScoreDetailsRatingReviews
     */
    ratingCount?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001Stats
 */
export interface InlineResponse2001Stats {
    /**
     * 
     * @type {InlineResponse2001StatsGmv}
     * @memberof InlineResponse2001Stats
     */
    gmv?: InlineResponse2001StatsGmv;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Stats
     */
    pageViews?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Stats
     */
    orders?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Stats
     */
    conversionRate?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001Stats
     */
    totalUnits?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001StatsGmv
 */
export interface InlineResponse2001StatsGmv {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001StatsGmv
     */
    amount?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001StatsGmv
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<InlineResponse2002Payload>}
     * @memberof InlineResponse2002
     */
    payload?: Array<InlineResponse2002Payload>;
    /**
     * total number of unpublished items
     * @type {number}
     * @memberof InlineResponse2002
     */
    totalCount?: number;
    /**
     * 
     * @type {InlineResponse2002TotalGmvAmount}
     * @memberof InlineResponse2002
     */
    totalGmvAmount?: InlineResponse2002TotalGmvAmount;
}
/**
 * 
 * @export
 * @interface InlineResponse2002GmvAmount
 */
export interface InlineResponse2002GmvAmount {
    /**
     * The numerical value of the price
     * @type {number}
     * @memberof InlineResponse2002GmvAmount
     */
    amount?: number;
    /**
     * The currency type
     * @type {string}
     * @memberof InlineResponse2002GmvAmount
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002Payload
 */
export interface InlineResponse2002Payload {
    /**
     * The GTIN-compatible Product ID (i.e. UPC or EAN)
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    gtin?: string;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOfferPrice}
     * @memberof InlineResponse2002Payload
     */
    marketPrice?: InlineResponse2001ScoreDetailsOfferPrice;
    /**
     * The Date when item becomes available to sell in Walmart
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    offerStartDate?: string;
    /**
     * If item is trending in walmart
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    marketTrending?: string;
    /**
     * The lifecycle status of an item describes where the item listing is in the overall lifecycle
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    lifecycleStatus?: string;
    /**
     * It outlines the reason for an item when unpublished
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    unpublishReasons?: string;
    /**
     * Percentage of number of items that are converted into sales
     * @type {number}
     * @memberof InlineResponse2002Payload
     */
    conversionRate?: number;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the product name
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    productName?: string;
    /**
     * 
     * @type {InlineResponse2002GmvAmount}
     * @memberof InlineResponse2002Payload
     */
    gmvAmount?: InlineResponse2002GmvAmount;
    /**
     * Specifies the item identifier generated by Walmart
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    itemId?: string;
    /**
     * An average rating number for the item from customers
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    customerRating?: string;
    /**
     * number of times this item is viewed by customers
     * @type {number}
     * @memberof InlineResponse2002Payload
     */
    pageViews?: number;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOfferPrice}
     * @memberof InlineResponse2002Payload
     */
    price?: InlineResponse2001ScoreDetailsOfferPrice;
    /**
     * The Date item becomes to Unpublished
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    unpublishedDate?: string;
    /**
     * Specifies the item brand
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    brand?: string;
    /**
     * String of letters and/or numbers a partner uses to identify the item
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    sku?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the Product Type
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    productType?: string;
    /**
     * The Date when item becomes unavailable to sell in Walmart
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    offerEndDate?: string;
    /**
     * The status of an item when the item is in the submission process
     * @type {string}
     * @memberof InlineResponse2002Payload
     */
    publishStatus?: string;
}
/**
 * Gross Merchandise Value of the total result set
 * @export
 * @interface InlineResponse2002TotalGmvAmount
 */
export interface InlineResponse2002TotalGmvAmount {
    /**
     * The numerical value of the price
     * @type {string}
     * @memberof InlineResponse2002TotalGmvAmount
     */
    amount?: string;
    /**
     * The currency type
     * @type {string}
     * @memberof InlineResponse2002TotalGmvAmount
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {InlineResponse2003Payload}
     * @memberof InlineResponse2003
     */
    payload?: InlineResponse2003Payload;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2003Payload
 */
export interface InlineResponse2003Payload {
    /**
     * Total count of qualified items
     * @type {number}
     * @memberof InlineResponse2003Payload
     */
    totalCount?: number;
    /**
     * List of Qualified Items
     * @type {Array<InlineResponse2003PayloadItems>}
     * @memberof InlineResponse2003Payload
     */
    items?: Array<InlineResponse2003PayloadItems>;
}
/**
 * List of Qualified Items
 * @export
 * @interface InlineResponse2003PayloadItems
 */
export interface InlineResponse2003PayloadItems {
    /**
     * The categories this item belongs to
     * @type {string}
     * @memberof InlineResponse2003PayloadItems
     */
    categoryName?: string;
    /**
     * The department this product belongs to
     * @type {string}
     * @memberof InlineResponse2003PayloadItems
     */
    departmentName?: string;
    /**
     * International Standard Book Number
     * @type {string}
     * @memberof InlineResponse2003PayloadItems
     */
    isbn?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the product name
     * @type {string}
     * @memberof InlineResponse2003PayloadItems
     */
    productName?: string;
    /**
     * if the item can be shipped in two days
     * @type {number}
     * @memberof InlineResponse2003PayloadItems
     */
    isTwoDayEligible?: number;
    /**
     * Specifies the item identifier generated by Walmart
     * @type {string}
     * @memberof InlineResponse2003PayloadItems
     */
    itemId?: string;
    /**
     * Total number of item stored by seller
     * @type {number}
     * @memberof InlineResponse2003PayloadItems
     */
    totalOffers?: number;
    /**
     * International Standard Serial Number
     * @type {string}
     * @memberof InlineResponse2003PayloadItems
     */
    issn?: string;
    /**
     * if seller is selling this item
     * @type {number}
     * @memberof InlineResponse2003PayloadItems
     */
    existsForSeller?: number;
    /**
     * Level of trending for this item
     * @type {number}
     * @memberof InlineResponse2003PayloadItems
     */
    rank?: number;
    /**
     * Specifies the item brand
     * @type {string}
     * @memberof InlineResponse2003PayloadItems
     */
    brand?: string;
    /**
     * The superDepartmentName this item belongs to
     * @type {string}
     * @memberof InlineResponse2003PayloadItems
     */
    superDepartmentName?: string;
    /**
     * The subCategoryName this item belongs to
     * @type {string}
     * @memberof InlineResponse2003PayloadItems
     */
    subCategoryName?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<InlineResponse2004Payload>}
     * @memberof InlineResponse2004
     */
    payload?: Array<InlineResponse2004Payload>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004Payload
 */
export interface InlineResponse2004Payload {
    /**
     * total count for unpublished Item
     * @type {string}
     * @memberof InlineResponse2004Payload
     */
    unpublishedCount?: string;
    /**
     * total value for unpublished Item
     * @type {string}
     * @memberof InlineResponse2004Payload
     */
    unpublishedValue?: string;
    /**
     * the reason why item is unpublished
     * @type {string}
     * @memberof InlineResponse2004Payload
     */
    unpublishedReasonCode?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Array<InlineResponse2005Payload>}
     * @memberof InlineResponse2005
     */
    payload?: Array<InlineResponse2005Payload>;
}
/**
 * 
 * @export
 * @interface InlineResponse2005Payload
 */
export interface InlineResponse2005Payload {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005Payload
     */
    category?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005Payload
     */
    offerCount?: number;
    /**
     * 
     * @type {Array<InlineResponse2005ProductType>}
     * @memberof InlineResponse2005Payload
     */
    productType?: Array<InlineResponse2005ProductType>;
}
/**
 * 
 * @export
 * @interface InlineResponse2005ProductType
 */
export interface InlineResponse2005ProductType {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005ProductType
     */
    productTypeName?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005ProductType
     */
    offerCount?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * Specifies if the seller has the badge
     * @type {boolean}
     * @memberof InlineResponse2006
     */
    hasBadge?: boolean;
    /**
     * Specifies if the seller is eligible for the badge in the next refresh
     * @type {boolean}
     * @memberof InlineResponse2006
     */
    isEligible?: boolean;
    /**
     * Specifies when the seller received their badge
     * @type {string}
     * @memberof InlineResponse2006
     */
    badgedSince?: string;
    /**
     * Specifies whether the seller is prohibited from participating in the Pro Seller badge program.
     * @type {boolean}
     * @memberof InlineResponse2006
     */
    isProhibited?: boolean;
    /**
     * Specifies the seller\'s badge status in detail. The possible values are \"Become a Pro Seller\", \"You are a Pro Seller\", \"Pro Seller Badge at risk\", \"Eligible starting from YYYY-MM-DD\", and \"Not eligible for the Pro Seller Badge\"
     * @type {string}
     * @memberof InlineResponse2006
     */
    badgeStatus?: string;
    /**
     * 
     * @type {InlineResponse2006MeetsCriteria}
     * @memberof InlineResponse2006
     */
    meetsCriteria?: InlineResponse2006MeetsCriteria;
    /**
     * 
     * @type {InlineResponse2006CriteriaData}
     * @memberof InlineResponse2006
     */
    criteriaData?: InlineResponse2006CriteriaData;
    /**
     * 
     * @type {InlineResponse2006Recommendations}
     * @memberof InlineResponse2006
     */
    recommendations?: InlineResponse2006Recommendations;
}
/**
 * Shows the criteria for the Pro Seller badge.
 * @export
 * @interface InlineResponse2006CriteriaData
 */
export interface InlineResponse2006CriteriaData {
    /**
     * Number of orders received during the last 90 days.
     * @type {number}
     * @memberof InlineResponse2006CriteriaData
     */
    orders?: number;
    /**
     * Delivery Defect rate in the given timeframe.
     * @type {string}
     * @memberof InlineResponse2006CriteriaData
     */
    deliveryDefectRate?: string;
    /**
     * Cancellation rate in the given timeframe.
     * @type {string}
     * @memberof InlineResponse2006CriteriaData
     */
    cancellationRate?: string;
    /**
     * Trending Catalog Quality Score coverage.
     * @type {number}
     * @memberof InlineResponse2006CriteriaData
     */
    listingQualityCatalog?: number;
    /**
     * Days active on the platform.
     * @type {number}
     * @memberof InlineResponse2006CriteriaData
     */
    activeDays?: number;
}
/**
 * Shows whether the seller has met the requirements for the badge.
 * @export
 * @interface InlineResponse2006MeetsCriteria
 */
export interface InlineResponse2006MeetsCriteria {
    /**
     * Indicates whether the seller has met the minimum number of orders required.
     * @type {boolean}
     * @memberof InlineResponse2006MeetsCriteria
     */
    isOrdersCriteriaMet?: boolean;
    /**
     * Indicates whether the seller has a low delivery defect, meeting the threshold for the badge.
     * @type {boolean}
     * @memberof InlineResponse2006MeetsCriteria
     */
    isDeliveryDefectCriteriaMet?: boolean;
    /**
     * Indicates whether the seller has a low cancellation rate, meeting the threshold for the badge.
     * @type {boolean}
     * @memberof InlineResponse2006MeetsCriteria
     */
    isCancellationCriteriaMet?: boolean;
    /**
     * Indicates whether the seller is meeting the trending catalog requirement.
     * @type {boolean}
     * @memberof InlineResponse2006MeetsCriteria
     */
    isListingQualityCatalogCriteriaMet?: boolean;
    /**
     * Indicates whether the seller has met the minimum number of active days required.
     * @type {boolean}
     * @memberof InlineResponse2006MeetsCriteria
     */
    isActiveDaysCriteriaMet?: boolean;
}
/**
 * Recommendations on how to increase chances of Pro Seller Badge eligibility
 * @export
 * @interface InlineResponse2006Recommendations
 */
export interface InlineResponse2006Recommendations {
    /**
     * Recommendations on reducing the delivery defect rate
     * @type {string}
     * @memberof InlineResponse2006Recommendations
     */
    deliveryDefectRate?: string;
    /**
     * Recommendations on reducing the Cancellation rate
     * @type {string}
     * @memberof InlineResponse2006Recommendations
     */
    cancellationRate?: string;
    /**
     * Recommendations on increasing the trending item catalog coverage
     * @type {string}
     * @memberof InlineResponse2006Recommendations
     */
    listingQualityCatalog?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200Payload
 */
export interface InlineResponse200Payload {
    /**
     * Over All Quality 
     * @type {number}
     * @memberof InlineResponse200Payload
     */
    overAllQuality?: number;
    /**
     * 
     * @type {InlineResponse200PayloadScore}
     * @memberof InlineResponse200Payload
     */
    score?: InlineResponse200PayloadScore;
    /**
     * 
     * @type {InlineResponse200PayloadPostPurchaseQuality}
     * @memberof InlineResponse200Payload
     */
    postPurchaseQuality?: InlineResponse200PayloadPostPurchaseQuality;
}
/**
 * Post Purchase Quality
 * @export
 * @interface InlineResponse200PayloadPostPurchaseQuality
 */
export interface InlineResponse200PayloadPostPurchaseQuality {
    /**
     * Defect Ratio
     * @type {number}
     * @memberof InlineResponse200PayloadPostPurchaseQuality
     */
    defectRatio?: number;
    /**
     * Item Defect Count
     * @type {number}
     * @memberof InlineResponse200PayloadPostPurchaseQuality
     */
    itemDefectCnt?: number;
}
/**
 * Score
 * @export
 * @interface InlineResponse200PayloadScore
 */
export interface InlineResponse200PayloadScore {
    /**
     * Offer Score
     * @type {number}
     * @memberof InlineResponse200PayloadScore
     */
    offerScore?: number;
    /**
     * Content Score
     * @type {number}
     * @memberof InlineResponse200PayloadScore
     */
    contentScore?: number;
    /**
     * Rating Review Score
     * @type {number}
     * @memberof InlineResponse200PayloadScore
     */
    ratingReviewScore?: number;
}
/**
 * 
 * @export
 * @interface Issue
 */
export interface Issue {
    /**
     * 
     * @type {string}
     * @memberof Issue
     */
    date?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Issue
     */
    publishFlag?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Issue
     */
    transactableFlag?: boolean;
}
/**
 * 
 * @export
 * @interface ItemDetailsForListingQualityPayload
 */
export interface ItemDetailsForListingQualityPayload {
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    productId?: string;
    /**
     * 
     * @type {InlineResponse2001ScoreDetails}
     * @memberof ItemDetailsForListingQualityPayload
     */
    scoreDetails?: InlineResponse2001ScoreDetails;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    wfsEnabled?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    priority?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    productName?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    itemId?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    sellerId?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    pageViews?: string;
    /**
     * 
     * @type {InlineResponse2001Stats}
     * @memberof ItemDetailsForListingQualityPayload
     */
    stats?: InlineResponse2001Stats;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    imageUrL?: string;
    /**
     * 
     * @type {InlineResponse2001QualityScore}
     * @memberof ItemDetailsForListingQualityPayload
     */
    qualityScore?: InlineResponse2001QualityScore;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    offerId?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    sku?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    postPurchaseIssues?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsForListingQualityPayload
     */
    productType?: string;
}
/**
 * 
 * @export
 * @interface ItemDetailsLQRequestPayload
 */
export interface ItemDetailsLQRequestPayload {
    /**
     * 
     * @type {V3InsightsItemsListingQualityItemsQuery}
     * @memberof ItemDetailsLQRequestPayload
     */
    query?: V3InsightsItemsListingQualityItemsQuery;
    /**
     * 
     * @type {Array<V3InsightsItemsListingQualityItemsFilters>}
     * @memberof ItemDetailsLQRequestPayload
     */
    filters?: Array<V3InsightsItemsListingQualityItemsFilters>;
}
/**
 * 
 * @export
 * @interface ItemDetailsLQResponsePayload
 */
export interface ItemDetailsLQResponsePayload {
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsLQResponsePayload
     */
    nextCursor?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsLQResponsePayload
     */
    totalItems?: string;
    /**
     * 
     * @type {Array<InlineResponse2001Payload>}
     * @memberof ItemDetailsLQResponsePayload
     */
    payload?: Array<InlineResponse2001Payload>;
    /**
     * 
     * @type {string}
     * @memberof ItemDetailsLQResponsePayload
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface ListingQualityScorePayload
 */
export interface ListingQualityScorePayload {
    /**
     * Over All Quality 
     * @type {number}
     * @memberof ListingQualityScorePayload
     */
    overAllQuality?: number;
    /**
     * 
     * @type {InlineResponse200PayloadScore}
     * @memberof ListingQualityScorePayload
     */
    score?: InlineResponse200PayloadScore;
    /**
     * 
     * @type {InlineResponse200PayloadPostPurchaseQuality}
     * @memberof ListingQualityScorePayload
     */
    postPurchaseQuality?: InlineResponse200PayloadPostPurchaseQuality;
}
/**
 * 
 * @export
 * @interface MarketPrice
 */
export interface MarketPrice {
    /**
     * The numerical value of the price
     * @type {string}
     * @memberof MarketPrice
     */
    amount?: string;
    /**
     * The currency type
     * @type {string}
     * @memberof MarketPrice
     */
    currency?: string;
}
/**
 * Shows whether the seller has met the requirements for the badge.
 * @export
 * @interface MeetsCriteria
 */
export interface MeetsCriteria {
    /**
     * Indicates whether the seller has met the minimum number of orders required.
     * @type {boolean}
     * @memberof MeetsCriteria
     */
    isOrdersCriteriaMet?: boolean;
    /**
     * Indicates whether the seller has a low delivery defect, meeting the threshold for the badge.
     * @type {boolean}
     * @memberof MeetsCriteria
     */
    isDeliveryDefectCriteriaMet?: boolean;
    /**
     * Indicates whether the seller has a low cancellation rate, meeting the threshold for the badge.
     * @type {boolean}
     * @memberof MeetsCriteria
     */
    isCancellationCriteriaMet?: boolean;
    /**
     * Indicates whether the seller is meeting the trending catalog requirement.
     * @type {boolean}
     * @memberof MeetsCriteria
     */
    isListingQualityCatalogCriteriaMet?: boolean;
    /**
     * Indicates whether the seller has met the minimum number of active days required.
     * @type {boolean}
     * @memberof MeetsCriteria
     */
    isActiveDaysCriteriaMet?: boolean;
}
/**
 * 
 * @export
 * @interface Offer
 */
export interface Offer {
    /**
     * 
     * @type {number}
     * @memberof Offer
     */
    issueCount?: number;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOfferPrice}
     * @memberof Offer
     */
    price?: InlineResponse2001ScoreDetailsOfferPrice;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOfferShippingSpeed}
     * @memberof Offer
     */
    shippingSpeed?: InlineResponse2001ScoreDetailsOfferShippingSpeed;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOfferPublishAndTransactable}
     * @memberof Offer
     */
    publishAndTransactable?: InlineResponse2001ScoreDetailsOfferPublishAndTransactable;
}
/**
 * 
 * @export
 * @interface Otd
 */
export interface Otd {
    /**
     * 
     * @type {number}
     * @memberof Otd
     */
    defectedOrder?: number;
    /**
     * 
     * @type {number}
     * @memberof Otd
     */
    totalOrder?: number;
    /**
     * 
     * @type {number}
     * @memberof Otd
     */
    rate?: number;
}
/**
 * 
 * @export
 * @interface Payload
 */
export interface Payload {
    /**
     * total count for unpublished Item
     * @type {string}
     * @memberof Payload
     */
    unpublishedCount?: string;
    /**
     * total value for unpublished Item
     * @type {string}
     * @memberof Payload
     */
    unpublishedValue?: string;
    /**
     * the reason why item is unpublished
     * @type {string}
     * @memberof Payload
     */
    unpublishedReasonCode?: string;
}
/**
 * 
 * @export
 * @interface PostPurchase
 */
export interface PostPurchase {
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsPostPurchaseCancellations}
     * @memberof PostPurchase
     */
    cancellations?: InlineResponse2001ScoreDetailsPostPurchaseCancellations;
    /**
     * 
     * @type {object}
     * @memberof PostPurchase
     */
    returns?: object;
    /**
     * 
     * @type {string}
     * @memberof PostPurchase
     */
    issueCount?: string;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsPostPurchaseCancellations}
     * @memberof PostPurchase
     */
    otd?: InlineResponse2001ScoreDetailsPostPurchaseCancellations;
}
/**
 * Post Purchase Quality
 * @export
 * @interface PostPurchaseQuality
 */
export interface PostPurchaseQuality {
    /**
     * Defect Ratio
     * @type {number}
     * @memberof PostPurchaseQuality
     */
    defectRatio?: number;
    /**
     * Item Defect Count
     * @type {number}
     * @memberof PostPurchaseQuality
     */
    itemDefectCnt?: number;
}
/**
 * 
 * @export
 * @interface Price
 */
export interface Price {
    /**
     * The numerical value of the price
     * @type {string}
     * @memberof Price
     */
    amount?: string;
    /**
     * The currency type
     * @type {string}
     * @memberof Price
     */
    currency?: string;
}
/**
 * 
 * @export
 * @interface ProSellerResponse
 */
export interface ProSellerResponse {
    /**
     * Specifies if the seller has the badge
     * @type {boolean}
     * @memberof ProSellerResponse
     */
    hasBadge?: boolean;
    /**
     * Specifies if the seller is eligible for the badge in the next refresh
     * @type {boolean}
     * @memberof ProSellerResponse
     */
    isEligible?: boolean;
    /**
     * Specifies when the seller received their badge
     * @type {string}
     * @memberof ProSellerResponse
     */
    badgedSince?: string;
    /**
     * Specifies whether the seller is prohibited from participating in the Pro Seller badge program.
     * @type {boolean}
     * @memberof ProSellerResponse
     */
    isProhibited?: boolean;
    /**
     * Specifies the seller\'s badge status in detail. The possible values are \"Become a Pro Seller\", \"You are a Pro Seller\", \"Pro Seller Badge at risk\", \"Eligible starting from YYYY-MM-DD\", and \"Not eligible for the Pro Seller Badge\"
     * @type {string}
     * @memberof ProSellerResponse
     */
    badgeStatus?: string;
    /**
     * 
     * @type {InlineResponse2006MeetsCriteria}
     * @memberof ProSellerResponse
     */
    meetsCriteria?: InlineResponse2006MeetsCriteria;
    /**
     * 
     * @type {InlineResponse2006CriteriaData}
     * @memberof ProSellerResponse
     */
    criteriaData?: InlineResponse2006CriteriaData;
    /**
     * 
     * @type {InlineResponse2006Recommendations}
     * @memberof ProSellerResponse
     */
    recommendations?: InlineResponse2006Recommendations;
}
/**
 * 
 * @export
 * @interface ProductType
 */
export interface ProductType {
    /**
     * 
     * @type {string}
     * @memberof ProductType
     */
    productTypeName?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductType
     */
    offerCount?: number;
}
/**
 * 
 * @export
 * @interface PublishAndTransactable
 */
export interface PublishAndTransactable {
    /**
     * 
     * @type {string}
     * @memberof PublishAndTransactable
     */
    issueTitle?: string;
    /**
     * 
     * @type {number}
     * @memberof PublishAndTransactable
     */
    totalIssue?: number;
    /**
     * 
     * @type {number}
     * @memberof PublishAndTransactable
     */
    maxIssue?: number;
    /**
     * 
     * @type {Array<InlineResponse2001ScoreDetailsOfferPublishAndTransactableIssues>}
     * @memberof PublishAndTransactable
     */
    issues?: Array<InlineResponse2001ScoreDetailsOfferPublishAndTransactableIssues>;
    /**
     * 
     * @type {number}
     * @memberof PublishAndTransactable
     */
    score?: number;
}
/**
 * 
 * @export
 * @interface QualityScore
 */
export interface QualityScore {
    /**
     * 
     * @type {number}
     * @memberof QualityScore
     */
    score?: number;
    /**
     * 
     * @type {Array<InlineResponse2001QualityScoreValues>}
     * @memberof QualityScore
     */
    values?: Array<InlineResponse2001QualityScoreValues>;
}
/**
 * 
 * @export
 * @interface Query
 */
export interface Query {
    /**
     * | Attribute | Description | Data Type | --- | ----------- | ------- | title | Product Title | string | | sku | An arbitrary alphanumeric unique ID, seller-specified, identifying each item | string | | itemId | Specifies the item identifier generated by Walmart | string |
     * @type {string}
     * @memberof Query
     */
    field?: QueryFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof Query
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum QueryFieldEnum {
    Title = 'title',
    Sku = 'sku',
    ItemId = 'itemId'
}

/**
 * 
 * @export
 * @interface RatingReviews
 */
export interface RatingReviews {
    /**
     * 
     * @type {string}
     * @memberof RatingReviews
     */
    maxRating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingReviews
     */
    ratingCount?: string;
}
/**
 * Recommendations on how to increase chances of Pro Seller Badge eligibility
 * @export
 * @interface Recommendations
 */
export interface Recommendations {
    /**
     * Recommendations on reducing the delivery defect rate
     * @type {string}
     * @memberof Recommendations
     */
    deliveryDefectRate?: string;
    /**
     * Recommendations on reducing the Cancellation rate
     * @type {string}
     * @memberof Recommendations
     */
    cancellationRate?: string;
    /**
     * Recommendations on increasing the trending item catalog coverage
     * @type {string}
     * @memberof Recommendations
     */
    listingQualityCatalog?: string;
}
/**
 * Score
 * @export
 * @interface Score
 */
export interface Score {
    /**
     * Offer Score
     * @type {number}
     * @memberof Score
     */
    offerScore?: number;
    /**
     * Content Score
     * @type {number}
     * @memberof Score
     */
    contentScore?: number;
    /**
     * Rating Review Score
     * @type {number}
     * @memberof Score
     */
    ratingReviewScore?: number;
}
/**
 * 
 * @export
 * @interface ScoreDetails
 */
export interface ScoreDetails {
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsOffer}
     * @memberof ScoreDetails
     */
    offer?: InlineResponse2001ScoreDetailsOffer;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsRatingReviews}
     * @memberof ScoreDetails
     */
    ratingReviews?: InlineResponse2001ScoreDetailsRatingReviews;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsPostPurchase}
     * @memberof ScoreDetails
     */
    postPurchase?: InlineResponse2001ScoreDetailsPostPurchase;
    /**
     * 
     * @type {InlineResponse2001ScoreDetailsContentAndDiscoverability}
     * @memberof ScoreDetails
     */
    contentAndDiscoverability?: InlineResponse2001ScoreDetailsContentAndDiscoverability;
}
/**
 * 
 * @export
 * @interface ShippingSpeed
 */
export interface ShippingSpeed {
    /**
     * 
     * @type {string}
     * @memberof ShippingSpeed
     */
    shippingType?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingSpeed
     */
    issueTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingSpeed
     */
    issueDesc?: string;
    /**
     * 
     * @type {number}
     * @memberof ShippingSpeed
     */
    score?: number;
}
/**
 * 
 * @export
 * @interface Stats
 */
export interface Stats {
    /**
     * 
     * @type {InlineResponse2001StatsGmv}
     * @memberof Stats
     */
    gmv?: InlineResponse2001StatsGmv;
    /**
     * 
     * @type {string}
     * @memberof Stats
     */
    pageViews?: string;
    /**
     * 
     * @type {string}
     * @memberof Stats
     */
    orders?: string;
    /**
     * 
     * @type {string}
     * @memberof Stats
     */
    conversionRate?: string;
    /**
     * 
     * @type {string}
     * @memberof Stats
     */
    totalUnits?: string;
}
/**
 * Gross Merchandise Value of the total result set
 * @export
 * @interface TotalGmvAmount
 */
export interface TotalGmvAmount {
    /**
     * The numerical value of the price
     * @type {string}
     * @memberof TotalGmvAmount
     */
    amount?: string;
    /**
     * The currency type
     * @type {string}
     * @memberof TotalGmvAmount
     */
    currency?: string;
}
/**
 * List of Qualified Items
 * @export
 * @interface TrendingItem
 */
export interface TrendingItem {
    /**
     * The categories this item belongs to
     * @type {string}
     * @memberof TrendingItem
     */
    categoryName?: string;
    /**
     * The department this product belongs to
     * @type {string}
     * @memberof TrendingItem
     */
    departmentName?: string;
    /**
     * International Standard Book Number
     * @type {string}
     * @memberof TrendingItem
     */
    isbn?: string;
    /**
     * A seller-specified, alphanumeric string uniquely identifying the product name
     * @type {string}
     * @memberof TrendingItem
     */
    productName?: string;
    /**
     * if the item can be shipped in two days
     * @type {number}
     * @memberof TrendingItem
     */
    isTwoDayEligible?: number;
    /**
     * Specifies the item identifier generated by Walmart
     * @type {string}
     * @memberof TrendingItem
     */
    itemId?: string;
    /**
     * Total number of item stored by seller
     * @type {number}
     * @memberof TrendingItem
     */
    totalOffers?: number;
    /**
     * International Standard Serial Number
     * @type {string}
     * @memberof TrendingItem
     */
    issn?: string;
    /**
     * if seller is selling this item
     * @type {number}
     * @memberof TrendingItem
     */
    existsForSeller?: number;
    /**
     * Level of trending for this item
     * @type {number}
     * @memberof TrendingItem
     */
    rank?: number;
    /**
     * Specifies the item brand
     * @type {string}
     * @memberof TrendingItem
     */
    brand?: string;
    /**
     * The superDepartmentName this item belongs to
     * @type {string}
     * @memberof TrendingItem
     */
    superDepartmentName?: string;
    /**
     * The subCategoryName this item belongs to
     * @type {string}
     * @memberof TrendingItem
     */
    subCategoryName?: string;
}
/**
 * 
 * @export
 * @interface V3InsightsItemsListingQualityItemsFilters
 */
export interface V3InsightsItemsListingQualityItemsFilters {
    /**
     * | Attribute | Description | Data Type | --- | ----------- | ------- | contentDiscoverabilityPercentage | Item\'s content and discoverability score expressed as a percentage. | string | | qualityScorePercentage | Item\'s overall Listing Quality score, rated as a percentage. | string | | offerPercentage | Item\'s offer score, based on: item price, shipping price and speed, and in-stock rate.| string | | ratingReviewsPercentage | Rating and reviews score, as a percentage. | string | | viewTrendingItems | Indicates to return details for trending items that have non-zero page views. Acceptable values are \"true\" if pageView > 0, or \"false\" if pageView >= 0. | string | | viewPostPurchaseItems | Show items with post-purchase quality issues. If item has post-purchase value >= 1, it filters all items greater or equal based on post purchase value. | string | | wfsFlag | Show WFS-eligible items. Value of this parameter can be true or false. | string | | categoryName | Item\'s category name. | string | | hasIssues | Provides a count of item with issues. | integer | | productType | Product type to classify the item (e.g. Pants). | string| | attributeList | List of all available filter attributes. | string |
     * @type {string}
     * @memberof V3InsightsItemsListingQualityItemsFilters
     */
    field?: V3InsightsItemsListingQualityItemsFiltersFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof V3InsightsItemsListingQualityItemsFilters
     */
    op?: V3InsightsItemsListingQualityItemsFiltersOpEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof V3InsightsItemsListingQualityItemsFilters
     */
    values?: Array<number>;
}

/**
    * @export
    * @enum {string}
    */
export enum V3InsightsItemsListingQualityItemsFiltersFieldEnum {
    ContentDiscoverabilityPercentage = 'contentDiscoverabilityPercentage',
    QualityScorePercentage = 'qualityScorePercentage',
    OfferPercentage = 'offerPercentage',
    RatingReviewsPercentage = 'ratingReviewsPercentage',
    ViewTrendingItems = 'viewTrendingItems',
    ViewPostPurchaseItems = 'viewPostPurchaseItems',
    WfsFlag = 'wfsFlag',
    CategoryName = 'categoryName',
    HasIssues = 'hasIssues',
    ProductType = 'productType',
    AttributeList = 'attributeList'
}
/**
    * @export
    * @enum {string}
    */
export enum V3InsightsItemsListingQualityItemsFiltersOpEnum {
    Equals = 'equals',
    Between = 'between'
}

/**
 * 
 * @export
 * @interface V3InsightsItemsListingQualityItemsQuery
 */
export interface V3InsightsItemsListingQualityItemsQuery {
    /**
     * | Attribute | Description | Data Type | --- | ----------- | ------- | title | Product Title | string | | sku | An arbitrary alphanumeric unique ID, seller-specified, identifying each item | string | | itemId | Specifies the item identifier generated by Walmart | string |
     * @type {string}
     * @memberof V3InsightsItemsListingQualityItemsQuery
     */
    field?: V3InsightsItemsListingQualityItemsQueryFieldEnum;
    /**
     * 
     * @type {string}
     * @memberof V3InsightsItemsListingQualityItemsQuery
     */
    value?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum V3InsightsItemsListingQualityItemsQueryFieldEnum {
    Title = 'title',
    Sku = 'sku',
    ItemId = 'itemId'
}

/**
 * 
 * @export
 * @interface Value
 */
export interface Value {
    /**
     * 
     * @type {string}
     * @memberof Value
     */
    scoreType?: string;
    /**
     * 
     * @type {number}
     * @memberof Value
     */
    scoreValue?: number;
    /**
     * 
     * @type {string}
     * @memberof Value
     */
    impact?: string;
}

/**
 * InsightApi - axios parameter creator
 * @export
 */
export const InsightApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of all item categories that have items with listing quality issues.
         * @summary Categories with Listing Quality Issues
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {boolean} [viewTrendingItems] Specify whether or not to include seller\&#39;s items that are trending in the Listing Quality Score.
         * @param {string} [wfsFlag] Specify whether or not to include WFS-eligible items in the overall Listing Quality Score.
         * @param {number} [hasIssue] Specify whether or not to include items that have issues in the Listing Quality Score.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesList: async (authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, viewTrendingItems?: boolean, wfsFlag?: string, hasIssue?: number, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getCategoriesList', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getCategoriesList', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getCategoriesList', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getCategoriesList', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/insights/items/listingQuality/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (viewTrendingItems !== undefined) {
                localVarQueryParameter['viewTrendingItems'] = viewTrendingItems;
            }

            if (wfsFlag !== undefined) {
                localVarQueryParameter['wfsFlag'] = wfsFlag;
            }

            if (hasIssue !== undefined) {
                localVarQueryParameter['hasIssue'] = hasIssue;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the total Listing Quality Score for a seller\'s entire item catalog.
         * @summary Seller Listing Quality Score
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {boolean} [viewTrendingItems] Specify whether or not to include seller\&#39;s items that are trending in the Listing Quality Score.
         * @param {string} [wfsFlag] Specify whether or not to include WFS-eligible items in the overall Listing Quality Score.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingQualityScore: async (authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, viewTrendingItems?: boolean, wfsFlag?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getListingQualityScore', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getListingQualityScore', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getListingQualityScore', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getListingQualityScore', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/insights/items/listingQuality/score`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (viewTrendingItems !== undefined) {
                localVarQueryParameter['viewTrendingItems'] = viewTrendingItems;
            }

            if (wfsFlag !== undefined) {
                localVarQueryParameter['wfsFlag'] = wfsFlag;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Pro Seller badge status will provide you with information regarding your current badge status as well as the progress you\'ve made in meeting the criteria.
         * @summary Pro Seller Badge Status
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProSellerBadgeInfo: async (authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getProSellerBadgeInfo', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getProSellerBadgeInfo', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getProSellerBadgeInfo', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getProSellerBadgeInfo', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/insights/prosellerbadge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Trending Item List
         * @summary Top Trending Items
         * @param {string} departmentId departmentId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [categoryId] categoryId
         * @param {string} [limit] The number of items to be returned.
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested.
         * @param {string} [timeFrame] Returns all trending items for the given time frame in days
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrendingResult: async (departmentId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, categoryId?: string, limit?: string, offset?: string, timeFrame?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('getTrendingResult', 'departmentId', departmentId)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getTrendingResult', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getTrendingResult', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getTrendingResult', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getTrendingResult', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/insights/items/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (departmentId !== undefined) {
                localVarQueryParameter['departmentId'] = departmentId;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (timeFrame !== undefined) {
                localVarQueryParameter['timeFrame'] = timeFrame;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Count for Unpubished Item
         * @summary Unpublished Item Counts
         * @param {string} fromDate Returns all unpublished items count with reason codes since the given date
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpublishedItemCount: async (fromDate: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromDate' is not null or undefined
            assertParamExists('getUnpublishedItemCount', 'fromDate', fromDate)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUnpublishedItemCount', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getUnpublishedItemCount', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getUnpublishedItemCount', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getUnpublishedItemCount', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/insights/items/unpublished/counts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Unpublished Items
         * @summary Unpublished Items
         * @param {string} fromDate Returns all unpublished items since the given date
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [unpublishedReasonCode] Unpublished reason code
         * @param {string} [limit] The number of items to be returned.
         * @param {string} [offerLifecycleStatus] The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
         * @param {string} [marketTrending] Filter the item list to return only items that are trending on Walmart.com
         * @param {string} [itemsWithInventory] Filter the item list to return only items that have inventory
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpublishedItems: async (fromDate: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, unpublishedReasonCode?: string, limit?: string, offerLifecycleStatus?: string, marketTrending?: string, itemsWithInventory?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromDate' is not null or undefined
            assertParamExists('getUnpublishedItems', 'fromDate', fromDate)
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('getUnpublishedItems', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('getUnpublishedItems', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('getUnpublishedItems', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('getUnpublishedItems', 'wMSVCNAME', wMSVCNAME)
            const localVarPath = `/v3/insights/items/unpublished/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (unpublishedReasonCode !== undefined) {
                localVarQueryParameter['unpublishedReasonCode'] = unpublishedReasonCode;
            }

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offerLifecycleStatus !== undefined) {
                localVarQueryParameter['offerLifecycleStatus'] = offerLifecycleStatus;
            }

            if (marketTrending !== undefined) {
                localVarQueryParameter['marketTrending'] = marketTrending;
            }

            if (itemsWithInventory !== undefined) {
                localVarQueryParameter['itemsWithInventory'] = itemsWithInventory;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get each item\'s listing quality details including: item quality score, offer score, content score and issues, and item performance.
         * @summary Item Listing Quality Details
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject} inlineObject 
         * @param {string} [limit] Specify number of items to return. If no limit is specified, API returns 200 items by default.
         * @param {string} [nextCursor] Specify pagination for long list of items.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsDetailsForListing: async (authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject: InlineObject, limit?: string, nextCursor?: string, wMCONSUMERCHANNELTYPE?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorization' is not null or undefined
            assertParamExists('itemsDetailsForListing', 'authorization', authorization)
            // verify required parameter 'wMSECACCESSTOKEN' is not null or undefined
            assertParamExists('itemsDetailsForListing', 'wMSECACCESSTOKEN', wMSECACCESSTOKEN)
            // verify required parameter 'wMQOSCORRELATIONID' is not null or undefined
            assertParamExists('itemsDetailsForListing', 'wMQOSCORRELATIONID', wMQOSCORRELATIONID)
            // verify required parameter 'wMSVCNAME' is not null or undefined
            assertParamExists('itemsDetailsForListing', 'wMSVCNAME', wMSVCNAME)
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('itemsDetailsForListing', 'inlineObject', inlineObject)
            const localVarPath = `/v3/insights/items/listingQuality/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (nextCursor !== undefined) {
                localVarQueryParameter['nextCursor'] = nextCursor;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }

            if (wMSECACCESSTOKEN !== undefined && wMSECACCESSTOKEN !== null) {
                localVarHeaderParameter['WM_SEC.ACCESS_TOKEN'] = String(wMSECACCESSTOKEN);
            }

            if (wMCONSUMERCHANNELTYPE !== undefined && wMCONSUMERCHANNELTYPE !== null) {
                localVarHeaderParameter['WM_CONSUMER.CHANNEL.TYPE'] = String(wMCONSUMERCHANNELTYPE);
            }

            if (wMQOSCORRELATIONID !== undefined && wMQOSCORRELATIONID !== null) {
                localVarHeaderParameter['WM_QOS.CORRELATION_ID'] = String(wMQOSCORRELATIONID);
            }

            if (wMSVCNAME !== undefined && wMSVCNAME !== null) {
                localVarHeaderParameter['WM_SVC.NAME'] = String(wMSVCNAME);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsightApi - functional programming interface
 * @export
 */
export const InsightApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InsightApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of all item categories that have items with listing quality issues.
         * @summary Categories with Listing Quality Issues
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {boolean} [viewTrendingItems] Specify whether or not to include seller\&#39;s items that are trending in the Listing Quality Score.
         * @param {string} [wfsFlag] Specify whether or not to include WFS-eligible items in the overall Listing Quality Score.
         * @param {number} [hasIssue] Specify whether or not to include items that have issues in the Listing Quality Score.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategoriesList(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, viewTrendingItems?: boolean, wfsFlag?: string, hasIssue?: number, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategoriesList(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, viewTrendingItems, wfsFlag, hasIssue, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the total Listing Quality Score for a seller\'s entire item catalog.
         * @summary Seller Listing Quality Score
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {boolean} [viewTrendingItems] Specify whether or not to include seller\&#39;s items that are trending in the Listing Quality Score.
         * @param {string} [wfsFlag] Specify whether or not to include WFS-eligible items in the overall Listing Quality Score.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListingQualityScore(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, viewTrendingItems?: boolean, wfsFlag?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListingQualityScore(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, viewTrendingItems, wfsFlag, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The Pro Seller badge status will provide you with information regarding your current badge status as well as the progress you\'ve made in meeting the criteria.
         * @summary Pro Seller Badge Status
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProSellerBadgeInfo(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProSellerBadgeInfo(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Trending Item List
         * @summary Top Trending Items
         * @param {string} departmentId departmentId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [categoryId] categoryId
         * @param {string} [limit] The number of items to be returned.
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested.
         * @param {string} [timeFrame] Returns all trending items for the given time frame in days
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrendingResult(departmentId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, categoryId?: string, limit?: string, offset?: string, timeFrame?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrendingResult(departmentId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, categoryId, limit, offset, timeFrame, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Count for Unpubished Item
         * @summary Unpublished Item Counts
         * @param {string} fromDate Returns all unpublished items count with reason codes since the given date
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnpublishedItemCount(fromDate: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnpublishedItemCount(fromDate, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Unpublished Items
         * @summary Unpublished Items
         * @param {string} fromDate Returns all unpublished items since the given date
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [unpublishedReasonCode] Unpublished reason code
         * @param {string} [limit] The number of items to be returned.
         * @param {string} [offerLifecycleStatus] The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
         * @param {string} [marketTrending] Filter the item list to return only items that are trending on Walmart.com
         * @param {string} [itemsWithInventory] Filter the item list to return only items that have inventory
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnpublishedItems(fromDate: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, unpublishedReasonCode?: string, limit?: string, offerLifecycleStatus?: string, marketTrending?: string, itemsWithInventory?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnpublishedItems(fromDate, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, unpublishedReasonCode, limit, offerLifecycleStatus, marketTrending, itemsWithInventory, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get each item\'s listing quality details including: item quality score, offer score, content score and issues, and item performance.
         * @summary Item Listing Quality Details
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject} inlineObject 
         * @param {string} [limit] Specify number of items to return. If no limit is specified, API returns 200 items by default.
         * @param {string} [nextCursor] Specify pagination for long list of items.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemsDetailsForListing(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject: InlineObject, limit?: string, nextCursor?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemsDetailsForListing(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject, limit, nextCursor, wMCONSUMERCHANNELTYPE, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InsightApi - factory interface
 * @export
 */
export const InsightApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InsightApiFp(configuration)
    return {
        /**
         * Get a list of all item categories that have items with listing quality issues.
         * @summary Categories with Listing Quality Issues
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {boolean} [viewTrendingItems] Specify whether or not to include seller\&#39;s items that are trending in the Listing Quality Score.
         * @param {string} [wfsFlag] Specify whether or not to include WFS-eligible items in the overall Listing Quality Score.
         * @param {number} [hasIssue] Specify whether or not to include items that have issues in the Listing Quality Score.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategoriesList(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, viewTrendingItems?: boolean, wfsFlag?: string, hasIssue?: number, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.getCategoriesList(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, viewTrendingItems, wfsFlag, hasIssue, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the total Listing Quality Score for a seller\'s entire item catalog.
         * @summary Seller Listing Quality Score
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {boolean} [viewTrendingItems] Specify whether or not to include seller\&#39;s items that are trending in the Listing Quality Score.
         * @param {string} [wfsFlag] Specify whether or not to include WFS-eligible items in the overall Listing Quality Score.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingQualityScore(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, viewTrendingItems?: boolean, wfsFlag?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getListingQualityScore(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, viewTrendingItems, wfsFlag, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * The Pro Seller badge status will provide you with information regarding your current badge status as well as the progress you\'ve made in meeting the criteria.
         * @summary Pro Seller Badge Status
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProSellerBadgeInfo(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.getProSellerBadgeInfo(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Trending Item List
         * @summary Top Trending Items
         * @param {string} departmentId departmentId
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [categoryId] categoryId
         * @param {string} [limit] The number of items to be returned.
         * @param {string} [offset] The object response to start with, where 0 is the first entity that can be requested.
         * @param {string} [timeFrame] Returns all trending items for the given time frame in days
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrendingResult(departmentId: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, categoryId?: string, limit?: string, offset?: string, timeFrame?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.getTrendingResult(departmentId, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, categoryId, limit, offset, timeFrame, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Count for Unpubished Item
         * @summary Unpublished Item Counts
         * @param {string} fromDate Returns all unpublished items count with reason codes since the given date
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpublishedItemCount(fromDate: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.getUnpublishedItemCount(fromDate, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Unpublished Items
         * @summary Unpublished Items
         * @param {string} fromDate Returns all unpublished items since the given date
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {string} [unpublishedReasonCode] Unpublished reason code
         * @param {string} [limit] The number of items to be returned.
         * @param {string} [offerLifecycleStatus] The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
         * @param {string} [marketTrending] Filter the item list to return only items that are trending on Walmart.com
         * @param {string} [itemsWithInventory] Filter the item list to return only items that have inventory
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpublishedItems(fromDate: string, authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, unpublishedReasonCode?: string, limit?: string, offerLifecycleStatus?: string, marketTrending?: string, itemsWithInventory?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getUnpublishedItems(fromDate, authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, unpublishedReasonCode, limit, offerLifecycleStatus, marketTrending, itemsWithInventory, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * Get each item\'s listing quality details including: item quality score, offer score, content score and issues, and item performance.
         * @summary Item Listing Quality Details
         * @param {string} authorization Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
         * @param {string} wMSECACCESSTOKEN The access token retrieved in the Token API call
         * @param {string} wMQOSCORRELATIONID A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
         * @param {string} wMSVCNAME Walmart Service Name
         * @param {InlineObject} inlineObject 
         * @param {string} [limit] Specify number of items to return. If no limit is specified, API returns 200 items by default.
         * @param {string} [nextCursor] Specify pagination for long list of items.
         * @param {string} [wMCONSUMERCHANNELTYPE] A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsDetailsForListing(authorization: string, wMSECACCESSTOKEN: string, wMQOSCORRELATIONID: string, wMSVCNAME: string, inlineObject: InlineObject, limit?: string, nextCursor?: string, wMCONSUMERCHANNELTYPE?: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.itemsDetailsForListing(authorization, wMSECACCESSTOKEN, wMQOSCORRELATIONID, wMSVCNAME, inlineObject, limit, nextCursor, wMCONSUMERCHANNELTYPE, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCategoriesList operation in InsightApi.
 * @export
 * @interface InsightApiGetCategoriesListRequest
 */
export interface InsightApiGetCategoriesListRequest {
    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof InsightApiGetCategoriesList
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof InsightApiGetCategoriesList
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof InsightApiGetCategoriesList
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof InsightApiGetCategoriesList
     */
    readonly wMSVCNAME: string

    /**
     * Specify whether or not to include seller\&#39;s items that are trending in the Listing Quality Score.
     * @type {boolean}
     * @memberof InsightApiGetCategoriesList
     */
    readonly viewTrendingItems?: boolean

    /**
     * Specify whether or not to include WFS-eligible items in the overall Listing Quality Score.
     * @type {string}
     * @memberof InsightApiGetCategoriesList
     */
    readonly wfsFlag?: string

    /**
     * Specify whether or not to include items that have issues in the Listing Quality Score.
     * @type {number}
     * @memberof InsightApiGetCategoriesList
     */
    readonly hasIssue?: number

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof InsightApiGetCategoriesList
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getListingQualityScore operation in InsightApi.
 * @export
 * @interface InsightApiGetListingQualityScoreRequest
 */
export interface InsightApiGetListingQualityScoreRequest {
    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof InsightApiGetListingQualityScore
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof InsightApiGetListingQualityScore
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof InsightApiGetListingQualityScore
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof InsightApiGetListingQualityScore
     */
    readonly wMSVCNAME: string

    /**
     * Specify whether or not to include seller\&#39;s items that are trending in the Listing Quality Score.
     * @type {boolean}
     * @memberof InsightApiGetListingQualityScore
     */
    readonly viewTrendingItems?: boolean

    /**
     * Specify whether or not to include WFS-eligible items in the overall Listing Quality Score.
     * @type {string}
     * @memberof InsightApiGetListingQualityScore
     */
    readonly wfsFlag?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof InsightApiGetListingQualityScore
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getProSellerBadgeInfo operation in InsightApi.
 * @export
 * @interface InsightApiGetProSellerBadgeInfoRequest
 */
export interface InsightApiGetProSellerBadgeInfoRequest {
    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof InsightApiGetProSellerBadgeInfo
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof InsightApiGetProSellerBadgeInfo
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof InsightApiGetProSellerBadgeInfo
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof InsightApiGetProSellerBadgeInfo
     */
    readonly wMSVCNAME: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof InsightApiGetProSellerBadgeInfo
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getTrendingResult operation in InsightApi.
 * @export
 * @interface InsightApiGetTrendingResultRequest
 */
export interface InsightApiGetTrendingResultRequest {
    /**
     * departmentId
     * @type {string}
     * @memberof InsightApiGetTrendingResult
     */
    readonly departmentId: string

    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof InsightApiGetTrendingResult
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof InsightApiGetTrendingResult
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof InsightApiGetTrendingResult
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof InsightApiGetTrendingResult
     */
    readonly wMSVCNAME: string

    /**
     * categoryId
     * @type {string}
     * @memberof InsightApiGetTrendingResult
     */
    readonly categoryId?: string

    /**
     * The number of items to be returned.
     * @type {string}
     * @memberof InsightApiGetTrendingResult
     */
    readonly limit?: string

    /**
     * The object response to start with, where 0 is the first entity that can be requested.
     * @type {string}
     * @memberof InsightApiGetTrendingResult
     */
    readonly offset?: string

    /**
     * Returns all trending items for the given time frame in days
     * @type {string}
     * @memberof InsightApiGetTrendingResult
     */
    readonly timeFrame?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof InsightApiGetTrendingResult
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getUnpublishedItemCount operation in InsightApi.
 * @export
 * @interface InsightApiGetUnpublishedItemCountRequest
 */
export interface InsightApiGetUnpublishedItemCountRequest {
    /**
     * Returns all unpublished items count with reason codes since the given date
     * @type {string}
     * @memberof InsightApiGetUnpublishedItemCount
     */
    readonly fromDate: string

    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof InsightApiGetUnpublishedItemCount
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof InsightApiGetUnpublishedItemCount
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof InsightApiGetUnpublishedItemCount
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof InsightApiGetUnpublishedItemCount
     */
    readonly wMSVCNAME: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof InsightApiGetUnpublishedItemCount
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for getUnpublishedItems operation in InsightApi.
 * @export
 * @interface InsightApiGetUnpublishedItemsRequest
 */
export interface InsightApiGetUnpublishedItemsRequest {
    /**
     * Returns all unpublished items since the given date
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly fromDate: string

    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly wMSVCNAME: string

    /**
     * Unpublished reason code
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly unpublishedReasonCode?: string

    /**
     * The number of items to be returned.
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly limit?: string

    /**
     * The lifecycle status of an item describes where the item listing is in the overall lifecycle. Examples of allowed values are ACTIVE , ARCHIVED, RETIRED.
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly offerLifecycleStatus?: string

    /**
     * Filter the item list to return only items that are trending on Walmart.com
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly marketTrending?: string

    /**
     * Filter the item list to return only items that have inventory
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly itemsWithInventory?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof InsightApiGetUnpublishedItems
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * Request parameters for itemsDetailsForListing operation in InsightApi.
 * @export
 * @interface InsightApiItemsDetailsForListingRequest
 */
export interface InsightApiItemsDetailsForListingRequest {
    /**
     * Basic authorization header. Base 64 encodes the Client ID and Client Secret retrieved in step two of the integration steps.
     * @type {string}
     * @memberof InsightApiItemsDetailsForListing
     */
    readonly authorization: string

    /**
     * The access token retrieved in the Token API call
     * @type {string}
     * @memberof InsightApiItemsDetailsForListing
     */
    readonly wMSECACCESSTOKEN: string

    /**
     * A unique ID which identifies each API call and used to track and debug issues; use a random generated GUID for this ID
     * @type {string}
     * @memberof InsightApiItemsDetailsForListing
     */
    readonly wMQOSCORRELATIONID: string

    /**
     * Walmart Service Name
     * @type {string}
     * @memberof InsightApiItemsDetailsForListing
     */
    readonly wMSVCNAME: string

    /**
     * 
     * @type {InlineObject}
     * @memberof InsightApiItemsDetailsForListing
     */
    readonly inlineObject: InlineObject

    /**
     * Specify number of items to return. If no limit is specified, API returns 200 items by default.
     * @type {string}
     * @memberof InsightApiItemsDetailsForListing
     */
    readonly limit?: string

    /**
     * Specify pagination for long list of items.
     * @type {string}
     * @memberof InsightApiItemsDetailsForListing
     */
    readonly nextCursor?: string

    /**
     * A unique ID to track the consumer request by channel. Use the Consumer Channel Type received during onboarding
     * @type {string}
     * @memberof InsightApiItemsDetailsForListing
     */
    readonly wMCONSUMERCHANNELTYPE?: string
}

/**
 * InsightApi - object-oriented interface
 * @export
 * @class InsightApi
 * @extends {BaseAPI}
 */
export class InsightApi extends BaseAPI {
    /**
     * Get a list of all item categories that have items with listing quality issues.
     * @summary Categories with Listing Quality Issues
     * @param {InsightApiGetCategoriesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getCategoriesList(requestParameters: InsightApiGetCategoriesListRequest, options?: any) {
        return InsightApiFp(this.configuration).getCategoriesList(requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.viewTrendingItems, requestParameters.wfsFlag, requestParameters.hasIssue, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the total Listing Quality Score for a seller\'s entire item catalog.
     * @summary Seller Listing Quality Score
     * @param {InsightApiGetListingQualityScoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getListingQualityScore(requestParameters: InsightApiGetListingQualityScoreRequest, options?: any) {
        return InsightApiFp(this.configuration).getListingQualityScore(requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.viewTrendingItems, requestParameters.wfsFlag, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The Pro Seller badge status will provide you with information regarding your current badge status as well as the progress you\'ve made in meeting the criteria.
     * @summary Pro Seller Badge Status
     * @param {InsightApiGetProSellerBadgeInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getProSellerBadgeInfo(requestParameters: InsightApiGetProSellerBadgeInfoRequest, options?: any) {
        return InsightApiFp(this.configuration).getProSellerBadgeInfo(requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Trending Item List
     * @summary Top Trending Items
     * @param {InsightApiGetTrendingResultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getTrendingResult(requestParameters: InsightApiGetTrendingResultRequest, options?: any) {
        return InsightApiFp(this.configuration).getTrendingResult(requestParameters.departmentId, requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.categoryId, requestParameters.limit, requestParameters.offset, requestParameters.timeFrame, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Count for Unpubished Item
     * @summary Unpublished Item Counts
     * @param {InsightApiGetUnpublishedItemCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getUnpublishedItemCount(requestParameters: InsightApiGetUnpublishedItemCountRequest, options?: any) {
        return InsightApiFp(this.configuration).getUnpublishedItemCount(requestParameters.fromDate, requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Unpublished Items
     * @summary Unpublished Items
     * @param {InsightApiGetUnpublishedItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public getUnpublishedItems(requestParameters: InsightApiGetUnpublishedItemsRequest, options?: any) {
        return InsightApiFp(this.configuration).getUnpublishedItems(requestParameters.fromDate, requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.unpublishedReasonCode, requestParameters.limit, requestParameters.offerLifecycleStatus, requestParameters.marketTrending, requestParameters.itemsWithInventory, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get each item\'s listing quality details including: item quality score, offer score, content score and issues, and item performance.
     * @summary Item Listing Quality Details
     * @param {InsightApiItemsDetailsForListingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsightApi
     */
    public itemsDetailsForListing(requestParameters: InsightApiItemsDetailsForListingRequest, options?: any) {
        return InsightApiFp(this.configuration).itemsDetailsForListing(requestParameters.authorization, requestParameters.wMSECACCESSTOKEN, requestParameters.wMQOSCORRELATIONID, requestParameters.wMSVCNAME, requestParameters.inlineObject, requestParameters.limit, requestParameters.nextCursor, requestParameters.wMCONSUMERCHANNELTYPE, options).then((request) => request(this.axios, this.basePath));
    }
}


